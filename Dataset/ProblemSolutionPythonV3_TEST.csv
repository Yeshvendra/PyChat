Index,Problem,Python Code
2802,Program to print the right triangle Alphabet pattern,"
print(""Enter the row and column size:"");
row_size=input()
for out in range(ord('A'),ord(row_size)+1):
Â  Â  for i in range(ord('A'),out+1):
Â  Â  Â  Â  print(chr(i),end="" "")
Â  Â  print(""\r"")
"
2803,Python Program to Find the GCD of Two Numbers Using Recursion,"def gcd(a,b):
    if(b==0):
        return a
    else:
        return gcd(b,a%b)
a=int(input(""Enter first number:""))
b=int(input(""Enter second number:""))
GCD=gcd(a,b)
print(""GCD is: "")
print(GCD)"
2804,Python Program to Find Transitive Closure of a Graph,"class Graph:
    def __init__(self):
        # dictionary containing keys that map to the corresponding vertex object
        self.vertices = {}
Â 
    def add_vertex(self, key):
        """"""Add a vertex with the given key to the graph.""""""
        vertex = Vertex(key)
        self.vertices[key] = vertex
Â 
    def get_vertex(self, key):
        """"""Return vertex object with the corresponding key.""""""
        return self.vertices[key]
Â 
    def __contains__(self, key):
        return key in self.vertices
Â 
    def add_edge(self, src_key, dest_key, weight=1):
        """"""Add edge from src_key to dest_key with given weight.""""""
        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)
Â 
    def does_edge_exist(self, src_key, dest_key):
        """"""Return True if there is an edge from src_key to dest_key.""""""
        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])
Â 
    def __len__(self):
        return len(self.vertices)
Â 
    def __iter__(self):
        return iter(self.vertices.values())
Â 
Â 
class Vertex:
    def __init__(self, key):
        self.key = key
        self.points_to = {}
Â 
    def get_key(self):
        """"""Return key corresponding to this vertex object.""""""
        return self.key
Â 
    def add_neighbour(self, dest, weight):
        """"""Make this vertex point to dest with given edge weight.""""""
        self.points_to[dest] = weight
Â 
    def get_neighbours(self):
        """"""Return all vertices pointed to by this vertex.""""""
        return self.points_to.keys()
Â 
    def get_weight(self, dest):
        """"""Get weight of edge from this vertex to dest.""""""
        return self.points_to[dest]
Â 
    def does_it_point_to(self, dest):
        """"""Return True if this vertex points to dest.""""""
        return dest in self.points_to
Â 
Â 
def transitive_closure(g):
    """"""Return dictionary reachable.
Â 
    reachable[u][v] = True iff there is a path from vertex u to v.
Â 
    g is a Graph object which can have negative edge weights.
    """"""
    reachable = {v:dict.fromkeys(g, False) for v in g}
Â 
    for v in g:
        for n in v.get_neighbours():
            reachable[v][n] = True
Â 
    for v in g:
         reachable[v][v] = True
Â 
    for p in g: 
        for v in g:
            for w in g:
                if reachable[v][p] and reachable[p][w]:
                    reachable[v][w] = True
Â 
    return reachable
Â 
Â 
g = Graph()
print('Menu')
print('add vertex <key>')
print('add edge <src> <dest>')
print('transitive-closure')
print('display')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0]
    if operation == 'add':
        suboperation = do[1]
        if suboperation == 'vertex':
            key = int(do[2])
            if key not in g:
                g.add_vertex(key)
            else:
                print('Vertex already exists.')
        elif suboperation == 'edge':
            src = int(do[2])
            dest = int(do[3])
            if src not in g:
                print('Vertex {} does not exist.'.format(src))
            elif dest not in g:
                print('Vertex {} does not exist.'.format(dest))
            else:
                if not g.does_edge_exist(src, dest):
                    g.add_edge(src, dest)
                else:
                    print('Edge already exists.')
Â 
    elif operation == 'transitive-closure':
        reachable = transitive_closure(g)
        print('All pairs (u, v) such that there is a path from u to v: ')
        for start in g:
            for end in g:
                if reachable[start][end]:
                    print('{}, {}'.format(start.get_key(), end.get_key()))
Â 
    elif operation == 'display':
        print('Vertices: ', end='')
        for v in g:
            print(v.get_key(), end=' ')
        print()
Â 
        print('Edges: ')
        for v in g:
            for dest in v.get_neighbours():
                w = v.get_weight(dest)
                print('(src={}, dest={}, weight={}) '.format(v.get_key(),
                                                             dest.get_key(), w))
        print()
Â 
    elif operation == 'quit':
        break"
2805,Program to find addition of two matrices ,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]
# Taking input of the 2nd matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])

# Compute Addition of two matrices
sum_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        sum_matrix[i][j]=matrix[i][j]+matrix1[i][j]

# display the sum of two matrices
print(""Sum of the two Matrices is:"")
for m in sum_matrix:
    print(m)"
2806,Remove all uppercase characters in the String ,"
str=input(""Enter the String:"")
str2 = []
i = 0
while i < len(str):
Â  Â  ch = str[i]
Â  Â  if not ch.isupper():
Â  Â  Â  Â  str2.append(ch)
Â  Â  i += 1
Final_String = ''.join(str2)
print(""After removing uppercase letter string is:"",Final_String)"
2807,Decimal to Octal conversion using recursion,"sem=1octal=0def DecimalToOctal(n):Â  Â  global sem,octalÂ  Â  if(n!=0):Â  Â  Â  Â  octal = octal + (n % 8) * semÂ  Â  Â  Â  sem = sem * 10Â  Â  Â  Â  DecimalToOctal(n // 8)Â  Â  return octaln=int(input(""Enter the Decimal Value:""))print(""Octal Value of Decimal number is: "",DecimalToOctal(n))"
2808,Check whether a given number is positive or negative,"num=int(input(""Enter a number:""))
if(num<0):
Â  Â  print(""The number is negative"")
elif(num>0):
Â  Â  print(""The number is positive"")
else:
Â  Â  Â print(""The number is neither negative nor positive"")"
2809,Python Program to Find the Sum of Elements in a List Recursively,"def sum_arr(arr,size):
   if (size == 0):
     return 0
   else:
     return arr[size-1] + sum_arr(arr,size-1)
n=int(input(""Enter the number of elements for list:""))
a=[]
for i in range(0,n):
    element=int(input(""Enter element:""))
    a.append(element)
print(""The list is:"")
print(a)
print(""Sum of items in list:"")
b=sum_arr(a,n)
print(b)"
2810,Python Program to Solve Matrix-Chain Multiplication using Dynamic Programming with Bottom-Up Approach,"def matrix_product(p):
    """"""Return m and s.
Â 
    m[i][j] is the minimum number of scalar multiplications needed to compute the
    product of matrices A(i), A(i + 1), ..., A(j).
Â 
    s[i][j] is the index of the matrix after which the product is split in an
    optimal parenthesization of the matrix product.
Â 
    p[0... n] is a list such that matrix A(i) has dimensions p[i - 1] x p[i].
    """"""
    length = len(p) # len(p) = number of matrices + 1
Â 
    # m[i][j] is the minimum number of multiplications needed to compute the
    # product of matrices A(i), A(i+1), ..., A(j)
    # s[i][j] is the matrix after which the product is split in the minimum
    # number of multiplications needed
    m = [[-1]*length for _ in range(length)]
    s = [[-1]*length for _ in range(length)]
Â 
    for i in range(1, length):
        m[i][i] = 0
Â 
    for chain_length in range(2, length):
        for start in range(1, length - chain_length + 1):
            end = start + chain_length - 1
            q = float('inf')
            for k in range(start, end):
                temp = m[start][k] + m[k + 1][end] + p[start - 1]*p[k]*p[end]
                if temp < q:
                    q = temp
                    s[start][end] = k
            m[start][end] = q
Â 
    return m, s
Â 
Â 
def print_parenthesization(s, start, end):
    """"""Print the optimal parenthesization of the matrix product A(start) x
    A(start + 1) x ... x A(end).
Â 
    s[i][j] is the index of the matrix after which the product is split in an
    optimal parenthesization of the matrix product.
    """"""
    if start == end:
        print('A[{}]'.format(start), end='')
        return
Â 
    k = s[start][end]
Â 
    print('(', end='')
    print_parenthesization(s, start, k)
    print_parenthesization(s, k + 1, end)
    print(')', end='')
Â 
Â 
n = int(input('Enter number of matrices: '))
p = []
for i in range(n):
    temp = int(input('Enter number of rows in matrix {}: '.format(i + 1)))
    p.append(temp)
temp = int(input('Enter number of columns in matrix {}: '.format(n)))
p.append(temp)
Â 
m, s = matrix_product(p)
print('The number of scalar multiplications needed:', m[1][n])
print('Optimal parenthesization: ', end='')
print_parenthesization(s, 1, n)"
2811,Python Program to Implement Binomial Tree,"class BinomialTree:
    def __init__(self, key):
        self.key = key
        self.children = []
        self.order = 0
Â 
    def add_at_end(self, t):
        self.children.append(t)
        self.order = self.order + 1
Â 
Â 
trees = []
Â 
print('Menu')
print('create <key>')
print('combine <index1> <index2>')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
    if operation == 'create':
        key = int(do[1])
        btree = BinomialTree(key)
        trees.append(btree)
        print('Binomial tree created.')
    elif operation == 'combine':
        index1 = int(do[1])
        index2 = int(do[2])
        if trees[index1].order == trees[index2].order:
            trees[index1].add_at_end(trees[index2])
            del trees[index2]
            print('Binomial trees combined.')
        else:
            print('Orders of the trees need to be the same.')
Â 
    elif operation == 'quit':
        break
Â 
    print('{:>8}{:>12}{:>8}'.format('Index', 'Root key', 'Order'))
    for index, t in enumerate(trees):
        print('{:8d}{:12d}{:8d}'.format(index, t.key, t.order))"
2812,"Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5,
between 2000 and 3200 (both included).
The numbers obtained should be printed in a comma-separated sequence on a single line.
:","l=[]
for i in range(2000, 3201):
    if (i%7==0) and (i%5!=0):
        l.append(str(i))

print ','.join(l)
"
2813,Python Program to Find the Smallest Set of Unit-Length Closed Intervals that Contains All Points using Greedy Algorithm,"def smallest_unit_length_intervals(points):
    """"""Return smallest set with unit-length intervals that includes all points.
Â 
    A smallest set containing closed intervals is returned such that each point
    is included in some interval.
    The intervals are in the form of tuples (a, b).
Â 
    points is a list of points on the x-axis.
    """"""
    points.sort()
Â 
    smallest_set = set()
    end_of_last_interval = float('-inf')
    for p in points:
        if end_of_last_interval <= p:
            interval = (p, p + 1)
            smallest_set.add(interval)
            end_of_last_interval = p + 1
Â 
    return smallest_set
Â 
Â 
points = input('Enter the points: ').split()
points = [float(p) for p in points]
Â 
ans = smallest_unit_length_intervals(points)
print('A smallest-size set containing unit-length intervals '
      'that contain all of these points is', ans)"
2814,Write a program to print the pattern,"
print(""Enter the row and column size:"");
row_size=int(input())
for out in range(1,row_size+1):
Â  Â  for i in range(0,row_size):
Â  Â  Â  Â  print(out,end="""")
Â  Â  print(""\r"")"
2815,Python Program to Solve 0-1 Knapsack Problem using Dynamic Programming with Bottom-Up Approach,"def knapsack(value, weight, capacity):
    """"""Return the maximum value of items that doesn't exceed capacity.
Â 
    value[i] is the value of item i and weight[i] is the weight of item i
    for 1 <= i <= n where n is the number of items.
Â 
    capacity is the maximum weight.
    """"""
    n = len(value) - 1
Â 
    # m[i][w] will store the maximum value that can be attained with a maximum
    # capacity of w and using only the first i items
    m = [[-1]*(capacity + 1) for _ in range(n + 1)]
Â 
    for w in range(capacity + 1):
        m[0][w] = 0
Â 
    for i in range(1, n + 1):
        for w in range(capacity + 1):
            if weight[i] > w:
                m[i][w] = m[i - 1][w]
            else:
                m[i][w] = max(m[i - 1][w - weight[i]] + value[i], 
                              m[i - 1][w])
Â 
    return m[n][capacity]
Â 
Â 
n = int(input('Enter number of items: '))
value = input('Enter the values of the {} item(s) in order: '
              .format(n)).split()
value = [int(v) for v in value]
value.insert(0, None) # so that the value of the ith item is at value[i]
weight = input('Enter the positive weights of the {} item(s) in order: '
               .format(n)).split()
weight = [int(w) for w in weight]
weight.insert(0, None) # so that the weight of the ith item is at weight[i]
capacity = int(input('Enter maximum weight: '))
Â 
ans = knapsack(value, weight, capacity)
print('The maximum value of items that can be carried:', ans)"
2816,"
Please write a program which prints all permutations of [1,2,3]

:","
import itertools
print list(itertools.permutations([1,2,3]))

"
2817,Program to convert octal to decimal,"print(""Enter the octal number: "");
octal=int(input());
decimal = 0
sem = 0
while(octal!= 0):
Â  Â  Â  Â  decimal=decimal+(octal%10)*pow(8,sem)
Â  Â  Â  Â  sem+=1
Â  Â  Â  Â  octal=octal// 10
print(""Decimal number is: "",decimal)
"
2818,Python Program to Demonstrate Circular Single Linked List,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
Â 
Â 
class CircularLinkedList:
    def __init__(self):
        self.head = None
Â 
    def get_node(self, index):
        if self.head is None:
            return None
        current = self.head
        for i in range(index):
            current = current.next
            if current == self.head:
                return None
        return current
Â 
    def get_prev_node(self, ref_node):
        if self.head is None:
            return None
        current = self.head
        while current.next != ref_node:
            current = current.next
        return current
Â 
    def insert_after(self, ref_node, new_node):
        new_node.next = ref_node.next
        ref_node.next = new_node
Â 
    def insert_before(self, ref_node, new_node):
        prev_node = self.get_prev_node(ref_node)
        self.insert_after(prev_node, new_node)
Â 
    def insert_at_end(self, new_node):
        if self.head is None:
            self.head = new_node
            new_node.next = new_node
        else:
            self.insert_before(self.head, new_node)
Â 
    def insert_at_beg(self, new_node):
        self.insert_at_end(new_node)
        self.head = new_node
Â 
    def remove(self, node):
        if self.head.next == self.head:
            self.head = None
        else:
            prev_node = self.get_prev_node(node)
            prev_node.next = node.next
            if self.head == node:
                self.head = node.next
Â 
    def display(self):
        if self.head is None:
            return
        current = self.head
        while True:
            print(current.data, end = ' ')
            current = current.next
            if current == self.head:
                break
Â 
Â 
a_cllist = CircularLinkedList()
Â 
print('Menu')
print('insert <data> after <index>')
print('insert <data> before <index>')
print('insert <data> at beg')
print('insert <data> at end')
print('remove <index>') 
print('quit')
Â 
while True:
    print('The list: ', end = '')
    a_cllist.display()
    print()
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
Â 
    if operation == 'insert':
        data = int(do[1])
        position = do[3].strip().lower()
        new_node = Node(data)
        suboperation = do[2].strip().lower() 
        if suboperation == 'at':
            if position == 'beg':
                a_cllist.insert_at_beg(new_node)
            elif position == 'end':
                a_cllist.insert_at_end(new_node)
        else:
            index = int(position)
            ref_node = a_cllist.get_node(index)
            if ref_node is None:
                print('No such index.')
                continue
            if suboperation == 'after':
                a_cllist.insert_after(ref_node, new_node)
            elif suboperation == 'before':
                a_cllist.insert_before(ref_node, new_node)
Â 
    elif operation == 'remove':
        index = int(do[1])
        node = a_cllist.get_node(index)
        if node is None:
            print('No such index.')
            continue
        a_cllist.remove(node)
Â 
    elif operation == 'quit':
        break"
2819,Python Program to Reverse a Given Number,"Â 
n=int(input(""Enter number: ""))
rev=0
while(n>0):
    dig=n%10
    rev=rev*10+dig
    n=n//10
print(""Reverse of the number:"",rev)"
2820,Odd Even Sort Program in Python | Java | C | C++,"
size=int(input(""Enter the size of the array:""));
arr=[]
print(""Enter the element of the array:"");
for i in range(0,size):
Â  Â  num = int(input())
Â  Â  arr.append(num)

print(""Before Sorting Array Element are: "",arr)


for out in range(0,size):
Â  Â  for inn in range(0, size-1,+2):
Â  Â  Â  Â  if inn != size-1:
Â  Â  Â  Â  Â  Â  if arr[ inn] > arr[inn +1]:
Â  Â  Â  Â  Â  Â  Â  Â  temp = arr[inn]
Â  Â  Â  Â  Â  Â  Â  Â  arr[inn]=arr[inn +1]
Â  Â  Â  Â  Â  Â  Â  Â  arr[inn +1]=temp

Â  Â  for inn in range(1, size - 1, +2):
Â  Â  Â  Â  if inn != size-1:
Â  Â  Â  Â  Â  Â  if arr[ inn] > arr[inn +1]:
Â  Â  Â  Â  Â  Â  Â  Â  temp = arr[inn]
Â  Â  Â  Â  Â  Â  Â  Â  arr[inn]=arr[inn +1]
Â  Â  Â  Â  Â  Â  Â  Â  arr[inn +1]=temp

print(""\nAfter Sorting Array Element are: "",arr)"
2821,Program to compute the area and perimeter of Heptagon,"

import math
print(""Enter the length of the side:"")
a=int(input())
area=3.634*pow(a,2)
perimeter=(7*a)
print(""Area of the Heptagon = "",area)
print(""Perimeter of the Heptagon= "",perimeter)
"
2822,"
By using list comprehension, please write a program to print the list after removing delete numbers which are divisible by 5 and 7 in [12,24,35,70,88,120,155].
:","
li = [12,24,35,70,88,120,155]
li = [x for x in li if x%5!=0 and x%7!=0]
print li


"
2823,Python Program to Find Nth Node in the Inorder Traversal of a Tree,"class BinaryTree:
    def __init__(self, key=None):
        self.key = key
        self.left = None
        self.right = None
Â 
    def set_root(self, key):
        self.key = key
Â 
    def inorder_nth(self, n):
        return self.inorder_nth_helper(n, [])
Â 
    def inorder_nth_helper(self, n, inord):
        if self.left is not None:
            temp = self.left.inorder_nth_helper(n, inord)
            if temp is not None:
                return temp
        inord.append(self)
        if n == len(inord):
            return self
        if self.right is not None:
            temp = self.right.inorder_nth_helper(n, inord)
            if temp is not None:
                return temp
Â 
    def insert_left(self, new_node):
        self.left = new_node
Â 
    def insert_right(self, new_node):
        self.right = new_node
Â 
    def search(self, key):
        if self.key == key:
            return self
        if self.left is not None:
            temp =  self.left.search(key)
            if temp is not None:
                return temp
        if self.right is not None:
            temp =  self.right.search(key)
            return temp
        return None
Â 
Â 
btree = None
Â 
print('Menu (this assumes no duplicate keys)')
print('insert <data> at root')
print('insert <data> left of <data>')
print('insert <data> right of <data>')
print('inorder <index>')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
    if operation == 'insert':
        data = int(do[1])
        new_node = BinaryTree(data)
        suboperation = do[2].strip().lower() 
        if suboperation == 'at':
                btree = new_node
        else:
            position = do[4].strip().lower()
            key = int(position)
            ref_node = None
            if btree is not None:
                ref_node = btree.search(key)
            if ref_node is None:
                print('No such key.')
                continue
            if suboperation == 'left':
                ref_node.insert_left(new_node)
            elif suboperation == 'right':
                ref_node.insert_right(new_node)
Â 
    elif operation == 'inorder':
        if btree is not None:
            index = int(do[1].strip().lower())
            node = btree.inorder_nth(index)
            if node is not None:
                print('nth term of inorder traversal: {}'.format(node.key))
            else:
                print('index exceeds maximum possible index.')
        else:
            print('Tree is empty.')
Â 
    elif operation == 'quit':
        break"
2824,"A website requires the users to input username and password to register. Write a program to check the validity of password input by users.
Following are the criteria for checking the password:
1. At least 1 letter between [a-z]
2. At least 1 number between [0-9]
1. At least 1 letter between [A-Z]
3. At least 1 character from [$#@]
4. Minimum length of transaction password: 6
5. Maximum length of transaction password: 12
Your program should accept a sequence of comma separated passwords and will check them according to the above criteria. Passwords that match the criteria are to be printed, each separated by a comma.","Solutions:
import re
value = []
items=[x for x in raw_input().split(',')]
for p in items:
    if len(p)<6 or len(p)>12:
        continue
    else:
        pass
    if not re.search(""[a-z]"",p):
        continue
    elif not re.search(""[0-9]"",p):
        continue
    elif not re.search(""[A-Z]"",p):
        continue
    elif not re.search(""[$#@]"",p):
        continue
    elif re.search(""\s"",p):
        continue
    else:
        pass
    value.append(p)
print "","".join(value)
"
2825,Python Program to Accept Three Digits and Print all Possible Combinations from the Digits,"Â 
a=int(input(""Enter first number:""))
b=int(input(""Enter second number:""))
c=int(input(""Enter third number:""))
d=[]
d.append(a)
d.append(b)
d.append(c)
for i in range(0,3):
    for j in range(0,3):
        for k in range(0,3):
            if(i!=j&j!=k&k!=i):
                print(d[i],d[j],d[k])"
2826,"
Define a class Person and its two child classes: Male and Female. All classes have a method ""getGender"" which can print ""Male"" for Male class and ""Female"" for Female class.
:","
class Person(object):
    def getGender( self ):
        return ""Unknown""

class Male( Person ):
    def getGender( self ):
        return ""Male""

class Female( Person ):
    def getGender( self ):
        return ""Female""

aMale = Male()
aFemale= Female()
print aMale.getGender()
print aFemale.getGender()



"
2827,Python Program to Find all Numbers in a Range which are Perfect Squares and Sum of all Digits in the Number is Less than 10,"l=int(input(""Enter lower range: ""))
u=int(input(""Enter upper range: ""))
a=[]
a=[x for x in range(l,u+1) if (int(x**0.5))**2==x and sum(list(map(int,str(x))))<10]
print(a)"
2828,Program to convert kilometers into miles and meters,"kilo_meter=int(input(""Enter Kilo Meter: ""))

miles=kilo_meter/1.609;
meter=kilo_meter*1000;

print(""Kilo Meter to Miles:"",miles)
print(""Kilo Meter to Meter:"",meter)"
2829,Python Program to Find the Product of two Numbers Using Recursion,"def product(a,b):
    if(a<b):
        return product(b,a)
    elif(b!=0):
        return(a+product(a,b-1))
    else:
        return 0
a=int(input(""Enter first number: ""))
b=int(input(""Enter second number: ""))
print(""Product is: "",product(a,b))"
2830,Python Program to Implement Ternary Heap,"class TernaryHeap:
    def __init__(self):
        self.items = []
Â 
    def size(self):
        return len(self.items)
Â 
    def parent(self, i):
        return (i - 1)//3
Â 
    def left(self, i):
        return 3*i + 1
Â 
    def mid(self, i):
        return 3*i + 2
Â 
    def right(self, i):
        return 3*i + 3
Â 
    def get(self, i):
        return self.items[i]
Â 
    def get_max(self):
        if self.size() == 0:
            return None
        return self.items[0]
Â 
    def extract_max(self):
        if self.size() == 0:
            return None
        largest = self.get_max()
        self.items[0] = self.items[-1]
        del self.items[-1]
        self.max_heapify(0)
        return largest
Â 
    def max_heapify(self, i):
        l = self.left(i)
        r = self.right(i)
        m = self.mid(i)
        if (l <= self.size() - 1 and self.get(l) > self.get(i)):
            largest = l
        else:
            largest = i
        if (m <= self.size() - 1 and self.get(m) > self.get(largest)):
            largest = m
        if (r <= self.size() - 1 and self.get(r) > self.get(largest)):
            largest = r
        if (largest != i):
            self.swap(largest, i)
            self.max_heapify(largest)
Â 
    def swap(self, i, j):
        self.items[i], self.items[j] = self.items[j], self.items[i]
Â 
    def insert(self, key):
        index = self.size()
        self.items.append(key)
Â 
        while (index != 0):
            p = self.parent(index)
            if self.get(p) < self.get(index):
                self.swap(p, index)
            index = p
Â 
Â 
theap = TernaryHeap()
Â 
print('Menu (this assumes no duplicate keys)')
print('insert <data>')
print('max get')
print('max extract')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
    if operation == 'insert':
        data = int(do[1])
        theap.insert(data)
    elif operation == 'max':
        suboperation = do[1].strip().lower()
        if suboperation == 'get':
            print('Maximum value: {}'.format(theap.get_max()))
        elif suboperation == 'extract':
            print('Maximum value removed: {}'.format(theap.extract_max()))
Â 
    elif operation == 'quit':
        break"
2831,"
Write a program which accepts a sequence of words separated by whitespace as input to print the words composed of digits only.
","import re
s = raw_input()
print re.findall(""\d+"",s)


"
2832,Program to check whether a matrix is a scalar or not,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

# check except Diagonal all elements are 0 or not
# and check all diagonal elements are same or not
point=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i!=j and matrix[i][j]!=0:
            point=1
            break
        if i==j and matrix[i][j]!=matrix[i][j]:
            point = 1
            break

if point==1:
    print(""Given Matrix is not a Scaler Matrix."")
else:
    print(""Given Matrix is a Scaler Matrix."")"
2833,Python Program to Check whether a Tree is a Binary Search Tree,"class BinaryTree:
    def __init__(self, key=None):
        self.key = key
        self.left = None
        self.right = None
Â 
    def set_root(self, key):
        self.key = key
Â 
    def insert_left(self, new_node):
        self.left = new_node
Â 
    def insert_right(self, new_node):
        self.right = new_node
Â 
    def search(self, key):
        if self.key == key:
            return self
        if self.left is not None:
            temp =  self.left.search(key)
            if temp is not None:
                return temp
        if self.right is not None:
            temp =  self.right.search(key)
            return temp
        return None
Â 
    def is_bst_p(self):
        if self.left is not None:
            if self.key < self.left.key:
                return False
            elif not self.left.is_bst_p():
                return False
        if self.right is not None:
            if self.key > self.right.key:
                return False
            elif not self.right.is_bst_p():
                return False
        return True
Â 
Â 
btree = None
Â 
print('Menu (this assumes no duplicate keys)')
print('insert <data> at root')
print('insert <data> left of <data>')
print('insert <data> right of <data>')
print('bst')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
    if operation == 'insert':
        data = int(do[1])
        new_node = BinaryTree(data)
        suboperation = do[2].strip().lower() 
        if suboperation == 'at':
                btree = new_node
        else:
            position = do[4].strip().lower()
            key = int(position)
            ref_node = None
            if btree is not None:
                ref_node = btree.search(key)
            if ref_node is None:
                print('No such key.')
                continue
            if suboperation == 'left':
                ref_node.insert_left(new_node)
            elif suboperation == 'right':
                ref_node.insert_right(new_node)
Â 
    elif operation == 'bst':
        if btree is not None:
            if btree.is_bst_p():
                print('Tree is a binary search tree.')
            else:
                print('Tree is not a binary search tree.')
        else:
            print('Tree is empty.')
Â 
    elif operation == 'quit':
        break"
2834,Find out all palindrome numbers present within a given range.,"

'''Write
a Python programÂ to find out all palindrome numbers present within a
given range. orÂ Write a programÂ toÂ find out all
palindrome numbers present within a given range using Python '''


print(""Enter a range in numbers(num1-num2):"")
range1=int(input())
range2=int(input())
print(range1,"" to "",range2,"" palindrome numbers are "");
for i in range(range1,range2+1):
Â  Â num1=i
Â  Â num2=0
Â  Â while(num1!=0):
Â  Â  Â  rem=num1%10
Â  Â  Â  num1=int(num1/10)
Â  Â  Â  num2=num2*10+rem
Â  Â if(i==num2):
Â  Â  Â  print(i,end="" "")


"
2835,Reverse words in a given string,"str=input(""Enter Your String:"")sub_str=str.split("" "")print(""After reversing words in a given string is:"")for out in range(len(sub_str)-1,-1,-1):Â  Â  print(sub_str[out],end="" "")"
2836,Python Program to Check String is Palindrome using Stack,"class Stack:
    def __init__(self):
        self.items = []
Â 
    def is_empty(self):
        return self.items == []
Â 
    def push(self, data):
        self.items.append(data)
Â 
    def pop(self):
        return self.items.pop()
Â 
Â 
s = Stack()
text = input('Please enter the string: ')
Â 
for character in text:
    s.push(character)
Â 
reversed_text = ''
while not s.is_empty():
    reversed_text = reversed_text + s.pop()
Â 
if text == reversed_text:
    print('The string is a palindrome.')
else:
    print('The string is not a palindrome.')"
2837,Check if one array is a subset of another array or not ,"
arr=[]
arr2=[]
size = int(input(""Enter the size of the 1st array: ""))
size2 = int(input(""Enter the size of the 2nd array: ""))

print(""Enter the Element of the 1st array:"")
for i in range(0,size):
Â  Â  num = int(input())
Â  Â  arr.append(num)

print(""Enter the Element of the 2nd array:"")
for i in range(0,size2):
Â  Â  num2 = int(input())
Â  Â  arr2.append(num2)

count=0
for i in range(0, size):
Â  Â  for j in range(0, size2):
Â  Â  Â  Â  if arr[i] == arr2[j]:
Â  Â  Â  Â  Â  Â  count+=1

if count==size2:
Â  Â  print(""Array two is a subset of array one."")
else:
Â  Â  print(""Array two is not a subset of array one."")"
2838,Python Program to Find All Nodes Reachable from a Node using BFS in a Graph,"class Graph:
    def __init__(self):
        # dictionary containing keys that map to the corresponding vertex object
        self.vertices = {}
Â 
    def add_vertex(self, key):
        """"""Add a vertex with the given key to the graph.""""""
        vertex = Vertex(key)
        self.vertices[key] = vertex
Â 
    def get_vertex(self, key):
        """"""Return vertex object with the corresponding key.""""""
        return self.vertices[key]
Â 
    def __contains__(self, key):
        return key in self.vertices
Â 
    def add_edge(self, src_key, dest_key, weight=1):
        """"""Add edge from src_key to dest_key with given weight.""""""
        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)
Â 
    def does_edge_exist(self, src_key, dest_key):
        """"""Return True if there is an edge from src_key to dest_key.""""""
        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])
Â 
    def __iter__(self):
        return iter(self.vertices.values())
Â 
Â 
class Vertex:
    def __init__(self, key):
        self.key = key
        self.points_to = {}
Â 
    def get_key(self):
        """"""Return key corresponding to this vertex object.""""""
        return self.key
Â 
    def add_neighbour(self, dest, weight):
        """"""Make this vertex point to dest with given edge weight.""""""
        self.points_to[dest] = weight
Â 
    def get_neighbours(self):
        """"""Return all vertices pointed to by this vertex.""""""
        return self.points_to.keys()
Â 
    def get_weight(self, dest):
        """"""Get weight of edge from this vertex to dest.""""""
        return self.points_to[dest]
Â 
    def does_it_point_to(self, dest):
        """"""Return True if this vertex points to dest.""""""
        return dest in self.points_to
Â 
Â 
class Queue:
    def __init__(self):
        self.items = []
Â 
    def is_empty(self):
        return self.items == []
Â 
    def enqueue(self, data):
        self.items.append(data)
Â 
    def dequeue(self):
        return self.items.pop(0)
Â 
Â 
def find_all_reachable_nodes(vertex):
    """"""Return set containing all vertices reachable from vertex.""""""
    visited = set()
    q = Queue()
    q.enqueue(vertex)
    visited.add(vertex)
    while not q.is_empty():
        current = q.dequeue()
        for dest in current.get_neighbours():
            if dest not in visited:
                visited.add(dest)
                q.enqueue(dest)
    return visited
Â 
Â 
g = Graph()
print('Menu')
print('add vertex <key>')
print('add edge <src> <dest>')
print('reachable <vertex key>')
print('display')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0]
    if operation == 'add':
        suboperation = do[1]
        if suboperation == 'vertex':
            key = int(do[2])
            if key not in g:
                g.add_vertex(key)
            else:
                print('Vertex already exists.')
        elif suboperation == 'edge':
            src = int(do[2])
            dest = int(do[3])
            if src not in g:
                print('Vertex {} does not exist.'.format(src))
            elif dest not in g:
                print('Vertex {} does not exist.'.format(dest))
            else:
                if not g.does_edge_exist(src, dest):
                    g.add_edge(src, dest)
                else:
                    print('Edge already exists.')
Â 
    elif operation == 'reachable':
        key = int(do[1])
        vertex = g.get_vertex(key)
        reachable = find_all_reachable_nodes(vertex)
        print('All nodes reachable from {}:'.format(key),
              [v.get_key() for v in reachable])
Â 
    elif operation == 'display':
        print('Vertices: ', end='')
        for v in g:
            print(v.get_key(), end=' ')
        print()
Â 
        print('Edges: ')
        for v in g:
            for dest in v.get_neighbours():
                w = v.get_weight(dest)
                print('(src={}, dest={}, weight={}) '.format(v.get_key(),
                                                             dest.get_key(), w))
        print()
Â 
    elif operation == 'quit':
        break"
2839, Find the 2nd smallest element in the array,"
import sys
arr=[]
size = int(input(""Enter the size of the array: ""))
print(""Enter the Element of the array:"")
for i in range(0,size):
Â  Â  num = int(input())
Â  Â  arr.append(num)
min=sys.maxsize
sec_min=sys.maxsize
for j in range(0,size):
Â  Â  if (arr[j] <= min):
Â  Â  Â  Â  sec_min=min
Â  Â  Â  Â  min = arr[j]
Â  Â  elif(arr[i] <= sec_min):
Â  Â  Â  Â  sec_min = arr[j]
print(""The 2nd smallest element of array: "",sec_min)"
2840,Python Program to Search for an Element in the Linked List using Recursion,"class Node:
    def __init__(self, data):
       self.data = data
       self.next = None
Â 
class LinkedList:
    def __init__(self):
        self.head = None
        self.last_node = None
Â 
    def append(self, data):
        if self.last_node is None:
            self.head = Node(data)
            self.last_node = self.head
        else:
            self.last_node.next = Node(data)
            self.last_node = self.last_node.next
Â 
    def display(self):
        current = self.head
        while current is not None:
            print(current.data, end = ' ')
            current = current.next
Â 
    def find_index(self, key):
        return self.find_index_helper(key, 0, self.head)
Â 
    def find_index_helper(self, key, start, node):
        if node is None:
            return -1
Â 
        if node.data == key:
            return start
        else:
            return self.find_index_helper(key, start + 1, node.next)
Â 
a_llist = LinkedList()
for data in [3, 5, 0, 10, 7]:
    a_llist.append(data)
print('The linked list: ', end = '')
a_llist.display()
print()
Â 
key = int(input('What data item would you like to search for? '))
index = a_llist.find_index(key)
if index == -1:
    print(str(key) + ' was not found.')
else:
    print(str(key) + ' is at index ' + str(index) + '.')"
2841,Python Program to Add Corresponding Positioned Elements of 2 Linked Lists,"class Node:
    def __init__(self, data):
       self.data = data
       self.next = None
Â 
Â 
class LinkedList:
    def __init__(self):
        self.head = None
        self.last_node = None
Â 
    def append(self, data):
        if self.last_node is None:
            self.head = Node(data)
            self.last_node = self.head
        else:
            self.last_node.next = Node(data)
            self.last_node = self.last_node.next
Â 
    def display(self):
        current = self.head
        while current is not None:
            print(current.data, end = ' ')
            current = current.next
Â 
Â 
def add_linked_lists(llist1, llist2):
    sum_llist = LinkedList()
    current1 = llist1.head
    current2 = llist2.head
    while (current1 and current2):
        sum = current1.data + current2.data
        sum_llist.append(sum)
        current1 = current1.next
        current2 = current2.next
    if current1 is None:
        while current2:
            sum_llist.append(current2.data)
            current2 = current2.next
    else:
        while current1:
            sum_llist.append(current1.data)
            current1 = current1.next
    return sum_llist
Â 
Â 
Â 
llist1 = LinkedList()
llist2 = LinkedList()
Â 
data_list = input('Please enter the elements in the first linked list: ').split()
for data in data_list:
    llist1.append(int(data))
Â 
data_list = input('Please enter the elements in the second linked list: ').split()
for data in data_list:
    llist2.append(int(data))
Â 
sum_llist = add_linked_lists(llist1, llist2)
Â 
print('The sum linked list: ', end = '')
sum_llist.display()"
2842,Python Program to Append the Contents of One File to Another File,"name1 = input(""Enter file to be read from: "")
name2 = input(""Enter file to be appended to: "")
fin = open(name1, ""r"")
data2 = fin.read()
fin.close()
fout = open(name2, ""a"")
fout.write(data2)
fout.close()"
2843,"
Please write a program which accepts a string from console and print the characters that have even indexes.
","
s=raw_input()
s = s[::2]
print s
"
2844,Print odd numbers in given range using recursion,"def odd(num1,num2):Â  Â  if num1>num2:Â  Â  Â  Â  returnÂ  Â  print(num1,end="" "")Â  Â  return odd(num1+2,num2)num1=1print(""Enter your Limit:"")num2=int(input())print(""All odd number given range are:"")odd(num1,num2)"
2845,Bubble Sort Program in Python | Java | C | C++,"
size=int(input(""Enter the size of the array:""));
arr=[]
print(""Enter the element of the array:"");
for i in range(0,size):
Â  Â  num = int(input())
Â  Â  arr.append(num)

print(""Before Sorting Array Element are: "",arr)

for out in range(size-1,0,-1):
Â  Â  for inn in range(out):
Â  Â  Â  Â  if arr[inn] > arr[inn +1]:
Â  Â  Â  Â  Â  Â  temp=arr[inn]
Â  Â  Â  Â  Â  Â  arr[inn]=arr[inn +1]
Â  Â  Â  Â  Â  Â  arr[inn +1]=temp

print(""\nAfter Sorting Array Element are: "",arr)"
2846,Write a program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized.,"lines = []
while True:
    s = raw_input()
    if s:
        lines.append(s.upper())
    else:
        break;

for sentence in lines:
    print sentence
"
2847,Python Program to Implement Cocktail Shaker Sort,"def cocktail_shaker_sort(alist):
    def swap(i, j):
        alist[i], alist[j] = alist[j], alist[i]
Â 
    upper = len(alist) - 1
    lower = 0
Â 
    no_swap = False
    while (not no_swap and upper - lower > 1):
        no_swap = True
        for j in range(lower, upper):
            if alist[j + 1] < alist[j]:
                swap(j + 1, j)
                no_swap = False
        upper = upper - 1
Â 
        for j in range(upper, lower, -1):
            if alist[j - 1] > alist[j]:
                swap(j - 1, j)
                no_swap = False
        lower = lower + 1
Â 
Â 
alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
cocktail_shaker_sort(alist)
print('Sorted list: ', end='')
print(alist)"
2848,Program to find addition of two matrices ,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]
# Taking input of the 2nd matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])

# Compute Addition of two matrices
sum_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        sum_matrix[i][j]=matrix[i][j]+matrix1[i][j]

# display the sum of two matrices
print(""Sum of the two Matrices is:"")
for m in sum_matrix:
    print(m)"
2849,Find mean and median of unsorted array,"def Find_mean(arr,size):Â  Â  sum=0Â  Â  for i in range(0, size):Â  Â  Â  Â  sum+=arr[i]Â  Â  mean=sum/sizeÂ  Â  print(""Mean = "",mean)def Find_median(arr,size):Â  Â  arr.sort()Â  Â  if size%2==1:Â  Â  Â  Â  median=arr[size//2]Â  Â  Â  Â  print(""\nMedian= "",median)Â  Â  else:Â  Â  Â  Â  median = (arr[size // 2] + (arr[(size // 2) - 1])) / 2.0Â  Â  Â  Â  print(""\nMedian= "", median)arr=[]size = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,size):Â  Â  num = int(input())Â  Â  arr.append(num)Find_mean(arr,size)Find_median(arr,size)"
2850,Python Program that Displays which Letters are in the First String but not in the Second,"s1=raw_input(""Enter first string:"")
s2=raw_input(""Enter second string:"")
a=list(set(s1)-set(s2))
print(""The letters are:"")
for i in a:
    print(i)"
2851,Python Program to Implement Binary Search with Recursion,"def binary_search(alist, start, end, key):
    """"""Search key in alist[start... end - 1].""""""
    if not start < end:
        return -1
Â 
    mid = (start + end)//2
    if alist[mid] < key:
        return binary_search(alist, mid + 1, end, key)
    elif alist[mid] > key:
        return binary_search(alist, start, mid, key)
    else:
        return mid
Â 
Â 
alist = input('Enter the sorted list of numbers: ')
alist = alist.split()
alist = [int(x) for x in alist]
key = int(input('The number to search for: '))
Â 
index = binary_search(alist, 0, len(alist), key)
if index < 0:
    print('{} was not found.'.format(key))
else:
    print('{} was found at index {}.'.format(key, index))"
2852,Python Program to Detect the Cycle in a Linked List,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
Â 
Â 
class LinkedList:
    def __init__(self):
        self.head = None
        self.last_node = None
Â 
    def append(self, data):
        if self.last_node is None:
            self.head = Node(data)
            self.last_node = self.head
        else:
            self.last_node.next = Node(data)
            self.last_node = self.last_node.next
Â 
    def get_node(self, index):
        current = self.head
        for i in range(index):
            current = current.next
            if current is None:
                return None
        return current
Â 
Â 
def has_cycle(llist):
    slow = llist.head
    fast = llist.head
    while (fast != None and fast.next != None):
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            return True
    return False
Â 
Â 
a_llist = LinkedList()
Â 
data_list = input('Please enter the elements in the linked list: ').split()
for data in data_list:
    a_llist.append(int(data))
Â 
length = len(data_list)
if length != 0:
    values = '0-' + str(length - 1)
    last_ptr = input('Enter the index [' + values + '] of the node'
                     ' to which you want the last node to point'
                     ' (enter nothing to make it point to None): ').strip()
    if last_ptr == '':
        last_ptr = None
    else:
        last_ptr = a_llist.get_node(int(last_ptr))
        a_llist.last_node.next = last_ptr
Â 
if has_cycle(a_llist):
    print('The linked list has a cycle.')
else:
    print('The linked list does not have a cycle.')"
2853,"
Please write a program to compress and decompress the string ""hello world!hello world!hello world!hello world!"".


:","
import zlib
s = 'hello world!hello world!hello world!hello world!'
t = zlib.compress(s)
print t
print zlib.decompress(t)

"
2854,Python Program to Interchange two Elements of the List without touching the Key Field,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
Â 
Â 
class LinkedList:
    def __init__(self):
        self.head = None
        self.last_node = None
Â 
    def append(self, data):
        if self.last_node is None:
            self.head = Node(data)
            self.last_node = self.head
        else:
            self.last_node.next = Node(data)
            self.last_node = self.last_node.next
Â 
    def display(self):
        current = self.head
        while current:
            print(current.data, end = ' ')
            current = current.next
Â 
    def get_node(self, index):
        current = self.head
        for i in range(index):
            if current is None:
                return None
            current = current.next
        return current
Â 
    def get_prev_node(self, ref_node):
        current = self.head
        while (current and current.next != ref_node):
            current = current.next
        return current
Â 
Â 
def interchange(llist, n, m):
    node1 = llist.get_node(n)
    node2 = llist.get_node(m)
    prev_node1 = llist.get_prev_node(node1)
    prev_node2 = llist.get_prev_node(node2)
    if prev_node1 is not None:
        prev_node1.next = node2
    else:
        llist.head = node2
    if prev_node2 is not None:
        prev_node2.next = node1
    else:
        llist.head = node1
    temp = node2.next
    node2.next = node1.next
    node1.next = temp
Â 
Â 
a_llist = LinkedList()
Â 
data_list = input('Please enter the elements in the linked list: ').split()
for data in data_list:
    a_llist.append(int(data))
Â 
ans = input('Please enter the two indices of the two elements that'
            ' you want to exchange: ').split()
n = int(ans[0])
m = int(ans[1])
Â 
interchange(a_llist, n, m)
Â 
print('The new list: ')
a_llist.display()"
2855,Write a program to print the pattern,"

print(""Enter the row and column size:"")

row_size=int(input())
for out in range(row_size,0,-1):
Â  Â  for i in range(row_size,0,-1):
Â  Â  Â  Â  print(i,end="""")

Â  Â  print(""\r"")


"
2856,Print Strong numbers in a given range(1 to n),"
print(""Enter a range:"")
range1=int(input())
range2=int(input())
print(""Strong numbers between "",range1,"" and "",range2,"" are: "")
for i in range(range1,range2+1):
Â  Â  num2=i
Â  Â  num1=i
Â  Â  sum=0
Â  Â  while(num1!=0):
Â  Â  Â  Â  fact=1
Â  Â  Â  Â  rem=num1%10
Â  Â  Â  Â  num1=int(num1/10)
Â  Â  Â  Â  for j in range(1,rem+1):
Â  Â  Â  Â  Â  Â  fact=fact*j
Â  Â  Â  Â  sum=sum+fact
Â  Â  if sum==num2:
print(i,end="" "")Â 
"
2857,Program to convert Hexadecimal To Octal,"
import math
hex=input(""Enter Hexadecimal Number:"")
value=0
decimal=0
j=len(hex)
j-=1
for i in range(0,len(hex)):
Â  Â  if hex[i]>='0' and hex[i]<='9' :
Â  Â  Â  Â  value=(int)(hex[i])
Â  Â  if hex[i]=='A' or hex[i]=='a':
Â  Â  Â  Â  value=10
Â  Â  if hex[i] == 'B' or hex[i] == 'b':
Â  Â  Â  Â  value=11
Â  Â  if hex[i] == 'C' or hex[i] == 'c':
Â  Â  Â  Â  value=12
Â  Â  if hex[i] == 'D' or hex[i] == 'd':
Â  Â  Â  Â  value=13
Â  Â  if hex[i] == 'E' or hex[i] == 'e':
Â  Â  Â  Â  value=14
Â  Â  if hex[i] == 'F' or hex[i] == 'f':
Â  Â  Â  Â  value=15
Â  Â  decimal=decimal+(int)(value*math.pow(16,j))
Â  Â  j-=1
sem=1
octal=0
while(decimal !=0):
Â  Â  Â  octal=octal+(decimal%8)*sem
Â  Â  Â  decimal=decimal//8
Â  Â  Â  sem=int(sem*10)
print(""Octal Number is:"",octal)"
2858,Count the number of odd and even digits,"print(""Enter the number:"")
num=int(input())
odd=0
even=0
while(num!=0):
Â  Â  rem=num%10
Â  Â  if(rem%2==1):
Â  Â  Â  Â  odd+=1
Â  Â  else:
Â  Â  Â  Â  even+=1
Â  Â  num//=10
print(""Number of even digits = "",even)
print(""Number of odd digits = "",odd)Â "
2859,Python Program to Solve Interval Scheduling Problem using Greedy Algorithm,"def interval_scheduling(stimes, ftimes):
    """"""Return largest set of mutually compatible activities.
Â 
    This will return a maximum-set subset of activities (numbered from 0 to n -
    1) that are mutually compatible. Two activities are mutually compatible if
    the start time of one activity is not less then the finish time of the other.
Â 
    stimes[i] is the start time of activity i.
    ftimes[i] is the finish time of activity i.
    """"""
    # index = [0, 1, 2, ..., n - 1] for n items
    index = list(range(len(stimes)))
    # sort according to finish times
    index.sort(key=lambda i: ftimes[i])
Â 
    maximal_set = set()
    prev_finish_time = 0
    for i in index:
        if stimes[i] >= prev_finish_time:
            maximal_set.add(i)
            prev_finish_time = ftimes[i]
Â 
    return maximal_set
Â 
Â 
n = int(input('Enter number of activities: '))
stimes = input('Enter the start time of the {} activities in order: '
              .format(n)).split()
stimes = [int(st) for st in stimes]
ftimes = input('Enter the finish times of the {} activities in order: '
               .format(n)).split()
ftimes = [int(ft) for ft in ftimes]
Â 
ans = interval_scheduling(stimes, ftimes)
print('A maximum-size subset of activities that are mutually compatible is', ans)"
2860,Python Program to Print all the Prime Numbers within a Given Range,"r=int(input(""Enter upper limit: ""))
for a in range(2,r+1):
    k=0
    for i in range(2,a//2+1):
        if(a%i==0):
            k=k+1
    if(k<=0):
        print(a)"
2861,Find the maximum element in the matrix,"import sys
# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

#compute the maximum element of the given 2d array
max=-sys.maxsize-1
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if matrix[i][j]>=max:
            max=matrix[i][j]

# Display the largest element of the given matrix
print(""The Maximum element of the Given 2d array is: "",max)"
2862,Find the index of an element in an array,"arr=[]temp=0pos=0index=0size = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,size):Â  Â  num = int(input())Â  Â  arr.append(num)print(""Enter the search element:"")ele=int(input())print(""Array elements are:"")for i in range(0,size):Â  Â  print(arr[i],end="" "")for i in range(0,size):Â  Â  if arr[i] == ele:Â  Â  Â  Â  Â  Â  temp = 1Â  Â  Â  Â  Â  Â  index=iif temp==1:Â  Â  print(""\nIndex of Search Element "",ele,"" is "",index)else:Â  Â  print(""\nElement not found...."")"
2863, Program to print the Half Pyramid Number Pattern,"
row_size=int(input(""Enter the row size:""))
for out in range(row_size+1):
Â  Â  for i in range(out):
Â  Â  Â  Â  print(out,end="""")
Â  Â  print(""\r"")
"
2864,Program to check whether a matrix is symmetric or not,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

if row_size!=col_size:
    print(""Given Matrix is not a Square Matrix."")
else:
    #compute the transpose matrix
    tran_matrix = [[0 for i in range(col_size)] for i in range(row_size)]
    for i in range(0, row_size):
        for j in range(0, col_size):
            tran_matrix[i][j] = matrix[j][i]
# check given matrix elements and transpose
# matrix elements are same or not.

flag=0
for i in range(0, row_size):
    for j in range(0, col_size):
        if matrix[i][j] != tran_matrix[i][j]:
            flag=1
            break

if flag==1:
    print(""Given Matrix is not a symmetric Matrix."")
else:
    print(""Given Matrix is a symmetric Matrix."")"
2865,Python Program to Implement Quicksort,"def quicksort(alist, start, end):
    '''Sorts the list from indexes start to end - 1 inclusive.'''
    if end - start > 1:
        p = partition(alist, start, end)
        quicksort(alist, start, p)
        quicksort(alist, p + 1, end)
Â 
Â 
def partition(alist, start, end):
    pivot = alist[start]
    i = start + 1
    j = end - 1
Â 
    while True:
        while (i <= j and alist[i] <= pivot):
            i = i + 1
        while (i <= j and alist[j] >= pivot):
            j = j - 1
Â 
        if i <= j:
            alist[i], alist[j] = alist[j], alist[i]
        else:
            alist[start], alist[j] = alist[j], alist[start]
            return j
Â 
Â 
alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
quicksort(alist, 0, len(alist))
print('Sorted list: ', end='')
print(alist)"
2866,Python Program to Count the Frequency of Words Appearing in a String Using a Dictionary,"test_string=raw_input(""Enter string:"")
l=[]
l=test_string.split()
wordfreq=[l.count(p) for p in l]
print(dict(zip(l,wordfreq)))"
2867,Program to Find the sum of a lower triangular matrix,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

#Calculate sum of lower triangular matrix element
sum=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i<j:
            sum += matrix[i][j]

# display the sum of a lower triangular matrix element
print(""Sum of Lower Triangular Matrix Elements is: "",sum)"
2868,Program to check whether the given number is even or odd,"num=int(input(""Enter a number:""))
if num%2 == 0:
Â  Â  Â print(""It is Even"")
else:
Â  Â  print(""It is Odd"")"
2869,Python Program to Create a Class which Performs Basic Calculator Operations,"class cal():
    def __init__(self,a,b):
        self.a=a
        self.b=b
    def add(self):
        return self.a+self.b
    def mul(self):
        return self.a*self.b
    def div(self):
        return self.a/self.b
    def sub(self):
        return self.a-self.b
a=int(input(""Enter first number: ""))
b=int(input(""Enter second number: ""))
obj=cal(a,b)
choice=1
while choice!=0:
    print(""0. Exit"")
    print(""1. Add"")
    print(""2. Subtraction"")
    print(""3. Multiplication"")
    print(""4. Division"")
    choice=int(input(""Enter choice: ""))
    if choice==1:
        print(""Result: "",obj.add())
    elif choice==2:
        print(""Result: "",obj.sub())
    elif choice==3:
        print(""Result: "",obj.mul())
    elif choice==4:
        print(""Result: "",round(obj.div(),2))
    elif choice==0:
        print(""Exiting!"")
    else:
        print(""Invalid choice!!"")
Â 
Â 
print()"
2870, Program to Print Cross Sign (â•³ ) Star Pattern,"row_size=int(input(""Enter the row size:""))print_control_x=row_size//2+1for out in range(1,row_size+1):Â  Â  for inn in range(1,row_size+1):Â  Â  Â  Â  if inn==out or inn+out==row_size+1:Â  Â  Â  Â  Â  Â  print(""*"",end="""")Â  Â  Â  Â  else:Â  Â  Â  Â  Â  Â  print("" "", end="""")Â  Â  print(""\r"")"
2871,Find out all Spy numbers present within a given range,"
print(""Enter a range:"")
range1=int(input())
range2=int(input())
print(""Spy numbers between "",range1,"" and "",range2,"" are: "")
for i in range(range1,range2+1):
Â  Â  num=i
Â  Â  sum = 0
Â  Â  mult = 1
Â  Â  while num != 0:
Â  Â  Â  Â  rem = num % 10
Â  Â  Â  Â  sum += rem
Â  Â  Â  Â  mult *= rem
Â  Â  Â  Â  num //= 10

Â  Â  if sum == mult:
Â  Â  Â  Â  print(i,end="" "")"
2872,Python Program to Implement Bubble Sort ,"def bubble_sort(alist):
    for i in range(len(alist) - 1, 0, -1):
        no_swap = True
        for j in range(0, i):
            if alist[j + 1] < alist[j]:
                alist[j], alist[j + 1] = alist[j + 1], alist[j]
                no_swap = False
        if no_swap:
            return
Â 
Â 
alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
bubble_sort(alist)
print('Sorted list: ', end='')
print(alist)"
2873,Python Program to Construct a Binary Search Tree and perform deletion and inorder traversal,"class BSTNode:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
        self.parent = None
Â 
    def insert(self, node):
        if self.key > node.key:
            if self.left is None:
                self.left = node
                node.parent = self
            else:
                self.left.insert(node)
        elif self.key < node.key:
            if self.right is None:
                self.right = node
                node.parent = self
            else:
                self.right.insert(node)
Â 
    def inorder(self):
        if self.left is not None:
            self.left.inorder()
        print(self.key, end=' ')
        if self.right is not None:
            self.right.inorder()
Â 
    def replace_node_of_parent(self, new_node):
        if self.parent is not None:
            if new_node is not None:
                new_node.parent = self.parent
            if self.parent.left == self:
                self.parent.left = new_node
            elif self.parent.right == self:
                self.parent.right = new_node
        else:
            self.key = new_node.key
            self.left = new_node.left
            self.right = new_node.right
            if new_node.left is not None:
                new_node.left.parent = self
            if new_node.right is not None:
                new_node.right.parent = self
Â 
    def find_min(self):
        current = self
        while current.left is not None:
            current = current.left
        return current
Â 
    def remove(self):
        if (self.left is not None and self.right is not None):
            successor = self.right.find_min()
            self.key = successor.key
            successor.remove()
        elif self.left is not None:
            self.replace_node_of_parent(self.left)
        elif self.right is not None:
            self.replace_node_of_parent(self.right)
        else:
            self.replace_node_of_parent(None)
Â 
    def search(self, key):
        if self.key > key:
            if self.left is not None:
                return self.left.search(key)
            else:
                return None
        elif self.key < key:
            if self.right is not None:
                return self.right.search(key)
            else:
                return None
        return self
Â 
Â 
class BSTree:
    def __init__(self):
        self.root = None
Â 
    def inorder(self):
        if self.root is not None:
            self.root.inorder()
Â 
    def add(self, key):
        new_node = BSTNode(key)
        if self.root is None:
            self.root = new_node
        else:
            self.root.insert(new_node)
Â 
    def remove(self, key):
        to_remove = self.search(key)
        if (self.root == to_remove
            and self.root.left is None and self.root.right is None):
            self.root = None
        else:
            to_remove.remove()
Â 
    def search(self, key):
        if self.root is not None:
            return self.root.search(key)
Â 
Â 
bstree = BSTree()
Â 
print('Menu (this assumes no duplicate keys)')
print('add <key>')
print('remove <key>')
print('inorder')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
    if operation == 'add':
        key = int(do[1])
        bstree.add(key)
    elif operation == 'remove':
        key = int(do[1])
        bstree.remove(key)
    elif operation == 'inorder':
        print('Inorder traversal: ', end='')
        bstree.inorder()
        print()
    elif operation == 'quit':
        break"
2874,Program to print a to z in c using ascii value,"
print(""Printing a-z using ASCII"")
for i in range(97,123):
Â  Â  print(chr(i),end="" "")"
2875,Python Program to Implement Tower of Hanoi,"def hanoi(disks, source, auxiliary, target):
    if disks == 1:
        print('Move disk 1 from peg {} to peg {}.'.format(source, target))
        return
Â 
    hanoi(disks - 1, source, target, auxiliary)
    print('Move disk {} from peg {} to peg {}.'.format(disks, source, target))
    hanoi(disks - 1, auxiliary, source, target)
Â 
Â 
disks = int(input('Enter number of disks: '))
hanoi(disks, 'A', 'B', 'C')"
2876,Division Two Numbers Operator without using Division(/) operator,"
num1=int(input(""Enter first number:""))
num2=int(input(""EnterÂ  second number:""))
div=0
while num1>=num2:
Â  Â  Â  Â  num1=num1-num2
Â  Â  Â  Â  div+=1
print(""Division of two number is "",div)
"
2877,Python Program to Convert a given Singly Linked List to a Circular List,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
Â 
Â 
class LinkedList:
    def __init__(self):
        self.head = None
        self.last_node = None
Â 
    def append(self, data):
        if self.last_node is None:
            self.head = Node(data)
            self.last_node = self.head
        else:
            self.last_node.next = Node(data)
            self.last_node = self.last_node.next
Â 
Â 
def convert_to_circular(llist):
    if llist.last_node:
        llist.last_node.next = llist.head
Â 
Â 
def print_last_node_points_to(llist):
    last = llist.last_node
    if last is None:
        print('List is empty.')
        return
    if last.next is None:
        print('Last node points to None.')
    else:
        print('Last node points to element with data {}.'.format(last.next.data))
Â 
Â 
a_llist = LinkedList()
Â 
data_list = input('Please enter the elements in the linked list: ').split()
for data in data_list:
    a_llist.append(int(data))
Â 
print_last_node_points_to(a_llist)
Â 
print('Converting linked list to a circular linked list...')
convert_to_circular(a_llist)
Â 
print_last_node_points_to(a_llist)"
2878,Python Program to Find the Sum of Digits in a Number,"Â 
n=int(input(""Enter a number:""))
tot=0
while(n>0):
    dig=n%10
    tot=tot+dig
    n=n//10
print(""The total sum of digits is:"",tot)"
2879,Python Program that Reads a Text File and Counts the Number of Times a Certain Letter Appears in the Text File,"fname = input(""Enter file name: "")
l=input(""Enter letter to be searched:"")
k = 0
Â 
with open(fname, 'r') as f:
    for line in f:
        words = line.split()
        for i in words:
            for letter in i:
                if(letter==l):
                    k=k+1
print(""Occurrences of the letter:"")
print(k)"
2880,Write a program to calculate Amicable pairs,"

'''Write a Python
programÂ toÂ Calculate Amicable pairs. orÂ Write a
programÂ toÂ Calculate Amicable pairs using Python '''

print(""Enter the two number:"")
num1=int(input())
num2=int(input())
sum1=0;
sum2=0;
for i in range(1,num1):
Â  Â  if num1%i==0:
Â  Â  Â  Â  sum1+=i
for i in range(1,num2):
Â  Â  if num2%i==0:
Â  Â  Â  Â  sum2+=i
if sum1==num2:
Â  Â  if sum2==num1:
Â  Â  Â  Â  print(""This is an amicable pair."")
else:
Â  Â  Â  Â print(""This is not an amicable pair."")
"
2881,Python Program to Display all the Nodes in a Linked List using Recursion,"class Node:
    def __init__(self, data):
       self.data = data
       self.next = None
Â 
class LinkedList:
    def __init__(self):
        self.head = None
        self.last_node = None
Â 
    def append(self, data):
        if self.last_node is None:
            self.head = Node(data)
            self.last_node = self.head
        else:
            self.last_node.next = Node(data)
            self.last_node = self.last_node.next
Â 
    def display(self):
        self.display_helper(self.head)
Â 
    def display_helper(self, current):
        if current is None:
            return
Â 
        print(current.data, end = ' ')
        self.display_helper(current.next)
Â 
a_llist = LinkedList()
n = int(input('How many elements would you like to add? '))
for i in range(n):
    data = int(input('Enter data item: '))
    a_llist.append(data)
Â 
print('The linked list: ', end = '')
a_llist.display()"
2882,Sort the elements of an array in ascending order,"
arr=[]
size = int(input(""Enter the size of the array: ""))
print(""Enter the Element of the array:"")
for i in range(0,size):
Â  Â  num = int(input())
Â  Â  arr.append(num)
print(""Before sorting array elements are:"")
for i in range(0,size):
Â  Â  print(arr[i],end="" "")
for i in range(0,size):
Â  Â  for j in range(i+1, size):
Â  Â  Â  Â  if arr[i] >= arr[j]:
Â  Â  Â  Â  Â  Â  temp = arr[i]
Â  Â  Â  Â  Â  Â  arr[i] = arr[j]
Â  Â  Â  Â  Â  Â  arr[j] = temp

print(""\nAfter sorting array elements are:"")
for i in range(0, size):
Â  Â  Â  Â  print(arr[i],end="" "")"
2883,Print array in reverse order using recursion,"def ReverseArray(arr,n):Â  Â  if(n>0):Â  Â  Â  Â  i=n-1Â  Â  Â  Â  print(arr[i], end="" "")Â  Â  Â  Â  ReverseArray(arr, i)arr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):Â  Â  num = int(input())Â  Â  arr.append(num)print(""After reversing Array Element Are:"")ReverseArray(arr,n)"
2884, Read a String with spaces,"
str=input(""Enter the String:"")
print(""Your Enter String is:"", str)"
2885,Python Program to Create a Mirror Copy of a Tree and Display using BFS Traversal,"class BinaryTree:
    def __init__(self, key=None):
        self.key = key
        self.left = None
        self.right = None
Â 
    def set_root(self, key):
        self.key = key
Â 
    def insert_left(self, new_node):
        self.left = new_node
Â 
    def insert_right(self, new_node):
        self.right = new_node
Â 
    def search(self, key):
        if self.key == key:
            return self
        if self.left is not None:
            temp =  self.left.search(key)
            if temp is not None:
                return temp
        if self.right is not None:
            temp =  self.right.search(key)
            return temp
        return None
Â 
    def mirror_copy(self):
        mirror = BinaryTree(self.key)
        if self.right is not None:
            mirror.left = self.right.mirror_copy()
        if self.left is not None:
            mirror.right = self.left.mirror_copy()
        return mirror
Â 
    def bfs(self):
        queue = [self]
        while queue != []:
            popped = queue.pop(0)
            if popped.left is not None:
                queue.append(popped.left)
            if popped.right is not None:
                queue.append(popped.right)
            print(popped.key, end=' ')
Â 
Â 
btree = None
Â 
print('Menu (this assumes no duplicate keys)')
print('insert <data> at root')
print('insert <data> left of <data>')
print('insert <data> right of <data>')
print('mirror')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
    if operation == 'insert':
        data = int(do[1])
        new_node = BinaryTree(data)
        suboperation = do[2].strip().lower() 
        if suboperation == 'at':
                btree = new_node
        else:
            position = do[4].strip().lower()
            key = int(position)
            ref_node = None
            if btree is not None:
                ref_node = btree.search(key)
            if ref_node is None:
                print('No such key.')
                continue
            if suboperation == 'left':
                ref_node.insert_left(new_node)
            elif suboperation == 'right':
                ref_node.insert_right(new_node)
Â 
    elif operation == 'mirror':
        if btree is not None:
            print('Creating mirror copy...')
            mirror = btree.mirror_copy()
            print('BFS traversal of original tree: ')
            btree.bfs()
            print()
            print('BFS traversal of mirror: ')
            mirror.bfs()
            print()
Â 
    elif operation == 'quit':
        break"
2886,Program to Find sum of N Natural Numbers,"#Take input number of natural numberÂ 
n=int(input(""Enter the N value:""))#Calculate the sum of the n natural number
sum=0
for i in range(1,n+1):
Â  Â sum=sum+i#display theÂ sum of the n natural number
print(""The sum of n natural numbers is "", sum)Â 
"
2887,"
Please write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.

:","
import math
def bin_search(li, element):
    bottom = 0
    top = len(li)-1
    index = -1
    while top>=bottom and index==-1:
        mid = int(math.floor((top+bottom)/2.0))
        if li[mid]==element:
            index = mid
        elif li[mid]>element:
            top = mid-1
        else:
            bottom = mid+1

    return index

li=[2,5,7,9,11,17,222]
print bin_search(li,11)
print bin_search(li,12)




"
2888,Write a program to swap three numbers ,"num1=int(input(""Enter 1st number:""))
num2=int(input(""Enter 2nd number:""))
num3=int(input(""Enter 3rd number:""))

num1=num1+num2+num3
num2=num1-num2-num3
num3=num1-num2-num3
num1=num1-num2-num3

print(""***After swapping***"")
print(""Number 1: "",num1)
print(""Number 2: "",num2)
print(""Number 3: "",num3)"
2889,Python Program to Check if a Number is a Prime Number,"a=int(input(""Enter number: ""))
k=0
for i in range(2,a//2+1):
    if(a%i==0):
        k=k+1
if(k<=0):
    print(""Number is prime"")
else:
    print(""Number isn't prime"")"
2890, Program to Print Cross Sign (â•³ ) Number Pattern,"row_size=int(input(""Enter the row size:""))print_control_x=row_size//2+1for out in range(1,row_size+1):Â  Â  for inn in range(1,row_size+1):Â  Â  Â  Â  if inn==out or inn+out==row_size+1:Â  Â  Â  Â  Â  Â  print(out,end="""")Â  Â  Â  Â  else:Â  Â  Â  Â  Â  Â  print("" "", end="""")Â  Â  print(""\r"")"
2891,Python Program to Implement Stack Using Two Queues,"class Stack:
    def __init__(self):
        self.queue1 = Queue()
        self.queue2 = Queue()
Â 
    def is_empty(self):
        return self.queue2.is_empty()
Â 
    def push(self, data):
        self.queue1.enqueue(data)
        while not self.queue2.is_empty():
            x = self.queue2.dequeue()
            self.queue1.enqueue(x)
        self.queue1, self.queue2 = self.queue2, self.queue1
Â 
    def pop(self):
        return self.queue2.dequeue()
Â 
class Queue:
    def __init__(self):
        self.items = []
Â 
    def is_empty(self):
        return self.items == []
Â 
    def enqueue(self, data):
        self.items.append(data)
Â 
    def dequeue(self):
        return self.items.pop(0)
Â 
Â 
s = Stack()
Â 
print('Menu')
print('push <value>')
print('pop')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
    if operation == 'push':
        s.push(int(do[1]))
    elif operation == 'pop':
        if s.is_empty():
            print('Stack is empty.')
        else:
            print('Popped value: ', s.pop())
    elif operation == 'quit':
        break"
2892,Python Program to Print Middle most Node of a Linked List,"class Node:
    def __init__(self, data):
       self.data = data
       self.next = None
Â 
Â 
class LinkedList:
    def __init__(self):
        self.head = None
        self.last_node = None
Â 
    def append(self, data):
        if self.last_node is None:
            self.head = Node(data)
            self.last_node = self.head
        else:
            self.last_node.next = Node(data)
            self.last_node = self.last_node.next
Â 
Â 
def print_middle(llist):
    current = llist.head
    length = 0
    while current:
        current = current.next
        length = length + 1
Â 
    current = llist.head
    for i in range((length - 1)//2):
        current = current.next
Â 
    if current:
        if length % 2 == 0:
            print('The two middle elements are {} and {}.'
                .format(current.data, current.next.data))
        else:
            print('The middle element is {}.'.format(current.data))
    else:
        print('The list is empty.')
Â 
Â 
a_llist = LinkedList()
Â 
data_list = input('Please enter the elements in the linked list: ').split()
for data in data_list:
    a_llist.append(int(data))
Â 
print_middle(a_llist)"
2893,"
By using list comprehension, please write a program to print the list after removing the value 24 in [12,24,35,24,88,120,155].
:","
li = [12,24,35,24,88,120,155]
li = [x for x in li if x!=24]
print li


"
2894,Python Program to Print the Alternate Nodes in a Linked List without using Recursion,"class Node:
    def __init__(self, data):
       self.data = data
       self.next = None
Â 
class LinkedList:
    def __init__(self):
        self.head = None
        self.last_node = None
Â 
    def append(self, data):
        if self.last_node is None:
            self.head = Node(data)
            self.last_node = self.head
        else:
            self.last_node.next = Node(data)
            self.last_node = self.last_node.next
Â 
    def alternate(self):
        current = self.head
        while current:
            print(current.data, end = ' ')
            if current.next is not None:
                current = current.next.next
            else:
                break
Â 
a_llist = LinkedList()
data_list = input('Please enter the elements in the linked list: ').split()
for data in data_list:
    a_llist.append(int(data))
Â 
print('The alternate nodes of the linked list: ', end = '')
a_llist.alternate()"
2895,"Define a class named Circle which can be constructed by a radius. The Circle class has a method which can compute the area. 
:","
class Circle(object):
    def __init__(self, r):
        self.radius = r

    def area(self):
        return self.radius**2*3.14

aCircle = Circle(2)
print aCircle.area()






"
2896,Count number of the words in a String,"
str1=input(""Enter the String:"")
str2=len(str1.split())
print(""Word present in a string are "",str(str2))"
2897,Write a program to print the alphabet pattern,"

print(""Enter the row and column size:"");

row_size=input()
for out in range(ord('A'),ord(row_size)+1):
Â  Â  for i in range(ord('A'),ord(row_size)+1):
Â  Â  Â  Â  print(chr(i),end="" "")
Â  Â  print(""\r"")

"
2898,Convert decimal to binary using recursion,"def DecimalToBinary(n):Â  Â  if n==0:Â  Â  Â  Â  return 0Â  Â  else:Â  Â  Â  Â  returnÂ  (n% 2 + 10 * DecimalToBinary(n // 2))n=int(input(""Enter the Decimal Value:""))print(""Binary Value of Decimal number is:"",DecimalToBinary(n))"
2899,Python Program to Calculate the Length of a String Without Using a Library Function,"string=raw_input(""Enter string:"")
count=0
for i in string:
      count=count+1
print(""Length of the string is:"")
print(count)"
2900,Program to Calculate the surface area and volume of a Cylinder,"
import math
PI=3.14
r=int(input(""Enter the radius of the cylinder:""))
h=int(input(""Enter the height of the cylinder:""))
surface_area=(2*PI*r*h)+(2*PI*math.pow(r,2))
volume=PI*math.pow(r,2)*h
print(""Surface Area of the cylinder = "",surface_area)

print(""Volume of the cylinder = "",volume)"
2901,Program to Find nth Sunny Number,"
import math
rangenumber=int(input(""Enter a Nth Number:""))
c = 0
letest = 0
num = 1
while c != rangenumber:
Â  Â  num1=num
Â  Â  root = math.sqrt(num1 + 1)
Â  Â  if int(root) == root:
Â  Â  Â  Â  Â  Â  c+=1
Â  Â  Â  Â  Â  Â  letest = num

Â  Â  num = num + 1
print(rangenumber,""th Sunny number is "",letest)"
2902,Program to find the sum of series 1+2+3..+N,"

print(""Enter the range of number:"")

n=int(input())
sum=0
for i in range(1,n+1):
Â  Â  sum+=i
print(""The sum of the series = "",sum)Â "
2903,Python Program to Find the Intersection of Two Lists,"def intersection(a, b):
    return list(set(a) & set(b))
Â 
def main():
    alist=[]
    blist=[]
    n1=int(input(""Enter number of elements for list1:""))
    n2=int(input(""Enter number of elements for list2:""))
    print(""For list1:"")
    for x in range(0,n1):
        element=int(input(""Enter element"" + str(x+1) + "":""))
        alist.append(element)
    print(""For list2:"")
    for x in range(0,n2):
        element=int(input(""Enter element"" + str(x+1) + "":""))
        blist.append(element)
    print(""The intersection is :"")
    print(intersection(alist, blist))
main()"
2904,Program to swap two numbers using third variable,"num1=int(input(""Enter 1st number:""))
num2=int(input(""Enter 2nd number:""))

temp=num1
num1=num2
num2=temp

print(""***After swapping***"")
print(""Number 1: "",num1)
print(""Number 2: "",num2)"
2905,Print Abundant numbers in a given range(1 to n),"
print(""Enter a range"")
range1=int(input())
range2=int(input())
print(""Abundant numbers between "",range1,"" and "",range2,"" are: "")
for j in range(range1,range2+1):
Â  Â  sum=0
Â  Â  for i in range(1,j):
Â  Â  Â  Â  Â if(j%i==0):
Â  Â  Â  Â  Â  Â  sum=sum+i
Â  Â  if sum>j:
Â  Â  Â  Â print(j,end="" "")
"
2906,Segregate 0s and 1s in an array,"arr=[]size = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array(only 0s and 1s):"")for i in range(0,size):Â  Â  num = int(input())Â  Â  arr.append(num)c=0for i in range(0,size):Â  Â  if arr[i]==0:Â  Â  Â  Â  c+=1for i in range(0,c):Â  Â  Â  Â  arr[i]=0for i in range(c,size):Â  Â  Â  Â  arr[i]=1print(""After segregate 0s and 1s in an Array, Array is:"")print(arr)"
2907,Write a program to print the alphabet pattern,"
print(""Enter the row and column size:"")
row_size=input()
for out in range(ord('A'),ord(row_size)+1):
Â  Â  for i in range(ord('A'),ord(row_size)+1):
Â  Â  Â  Â  print(chr(out),end="""")
Â  Â  print(""\r"")
"
2908,Python Program to Take in the Marks of 5 Subjects and Display the Grade,"Â 
sub1=int(input(""Enter marks of the first subject: ""))
sub2=int(input(""Enter marks of the second subject: ""))
sub3=int(input(""Enter marks of the third subject: ""))
sub4=int(input(""Enter marks of the fourth subject: ""))
sub5=int(input(""Enter marks of the fifth subject: ""))
avg=(sub1+sub2+sub3+sub4+sub4)/5
if(avg>=90):
    print(""Grade: A"")
elif(avg>=80&avg<90):
    print(""Grade: B"")
elif(avg>=70&avg<80):
    print(""Grade: C"")
elif(avg>=60&avg<70):
    print(""Grade: D"")
else:
    print(""Grade: F"")"
2909,Python Program to Create a Class in which One Method Accepts a String from the User and Another Prints it,"class print1():
    def __init__(self):
        self.string=""""
Â 
    def get(self):
        self.string=input(""Enter string: "")
Â 
    def put(self):
        print(""String is:"")
        print(self.string)
Â 
obj=print1()
obj.get()
obj.put()"
2910,Python Program to Implement Binary Insertion Sort,"def binary_insertion_sort(alist):
    for i in range(1, len(alist)):
        temp = alist[i]
        pos = binary_search(alist, temp, 0, i) + 1
Â 
        for k in range(i, pos, -1):
            alist[k] = alist[k - 1]
Â 
        alist[pos] = temp
Â 
def binary_search(alist, key, start, end):
    '''If key is in the list at index p, then return p.
    If there are multiple such keys in the list, then return the index of any one.
    If key is not in the list and a < key < b where a and b are elements in the list, then return the index of a.
    If key is not in the list and key < a where a is the first element in the list, then return -1.
    Only elements with indexes start to end - 1 inclusive are considered.
    '''
    if end - start <= 1:
        if key < alist[start]:
            return start - 1
        else:
            return start
Â 
    mid = (start + end)//2
    if alist[mid] < key:
        return binary_search(alist, key, mid, end)
    elif alist[mid] > key:
        return binary_search(alist, key, start, mid)
    else:
        return mid
Â 
Â 
alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
binary_insertion_sort(alist)
print('Sorted list: ', end='')
print(alist)"
2911,Print array elements using recursion,"def PrintArray(arr,i,n):Â  Â  if(i>=n):Â  Â  Â  Â  returnÂ  Â  print(arr[i],end="" "")Â  Â  PrintArray(arr,i+1,n)arr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):Â  Â  num = int(input())Â  Â  arr.append(num)print(""Array Element Are:"")PrintArray(arr,0,n)"
2912,Python Program to Find Element Occurring Odd Number of Times in a List,"def find_odd_occurring(alist):
    """"""Return the element that occurs odd number of times in alist.
Â 
    alist is a list in which all elements except one element occurs an even
    number of times.
    """"""
    ans = 0
Â 
    for element in alist:
        ans ^= element
Â 
    return ans
Â 
Â 
alist = input('Enter the list: ').split()
alist = [int(i) for i in alist]
ans = find_odd_occurring(alist)
print('The element that occurs odd number of times:', ans)"
2913,Binary search Program using recursion ,"def binary_search(arr, start, end, Search_ele):Â  Â  if(start>end):Â  Â  Â  Â  return -1Â  Â  mid=(int)((start+end)/2)Â  Â  if(arr[mid]==Search_ele):Â  Â  Â  Â  return midÂ  Â  if (Search_ele < arr[mid]):Â  Â  Â  Â  return (binary_search(arr, start, mid - 1, Search_ele))Â  Â  else:Â  Â  Â  Â  return (binary_search(arr, mid + 1, end, Search_ele))arr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):Â  Â  num = int(input())Â  Â  arr.append(num)Search_ele=int(input(""Enter the search element:""))pos=binary_search(arr, 0, n, Search_ele)if (pos== -1):Â  Â  print(Search_ele,"" not found in array"")else:Â  Â  print(Search_ele,"" found at "",""arr["",pos,""]"")"
2914,Python Program to find the factorial of a number without recursion,"n=int(input(""Enter number:""))
fact=1
while(n>0):
    fact=fact*n
    n=n-1
print(""Factorial of the number is: "")
print(fact)"
2915,Program to Check whether two strings are same or not,"
str=input(""Enter the 1st String:"")
str2=input(""Enter the 2nd String:"")
count = 0
if len(str) != len(str2):
Â  Â  print(""Strings are not the same."")
else:
Â  Â  for i in range(0,len(str)):
Â  Â  Â  Â  if str[i] == str2[i]:
Â  Â  Â  Â  Â  Â  count=1
Â  Â  Â  Â  Â  Â  break
Â  Â  if count!=1:
Â  Â  Â  Â  print(""Input strings are not the same."")
Â  Â  else:
Â  Â  Â  Â  print(""Input strings are the same."")"
2916,Program to Find subtraction of two matrices,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]
# Taking input of the 2nd matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])

# Compute Subtraction of two matrices
sub_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        sub_matrix[i][j]=matrix[i][j]-matrix1[i][j]

# display the Subtraction of two matrices
print(""Subtraction of the two Matrices is:"")
for m in sub_matrix:
    print(m)"
2917,Python Program to Flatten a Nested List using Recursion,"def flatten(S):
    if S == []:
        return S
    if isinstance(S[0], list):
        return flatten(S[0]) + flatten(S[1:])
    return S[:1] + flatten(S[1:])
s=[[1,2],[3,4]]
print(""Flattened list is: "",flatten(s))"
2918,Python Program to Implement Breadth-First Search on a Graph,"class Graph:
    def __init__(self):
        # dictionary containing keys that map to the corresponding vertex object
        self.vertices = {}
Â 
    def add_vertex(self, key):
        """"""Add a vertex with the given key to the graph.""""""
        vertex = Vertex(key)
        self.vertices[key] = vertex
Â 
    def get_vertex(self, key):
        """"""Return vertex object with the corresponding key.""""""
        return self.vertices[key]
Â 
    def __contains__(self, key):
        return key in self.vertices
Â 
    def add_edge(self, src_key, dest_key, weight=1):
        """"""Add edge from src_key to dest_key with given weight.""""""
        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)
Â 
    def does_edge_exist(self, src_key, dest_key):
        """"""Return True if there is an edge from src_key to dest_key.""""""
        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])
Â 
    def __iter__(self):
        return iter(self.vertices.values())
Â 
Â 
class Vertex:
    def __init__(self, key):
        self.key = key
        self.points_to = {}
Â 
    def get_key(self):
        """"""Return key corresponding to this vertex object.""""""
        return self.key
Â 
    def add_neighbour(self, dest, weight):
        """"""Make this vertex point to dest with given edge weight.""""""
        self.points_to[dest] = weight
Â 
    def get_neighbours(self):
        """"""Return all vertices pointed to by this vertex.""""""
        return self.points_to.keys()
Â 
    def get_weight(self, dest):
        """"""Get weight of edge from this vertex to dest.""""""
        return self.points_to[dest]
Â 
    def does_it_point_to(self, dest):
        """"""Return True if this vertex points to dest.""""""
        return dest in self.points_to
Â 
Â 
class Queue:
    def __init__(self):
        self.items = []
Â 
    def is_empty(self):
        return self.items == []
Â 
    def enqueue(self, data):
        self.items.append(data)
Â 
    def dequeue(self):
        return self.items.pop(0)
Â 
Â 
def display_bfs(vertex):
    """"""Display BFS Traversal starting at vertex.""""""
    visited = set()
    q = Queue()
    q.enqueue(vertex)
    visited.add(vertex)
    while not q.is_empty():
        current = q.dequeue()
        print(current.get_key(), end=' ')
        for dest in current.get_neighbours():
            if dest not in visited:
                visited.add(dest)
                q.enqueue(dest)
Â 
Â 
g = Graph()
print('Menu')
print('add vertex <key>')
print('add edge <src> <dest>')
print('bfs <vertex key>')
print('display')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0]
    if operation == 'add':
        suboperation = do[1]
        if suboperation == 'vertex':
            key = int(do[2])
            if key not in g:
                g.add_vertex(key)
            else:
                print('Vertex already exists.')
        elif suboperation == 'edge':
            src = int(do[2])
            dest = int(do[3])
            if src not in g:
                print('Vertex {} does not exist.'.format(src))
            elif dest not in g:
                print('Vertex {} does not exist.'.format(dest))
            else:
                if not g.does_edge_exist(src, dest):
                    g.add_edge(src, dest)
                else:
                    print('Edge already exists.')
Â 
    elif operation == 'bfs':
        key = int(do[1])
        print('Breadth-first Traversal: ', end='')
        vertex = g.get_vertex(key)
        display_bfs(vertex)
        print()
Â 
    elif operation == 'display':
        print('Vertices: ', end='')
        for v in g:
            print(v.get_key(), end=' ')
        print()
Â 
        print('Edges: ')
        for v in g:
            for dest in v.get_neighbours():
                w = v.get_weight(dest)
                print('(src={}, dest={}, weight={}) '.format(v.get_key(),
                                                             dest.get_key(), w))
        print()
Â 
    elif operation == 'quit':
        break"
2919,Python Program to Print a Topological Sorting of a Directed Acyclic Graph using DFS,"class Graph:
    def __init__(self):
        # dictionary containing keys that map to the corresponding vertex object
        self.vertices = {}
Â 
    def add_vertex(self, key):
        """"""Add a vertex with the given key to the graph.""""""
        vertex = Vertex(key)
        self.vertices[key] = vertex
Â 
    def get_vertex(self, key):
        """"""Return vertex object with the corresponding key.""""""
        return self.vertices[key]
Â 
    def __contains__(self, key):
        return key in self.vertices
Â 
    def add_edge(self, src_key, dest_key, weight=1):
        """"""Add edge from src_key to dest_key with given weight.""""""
        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)
Â 
    def does_edge_exist(self, src_key, dest_key):
        """"""Return True if there is an edge from src_key to dest_key.""""""
        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])
Â 
    def __iter__(self):
        return iter(self.vertices.values())
Â 
Â 
class Vertex:
    def __init__(self, key):
        self.key = key
        self.points_to = {}
Â 
    def get_key(self):
        """"""Return key corresponding to this vertex object.""""""
        return self.key
Â 
    def add_neighbour(self, dest, weight):
        """"""Make this vertex point to dest with given edge weight.""""""
        self.points_to[dest] = weight
Â 
    def get_neighbours(self):
        """"""Return all vertices pointed to by this vertex.""""""
        return self.points_to.keys()
Â 
    def get_weight(self, dest):
        """"""Get weight of edge from this vertex to dest.""""""
        return self.points_to[dest]
Â 
    def does_it_point_to(self, dest):
        """"""Return True if this vertex points to dest.""""""
        return dest in self.points_to
Â 
Â 
def get_topological_sorting(graph):
    """"""Return a topological sorting of the DAG. Return None if graph is not a DAG.""""""
    tlist = []
    visited = set()
    on_stack = set()
    for v in graph:
        if v not in visited:
            if not get_topological_sorting_helper(v, visited, on_stack, tlist):
                return None
    return tlist
Â 
Â 
def get_topological_sorting_helper(v, visited, on_stack, tlist):
    """"""Perform DFS traversal starting at vertex v and store a topological
    sorting of the DAG in tlist. Return False if it is found that the graph is
    not a DAG. Uses set visited to keep track of already visited nodes.""""""
    if v in on_stack:
        # graph has cycles and is therefore not a DAG.
        return False
Â 
    on_stack.add(v)
    for dest in v.get_neighbours():
        if dest not in visited:
            if not get_topological_sorting_helper(dest, visited, on_stack, tlist):
                return False
    on_stack.remove(v)
    visited.add(v)
    tlist.insert(0, v.get_key()) # prepend node key to tlist
    return True
Â 
Â 
g = Graph()
print('Menu')
print('add vertex <key>')
print('add edge <src> <dest>')
print('topological')
print('display')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0]
    if operation == 'add':
        suboperation = do[1]
        if suboperation == 'vertex':
            key = int(do[2])
            if key not in g:
                g.add_vertex(key)
            else:
                print('Vertex already exists.')
        elif suboperation == 'edge':
            src = int(do[2])
            dest = int(do[3])
            if src not in g:
                print('Vertex {} does not exist.'.format(src))
            elif dest not in g:
                print('Vertex {} does not exist.'.format(dest))
            else:
                if not g.does_edge_exist(src, dest):
                    g.add_edge(src, dest)
                else:
                    print('Edge already exists.')
Â 
    elif operation == 'topological':
        tlist = get_topological_sorting(g)
        if tlist is not None:
            print('Topological Sorting: ', end='')
            print(tlist)
        else:
            print('Graph is not a DAG.')
Â 
    elif operation == 'display':
        print('Vertices: ', end='')
        for v in g:
            print(v.get_key(), end=' ')
        print()
Â 
        print('Edges: ')
        for v in g:
            for dest in v.get_neighbours():
                w = v.get_weight(dest)
                print('(src={}, dest={}, weight={}) '.format(v.get_key(),
                                                             dest.get_key(), w))
        print()
Â 
    elif operation == 'quit':
        break"
2920,Find the maximum occurring character in given string,"str=input(""Enter Your String:"")max=-1arr=[0]*256for i in range(len(str)):Â  Â  if str[i]==' ':Â  Â  Â  Â  continueÂ  Â  num=ord(str[i])Â  Â  arr[num]+=1ch=' 'for i in range(len(str)):Â  Â  if arr[ord(str[i])] != 0:Â  Â  Â  Â  if arr[ord(str[i])] >= max:Â  Â  Â  Â  Â  Â  max = arr[ord(str[i])]Â  Â  Â  Â  Â  Â  ch=str[i]print(""The Maximum occurring character in a string is "",ch)"
2921,Python Program to Find if Undirected Graph contains Cycle using BFS,"class Graph:
    def __init__(self):
        # dictionary containing keys that map to the corresponding vertex object
        self.vertices = {}
Â 
    def add_vertex(self, key):
        """"""Add a vertex with the given key to the graph.""""""
        vertex = Vertex(key)
        self.vertices[key] = vertex
Â 
    def get_vertex(self, key):
        """"""Return vertex object with the corresponding key.""""""
        return self.vertices[key]
Â 
    def __contains__(self, key):
        return key in self.vertices
Â 
    def add_edge(self, src_key, dest_key, weight=1):
        """"""Add edge from src_key to dest_key with given weight.""""""
        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)
Â 
    def add_undirected_edge(self, v1_key, v2_key, weight=1):
        """"""Add undirected edge (2 directed edges) between v1_key and v2_key with
        given weight.""""""
        self.add_edge(v1_key, v2_key, weight)
        self.add_edge(v2_key, v1_key, weight)
Â 
    def does_undirected_edge_exist(self, v1_key, v2_key):
        """"""Return True if there is an undirected edge between v1_key and v2_key.""""""
        return (self.does_edge_exist(v1_key, v2_key)
                and self.does_edge_exist(v1_key, v2_key))
Â 
    def does_edge_exist(self, src_key, dest_key):
        """"""Return True if there is an edge from src_key to dest_key.""""""
        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])
Â 
    def __iter__(self):
        return iter(self.vertices.values())
Â 
Â 
class Vertex:
    def __init__(self, key):
        self.key = key
        self.points_to = {}
Â 
    def get_key(self):
        """"""Return key corresponding to this vertex object.""""""
        return self.key
Â 
    def add_neighbour(self, dest, weight):
        """"""Make this vertex point to dest with given edge weight.""""""
        self.points_to[dest] = weight
Â 
    def get_neighbours(self):
        """"""Return all vertices pointed to by this vertex.""""""
        return self.points_to.keys()
Â 
    def get_weight(self, dest):
        """"""Get weight of edge from this vertex to dest.""""""
        return self.points_to[dest]
Â 
    def does_it_point_to(self, dest):
        """"""Return True if this vertex points to dest.""""""
        return dest in self.points_to
Â 
Â 
class Queue:
    def __init__(self):
        self.items = []
Â 
    def is_empty(self):
        return self.items == []
Â 
    def enqueue(self, data):
        self.items.append(data)
Â 
    def dequeue(self):
        return self.items.pop(0)
Â 
Â 
def is_cycle_present(vertex, visited):
    """"""Return True if cycle is present in component containing vertex and put
    all vertices in component in set visited.""""""
    parent = {vertex: None}
    q = Queue()
    q.enqueue(vertex)
    visited.add(vertex)
    while not q.is_empty():
        current = q.dequeue()
        for dest in current.get_neighbours():
            if dest not in visited:
                visited.add(dest)
                parent[dest] = current
                q.enqueue(dest)
            else:
                if parent[current] is not dest:
                    return True
    return False
Â 
Â 
g = Graph()
print('Undirected Graph')
print('Menu')
print('add vertex <key>')
print('add edge <vertex1> <vertex2>')
print('cycle')
print('display')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0]
    if operation == 'add':
        suboperation = do[1]
        if suboperation == 'vertex':
            key = int(do[2])
            if key not in g:
                g.add_vertex(key)
            else:
                print('Vertex already exists.')
        elif suboperation == 'edge':
            v1 = int(do[2])
            v2 = int(do[3])
            if v1 not in g:
                print('Vertex {} does not exist.'.format(v1))
            elif v2 not in g:
                print('Vertex {} does not exist.'.format(v2))
            else:
                if not g.does_undirected_edge_exist(v1, v2):
                    g.add_undirected_edge(v1, v2)
                else:
                    print('Edge already exists.')
Â 
    elif operation == 'cycle':
        present = False
        visited = set()
        for v in g:
            if v not in visited:
                if is_cycle_present(v, visited):
                    present = True
                    break
Â 
        if present:
            print('Cycle present.')
        else:
            print('Cycle not present.')
Â 
    elif operation == 'display':
        print('Vertices: ', end='')
        for v in g:
            print(v.get_key(), end=' ')
        print()
Â 
        print('Edges: ')
        for v in g:
            for dest in v.get_neighbours():
                w = v.get_weight(dest)
                print('(src={}, dest={}, weight={}) '.format(v.get_key(),
                                                             dest.get_key(), w))
        print()
Â 
    elif operation == 'quit':
        break"
2922,Insert an element into an array at a specified position,"
arr=[]
size = int(input(""Enter the size of the array: ""))
print(""Enter the Element of the array:"")
for i in range(0,size):
Â  Â  num = int(input())
Â  Â  arr.append(num)
print(""Enter the element:"")
ele=int(input())
print(""Enter the position:"")
pos=int(input())
print(""Before inserting array elements are:"")
for i in range(0,size):
Â  Â  print(arr[i],end="" "")
arr.insert(pos-1,ele)
print(""\nAfter inserting array elements are:"")
print(arr)"
2923,Find the square of a number accept from user,"num=int(input(""Enter a number:""))Â print(""Square of the number:"",num*num)Â "
2924,Separate positive and negative numbers in an array,"
arr=[]
size = int(input(""Enter the size of the array: ""))
print(""Enter the Element of the array:"")
for i in range(0,size):
Â  Â  num = int(input())
Â  Â  arr.append(num)
print(""\nPositive numbers are:"")
for i in range(0,size):
Â  Â  if(arr[i]>0):
Â  Â  Â  Â  print(arr[i],end="" "")

print(""\nNegative numbers are:"")
for i in range(0,size):
Â  Â  if(arr[i]<0):
Â  Â  Â  Â  print(arr[i],end="" "")"
2925,Count repeated characters in a string,"
str=input(""Enter the String:"")
arr=[0]*256
for i in range(len(str)):
Â  Â  if str[i]==' ':
Â  Â  Â  Â  continue
Â  Â  num=ord(str[i])
Â  Â  arr[num]+=1
print(""Repeated character in a string are:"")
for i in range(256):
Â  Â  if arr[i]>1:
Â  Â  Â  Â  print((chr)(i),"" occurs "",arr[i],"" times"")"
2926,Python Program to Find the first Common Element between the 2 given Linked Lists,"class Node:
    def __init__(self, data):
       self.data = data
       self.next = None
Â 
Â 
class LinkedList:
    def __init__(self):
        self.head = None
        self.last_node = None
Â 
    def append(self, data):
        if self.last_node is None:
            self.head = Node(data)
            self.last_node = self.head
        else:
            self.last_node.next = Node(data)
            self.last_node = self.last_node.next
Â 
Â 
def first_common(llist1, llist2):
    current1 = llist1.head
    while current1:
        data = current1.data
        current2 = llist2.head
        while current2:
            if data == current2.data:
                return data
            current2 = current2.next
        current1 = current1.next
    return None
Â 
Â 
llist1 = LinkedList()
llist2 = LinkedList()
Â 
data_list = input('Please enter the elements in the first linked list: ').split()
for data in data_list:
    llist1.append(int(data))
Â 
data_list = input('Please enter the elements in the second linked list: ').split()
for data in data_list:
    llist2.append(int(data))
Â 
common = first_common(llist1, llist2)
Â 
if common:
    print('The element that appears first in the first linked list that'
          ' is common to both is {}.'.format(common))
else:
    print('The two lists have no common elements.')"
2927,Python Program to Find All Connected Components using BFS in an Undirected Graph,"class Graph:
    def __init__(self):
        # dictionary containing keys that map to the corresponding vertex object
        self.vertices = {}
Â 
    def add_vertex(self, key):
        """"""Add a vertex with the given key to the graph.""""""
        vertex = Vertex(key)
        self.vertices[key] = vertex
Â 
    def get_vertex(self, key):
        """"""Return vertex object with the corresponding key.""""""
        return self.vertices[key]
Â 
    def __contains__(self, key):
        return key in self.vertices
Â 
    def add_edge(self, src_key, dest_key, weight=1):
        """"""Add edge from src_key to dest_key with given weight.""""""
        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)
Â 
    def does_edge_exist(self, src_key, dest_key):
        """"""Return True if there is an edge from src_key to dest_key.""""""
        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])
Â 
    def add_undirected_edge(self, v1_key, v2_key, weight=1):
        """"""Add undirected edge (2 directed edges) between v1_key and v2_key with
        given weight.""""""
        self.add_edge(v1_key, v2_key, weight)
        self.add_edge(v2_key, v1_key, weight)
Â 
    def does_undirected_edge_exist(self, v1_key, v2_key):
        """"""Return True if there is an undirected edge between v1_key and v2_key.""""""
        return (self.does_edge_exist(v1_key, v2_key)
                and self.does_edge_exist(v1_key, v2_key))
Â 
    def __iter__(self):
        return iter(self.vertices.values())
Â 
Â 
class Vertex:
    def __init__(self, key):
        self.key = key
        self.points_to = {}
Â 
    def get_key(self):
        """"""Return key corresponding to this vertex object.""""""
        return self.key
Â 
    def add_neighbour(self, dest, weight):
        """"""Make this vertex point to dest with given edge weight.""""""
        self.points_to[dest] = weight
Â 
    def get_neighbours(self):
        """"""Return all vertices pointed to by this vertex.""""""
        return self.points_to.keys()
Â 
    def get_weight(self, dest):
        """"""Get weight of edge from this vertex to dest.""""""
        return self.points_to[dest]
Â 
    def does_it_point_to(self, dest):
        """"""Return True if this vertex points to dest.""""""
        return dest in self.points_to
Â 
Â 
class Queue:
    def __init__(self):
        self.items = []
Â 
    def is_empty(self):
        return self.items == []
Â 
    def enqueue(self, data):
        self.items.append(data)
Â 
    def dequeue(self):
        return self.items.pop(0)
Â 
Â 
def label_all_reachable(vertex, component, label):
    """"""Set component[v] = label for all v in the component containing vertex.""""""
    visited = set()
    q = Queue()
    q.enqueue(vertex)
    visited.add(vertex)
    while not q.is_empty():
        current = q.dequeue()
        component[current] = label
        for dest in current.get_neighbours():
            if dest not in visited:
                visited.add(dest)
                q.enqueue(dest)
Â 
Â 
g = Graph()
print('Undirected Graph')
print('Menu')
print('add vertex <key>')
print('add edge <src> <dest>')
print('components')
print('display')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0]
    if operation == 'add':
        suboperation = do[1]
        if suboperation == 'vertex':
            key = int(do[2])
            if key not in g:
                g.add_vertex(key)
            else:
                print('Vertex already exists.')
        elif suboperation == 'edge':
            src = int(do[2])
            dest = int(do[3])
            if src not in g:
                print('Vertex {} does not exist.'.format(src))
            elif dest not in g:
                print('Vertex {} does not exist.'.format(dest))
            else:
                if not g.does_undirected_edge_exist(src, dest):
                    g.add_undirected_edge(src, dest)
                else:
                    print('Edge already exists.')
Â 
    elif operation == 'components':
        component = dict.fromkeys(g, None)
        label = 1
        for v in g:
            if component[v] is None:
                label_all_reachable(v, component, label)
                label += 1
Â 
        max_label = label
        for label in range(1, max_label):
            component_vertices = [v.get_key() for v in component
                                  if component[v] == label]
            print('Component {}:'.format(label), component_vertices)
Â 
Â 
Â 
    elif operation == 'display':
        print('Vertices: ', end='')
        for v in g:
            print(v.get_key(), end=' ')
        print()
Â 
        print('Edges: ')
        for v in g:
            for dest in v.get_neighbours():
                w = v.get_weight(dest)
                print('(src={}, dest={}, weight={}) '.format(v.get_key(),
                                                             dest.get_key(), w))
        print()
Â 
    elif operation == 'quit':
        break"
2928,Program to find the sum of series 1^1+2^2+3^3...+N^N,"

import math

print(""Enter the range of number:"")
n=int(input())
sum=0
for i in range(1,n+1):
Â  Â  sum+=pow(i,i)
print(""The sum of the series = "",sum)"
2929,Program to Find square of a matrix ,"# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

# compute square of the matrix
for i in range(0,row_size):
    for j in range(0,col_size):
        matrix[i][j]=pow(matrix[i][j],2)

# display square of the matrix
print(""Square of the Matrix elements are:"")
for m in matrix:
    print(m)"
2930,Python Program to Count Number of Lowercase Characters in a String,"string=raw_input(""Enter string:"")
count=0
for i in string:
      if(i.islower()):
            count=count+1
print(""The number of lowercase characters is:"")
print(count)"
2931,Capitalize the first and last letter of every word in a string,"
ch=input(""Enter the String:"")
j=0
str=list(ch)
str+='\0'
for i in range(len(str)):
Â  Â  if i==0 or str[i-1]==' ':
Â  Â  Â  Â  str[i]=str[i].upper()
Â  Â  elif str[i]==' ' or str[i]=='\0':
Â  Â  Â  Â  str[i-1] = str[i-1].upper()

print(""Your String is:"", """".join(str))"
2932,"
By using list comprehension, please write a program generate a 3*5*8 3D array whose each element is 0.
:","
array = [[ [0 for col in range(8)] for col in range(5)] for row in range(3)]
print array

"
2933,Find the largest digit in a number,"
print(""Enter the Number :"")
num=int(input())
Largest=0;
while (num > 0):
Â  Â  reminder=num%10
Â  Â  if Largest<reminder:
Â  Â  Â  Â  Largest = reminder

Â  Â  num =int(num / 10)
print(""The Largest Digit is :"", Largest)

"
2934,Find the 2nd largest element in the array,"
import sys
arr=[]
size = int(input(""Enter the size of the array: ""))
print(""Enter the Element of the array:"")
for i in range(0,size):
Â  Â  num = int(input())
Â  Â  arr.append(num)
max=-sys.maxsize-1
sec_max=-sys.maxsize-1
for j in range(0,size):
Â  Â  if (arr[j] >= max):
Â  Â  Â  Â  sec_max=max
Â  Â  Â  Â  max = arr[j]
Â  Â  elif(arr[i] >= sec_max):
Â  Â  Â  Â  sec_max = arr[j]

print(""The 2nd largest element of array: "",sec_max)"
2935,Print all the Even numbers from 1 to n,"

n=int(input(""Enter the n value:""))
print(""Printing even numbers between 1 to "",n)
for i in range(1,n+1):
Â  Â  if i%2==0:
Â  Â  Â print(i)
"
2936,Python Program to Implement Queue,"class Queue:
    def __init__(self):
        self.items = []
Â 
    def is_empty(self):
        return self.items == []
Â 
    def enqueue(self, data):
        self.items.append(data)
Â 
    def dequeue(self):
        return self.items.pop(0)
Â 
Â 
q = Queue()
while True:
    print('enqueue <value>')
    print('dequeue')
    print('quit')
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
    if operation == 'enqueue':
        q.enqueue(int(do[1]))
    elif operation == 'dequeue':
        if q.is_empty():
            print('Queue is empty.')
        else:
            print('Dequeued value: ', q.dequeue())
    elif operation == 'quit':
        break"
2937,Find the sum of all diagonal elements of a matrix,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

sum=0
#Calculate sum of the diagonals element
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i==j:
            sum+=matrix[i][j]
# Display the sum of diagonals Element
print(""Sum of diagonals Element is: "",sum)"
2938,Program to Find subtraction of two matrices,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]
# Taking input of the 2nd matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])

# Compute Subtraction of two matrices
sub_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        sub_matrix[i][j]=matrix[i][j]-matrix1[i][j]

# display the Subtraction of two matrices
print(""Subtraction of the two Matrices is:"")
for m in sub_matrix:
    print(m)"
2939,"Define a function that can convert a integer into a string and print it in console.
:","Solution
def printValue(n):
	print str(n)

printValue(3)
	

"
2940,Program to compute the area of Trapezoid,"

print(""Enter the value of base:"")
a=int(input())
b=int(input())
h=int(input(""Enter the value of height:""))
area=((a+b)*h)/2.0
print(""Area of the Trapezoid = "",area)
"
2941,Find GCD of two numbers using recursion,"def gcd(num1,num2):Â  Â  if num2==0:Â  Â  Â  Â  return num1Â  Â  else:Â  Â  Â  Â  return gcd(num2,num1%num2)print(""Enter the two Number:"")num1=int(input())num2=int(input())print(""Gcd of Given Numbers Using Recursion is:"",gcd(num1,num2))"
2942,Python Program to Implement Depth First Search Traversal using Post Order,"class Tree:
    def __init__(self, data=None):
        self.key = data
        self.children = []
Â 
    def set_root(self, data):
        self.key = data
Â 
    def add(self, node):
        self.children.append(node)
Â 
    def search(self, key):
        if self.key == key:
            return self
        for child in self.children:
            temp = child.search(key)
            if temp is not None:
                return temp
        return None
Â 
    def postorder(self):
        for child in self.children:
            child.postorder()
        print(self.key, end=' ')
Â 
Â 
tree = None
Â 
print('Menu (this assumes no duplicate keys)')
print('add <data> at root')
print('add <data> below <data>')
print('dfs')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
    if operation == 'add':
        data = int(do[1])
        new_node = Tree(data)
        suboperation = do[2].strip().lower() 
        if suboperation == 'at':
            tree = new_node
        elif suboperation == 'below':
            position = do[3].strip().lower()
            key = int(position)
            ref_node = None
            if tree is not None:
                ref_node = tree.search(key)
            if ref_node is None:
                print('No such key.')
                continue
            ref_node.add(new_node)
Â 
    elif operation == 'dfs':
        print('Post-order traversal: ', end='')
        tree.postorder()
        print()
Â 
    elif operation == 'quit':
        break"
2943,Program to find the sum of series 1^1+2^2+3^3...+N^N,"

import math

print(""Enter the range of number:"")
n=int(input())
sum=0
for i in range(1,n+1):
Â  Â  sum+=pow(i,i)
print(""The sum of the series = "",sum)"
2944,Print the average marks obtained by a student in five tests,"arr=[]sum=0avg=0.0print(""Enter the five test Marks:"")for i in range(0,5):Â  Â  mark = int(input())Â  Â  sum+=markÂ  Â  arr.append(mark)avg=sum/5.0print(""Average of five tests marks is: "",avg)"
2945,Python Program to Find All Nodes Reachable from a Node using DFS in a Graph,"class Graph:
    def __init__(self):
        # dictionary containing keys that map to the corresponding vertex object
        self.vertices = {}
Â 
    def add_vertex(self, key):
        """"""Add a vertex with the given key to the graph.""""""
        vertex = Vertex(key)
        self.vertices[key] = vertex
Â 
    def get_vertex(self, key):
        """"""Return vertex object with the corresponding key.""""""
        return self.vertices[key]
Â 
    def __contains__(self, key):
        return key in self.vertices
Â 
    def add_edge(self, src_key, dest_key, weight=1):
        """"""Add edge from src_key to dest_key with given weight.""""""
        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)
Â 
    def does_edge_exist(self, src_key, dest_key):
        """"""Return True if there is an edge from src_key to dest_key.""""""
        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])
Â 
    def __iter__(self):
        return iter(self.vertices.values())
Â 
Â 
class Vertex:
    def __init__(self, key):
        self.key = key
        self.points_to = {}
Â 
    def get_key(self):
        """"""Return key corresponding to this vertex object.""""""
        return self.key
Â 
    def add_neighbour(self, dest, weight):
        """"""Make this vertex point to dest with given edge weight.""""""
        self.points_to[dest] = weight
Â 
    def get_neighbours(self):
        """"""Return all vertices pointed to by this vertex.""""""
        return self.points_to.keys()
Â 
    def get_weight(self, dest):
        """"""Get weight of edge from this vertex to dest.""""""
        return self.points_to[dest]
Â 
    def does_it_point_to(self, dest):
        """"""Return True if this vertex points to dest.""""""
        return dest in self.points_to
Â 
Â 
def find_all_reachable_nodes(v):
    """"""Return set containing all vertices reachable from vertex.""""""
    reachable = set()
    find_all_reachable_nodes_helper(v, reachable)
    return reachable
Â 
Â 
def find_all_reachable_nodes_helper(v, visited):
    """"""Add all vertices visited by DFS traversal starting at v to the set visited.""""""
    visited.add(v)
    for dest in v.get_neighbours():
        if dest not in visited:
            find_all_reachable_nodes_helper(dest, visited)
Â 
Â 
g = Graph()
print('Menu')
print('add vertex <key>')
print('add edge <src> <dest>')
print('reachable <vertex key>')
print('display')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0]
    if operation == 'add':
        suboperation = do[1]
        if suboperation == 'vertex':
            key = int(do[2])
            if key not in g:
                g.add_vertex(key)
            else:
                print('Vertex already exists.')
        elif suboperation == 'edge':
            src = int(do[2])
            dest = int(do[3])
            if src not in g:
                print('Vertex {} does not exist.'.format(src))
            elif dest not in g:
                print('Vertex {} does not exist.'.format(dest))
            else:
                if not g.does_edge_exist(src, dest):
                    g.add_edge(src, dest)
                else:
                    print('Edge already exists.')
Â 
    elif operation == 'reachable':
        key = int(do[1])
        vertex = g.get_vertex(key)
        reachable = find_all_reachable_nodes(vertex)
        print('All nodes reachable from {}:'.format(key),
              [v.get_key() for v in reachable])
Â 
    elif operation == 'display':
        print('Vertices: ', end='')
        for v in g:
            print(v.get_key(), end=' ')
        print()
Â 
        print('Edges: ')
        for v in g:
            for dest in v.get_neighbours():
                w = v.get_weight(dest)
                print('(src={}, dest={}, weight={}) '.format(v.get_key(),
                                                             dest.get_key(), w))
        print()
Â 
    elif operation == 'quit':
        break"
2946,"Program to print series 0,6,10,17,22,30,36...N","
print(""Enter the range of number(Limit):"")
n=int(input())
i=1
a=0
b=6
k=10
p=11
while(i<=n):
Â  Â  if (i % 2 == 0):
Â  Â  Â  Â  print(b,end="" "")
Â  Â  Â  Â  b += p
Â  Â  Â  Â  p += 2
Â  Â  else:
Â  Â  Â  Â  print(a,end="" "")
Â  Â  Â  Â  a += k
Â  Â  Â  Â  k += 2
Â  Â  i+=1"
2947,Program to print square pattern of numbers,"

print(""Enter the row and column size:"");
row_size=int(input())
for out in range(1,row_size+1):
Â  Â  for i in range(1,row_size+1):
Â  Â  Â  Â  print(i,end="""")
Â  Â  print(""\r"")
"
2948,Program to display a lower triangular matrix,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

#Display Lower triangular matrix
print(""Lower Triangular Matrix is:\n"")
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i<j:
            print(""0 "",end="""")
        else:
            print(matrix[i][j],end="" "")
    print()"
2949,Python Program to Implement Depth-First Search on a Graph without Recursion,"class Graph:
    def __init__(self):
        # dictionary containing keys that map to the corresponding vertex object
        self.vertices = {}
Â 
    def add_vertex(self, key):
        """"""Add a vertex with the given key to the graph.""""""
        vertex = Vertex(key)
        self.vertices[key] = vertex
Â 
    def get_vertex(self, key):
        """"""Return vertex object with the corresponding key.""""""
        return self.vertices[key]
Â 
    def __contains__(self, key):
        return key in self.vertices
Â 
    def add_edge(self, src_key, dest_key, weight=1):
        """"""Add edge from src_key to dest_key with given weight.""""""
        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)
Â 
    def does_edge_exist(self, src_key, dest_key):
        """"""Return True if there is an edge from src_key to dest_key.""""""
        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])
Â 
    def __iter__(self):
        return iter(self.vertices.values())
Â 
Â 
class Vertex:
    def __init__(self, key):
        self.key = key
        self.points_to = {}
Â 
    def get_key(self):
        """"""Return key corresponding to this vertex object.""""""
        return self.key
Â 
    def add_neighbour(self, dest, weight):
        """"""Make this vertex point to dest with given edge weight.""""""
        self.points_to[dest] = weight
Â 
    def get_neighbours(self):
        """"""Return all vertices pointed to by this vertex.""""""
        return self.points_to.keys()
Â 
    def get_weight(self, dest):
        """"""Get weight of edge from this vertex to dest.""""""
        return self.points_to[dest]
Â 
    def does_it_point_to(self, dest):
        """"""Return True if this vertex points to dest.""""""
        return dest in self.points_to
Â 
Â 
class Stack:
    def __init__(self):
        self.items = []
Â 
    def is_empty(self):
        return self.items == []
Â 
    def push(self, data):
        self.items.append(data)
Â 
    def pop(self):
        return self.items.pop()
Â 
Â 
def display_dfs(v):
    visited = set()
    s = Stack()
    s.push(vertex)
    while not s.is_empty():
        current = s.pop()
        if current in visited:
            continue
        print(current.get_key(), end=' ')
        visited.add(current)
        for dest in current.get_neighbours():
            if dest not in visited:
                s.push(dest)
Â 
Â 
g = Graph()
print('Menu')
print('add vertex <key>')
print('add edge <src> <dest>')
print('dfs <vertex key>')
print('display')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0]
    if operation == 'add':
        suboperation = do[1]
        if suboperation == 'vertex':
            key = int(do[2])
            if key not in g:
                g.add_vertex(key)
            else:
                print('Vertex already exists.')
        elif suboperation == 'edge':
            src = int(do[2])
            dest = int(do[3])
            if src not in g:
                print('Vertex {} does not exist.'.format(src))
            elif dest not in g:
                print('Vertex {} does not exist.'.format(dest))
            else:
                if not g.does_edge_exist(src, dest):
                    g.add_edge(src, dest)
                else:
                    print('Edge already exists.')
Â 
    elif operation == 'dfs':
        key = int(do[1])
        print('Depth-first Traversal: ', end='')
        vertex = g.get_vertex(key)
        display_dfs(vertex)
        print()
Â 
    elif operation == 'display':
        print('Vertices: ', end='')
        for v in g:
            print(v.get_key(), end=' ')
        print()
Â 
        print('Edges: ')
        for v in g:
            for dest in v.get_neighbours():
                w = v.get_weight(dest)
                print('(src={}, dest={}, weight={}) '.format(v.get_key(),
                                                             dest.get_key(), w))
        print()
Â 
    elif operation == 'quit':
        break"
2950,"
Please generate a random float where the value is between 5 and 95 using Python math module.


:","
import random
print random.random()*100-5


"
2951,Python Program to Check whether a Singly Linked List is a Palindrome,"class Node:
    def __init__(self, data):
       self.data = data
       self.next = None
Â 
Â 
class LinkedList:
    def __init__(self):
        self.head = None
        self.last_node = None
Â 
    def append(self, data):
        if self.last_node is None:
            self.head = Node(data)
            self.last_node = self.head
        else:
            self.last_node.next = Node(data)
            self.last_node = self.last_node.next
Â 
    def get_prev_node(self, ref_node):
        current = self.head
        while (current and current.next != ref_node):
            current = current.next
        return current
Â 
Â 
def is_palindrome(llist):
    start = llist.head
    end = llist.last_node
    while (start != end and end.next != start):
        if start.data != end.data:
            return False
        start = start.next
        end = llist.get_prev_node(end)
    return True
Â 
Â 
a_llist = LinkedList()
Â 
data_list = input('Please enter the elements in the linked list: ').split()
for data in data_list:
    a_llist.append(int(data))
Â 
if is_palindrome(a_llist):
    print('The linked list is palindromic.')
else:
    print('The linked list is not palindromic.')"
2952,Program to find sum of series 1+4+9+16+25+.....+N,"
import math
print(""Enter the range of number(Limit):"")
n=int(input())
i=1
while(i<=n):
Â  Â  sum += pow(i, 2)
Â  Â  i+=1
print(""The sum of the series = "",sum)"
2953,Program to Find the sum of series 9+99+999.....+N,"n=int(input(""Enter the range of number:""))sum=0p=9for i in range(1,n+1):Â  Â  sum += pÂ  Â  p=(p*10)+9print(""The sum of the series = "",sum)"
2954,Python Program to Read Two Numbers and Print Their Quotient and Remainder,"Â 
a=int(input(""Enter the first number: ""))
b=int(input(""Enter the second number: ""))
quotient=a//b
remainder=a%b
print(""Quotient is:"",quotient)
print(""Remainder is:"",remainder)"
2955,Python Program to Find the Sum of the Series: 1 + 1/2 + 1/3 + â€¦.. + 1/N,"n=int(input(""Enter the number of terms: ""))
sum1=0
for i in range(1,n+1):
    sum1=sum1+(1/i)
print(""The sum of series is"",round(sum1,2))"
2956, Program to print the Solid Inverted Half Diamond Number Pattern,"row_size=int(input(""Enter the row size:""))for out in range(row_size,-(row_size+1),-1):Â  Â  for in1 in range(1,abs(out)+1):Â  Â  Â  Â  print("" "",end="""")Â  Â  for p in range(abs(out),row_size+1):Â  Â  Â  Â  print(p,end="""")Â  Â  print(""\r"")"
2957,Remove duplicate characters from a given string,"str=input(""Enter Your String:"")arr=[0]*256for i in range(len(str)):Â  Â  if str[i]!=' ':Â  Â  Â  Â  num=ord(str[i])Â  Â  Â  Â  arr[num]+=1print(""After Removing Duplicate character from a given string is:"")for i in range(len(str)):Â  Â  if str[i]!=' ':Â  Â  Â  Â  if arr[ord(str[i])] !=0:Â  Â  Â  Â  Â  Â  print(str[i],end="""")Â  Â  Â  Â  Â  Â  arr[ord(str[i])]=0Â  Â  else:Â  Â  Â  Â  print(str[i], end="""")"
2958,Find lexicographic rank of a given string,"def Find_Factorial(len1):Â  Â  fact = 1Â  Â  for i in range(1, len1+1):Â  Â  Â  Â  fact = fact * iÂ  Â  return factdef Find_Lexicographic_Rank(str,len1):Â  Â  rank = 1Â  Â  for inn in range(0, len1):Â  Â  Â  Â  count=0Â  Â  Â  Â  for out in range(inn+1, len1+1):Â  Â  Â  Â  Â  Â  if str[inn] > str[out]:Â  Â  Â  Â  Â  Â  Â  Â  count+=1Â  Â  Â  Â  rank+=count*Find_Factorial(len1-inn)Â  Â  return rankstr=input(""Enter Your String:"")print(""Lexicographic Rank of given String is: "",Find_Lexicographic_Rank(str,len(str)-1))"
2959,Python Program to Count the Number of Occurrences of an Element in the Linked List without using Recursion,"class Node:
    def __init__(self, data):
       self.data = data
       self.next = None
Â 
class LinkedList:
    def __init__(self):
        self.head = None
        self.last_node = None
Â 
    def append(self, data):
        if self.last_node is None:
            self.head = Node(data)
            self.last_node = self.head
        else:
            self.last_node.next = Node(data)
            self.last_node = self.last_node.next
Â 
    def display(self):
        current = self.head
        while current:
            print(current.data, end = ' ')
            current = current.next
Â 
    def count(self, key):
        current = self.head
Â 
        count = 0
        while current:
            if current.data == key:
                count = count + 1
            current = current.next
Â 
        return count
Â 
a_llist = LinkedList()
for data in [5, 1, 3, 5, 5, 15, 4, 9, 2]:
    a_llist.append(data)
print('The linked list: ', end = '')
a_llist.display()
print()
Â 
key = int(input('Enter data item: '))
count = a_llist.count(key)
print('{0} occurs {1} time(s) in the list.'.format(key, count))"
2960,Find out all Automorphic numbers present within a given range,"

'''Write a Python
programÂ toÂ find out all Automorphic numbers present within a given
range. orÂ Write a programÂ toÂ find out all Automorphic numbers
present within a given range using Python '''

print(""Enter a range:"")
range1=int(input())
range2=int(input())
print(""Perfect numbers between "",range1,"" and "",range2,"" are: "")
for i in range(range1,range2+1):
Â  Â  num=i
Â  Â  sqr=num*num
Â  Â  flag=0
Â  Â  while num!=0:
Â  Â  Â  Â  if(num%10 != sqr%10):
Â  Â  Â  Â  Â  Â  flag=-1
Â  Â  Â  Â  Â  Â  break
Â  Â  Â  Â  num=int(num/10)
Â  Â  Â  Â  sqr=int(sqr/10)
Â  Â  if(flag==0):
print(i,end="" "")Â 
"
2961,Program to display a lower triangular matrix,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

#Display Lower triangular matrix
print(""Lower Triangular Matrix is:\n"")
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i<j:
            print(""0 "",end="""")
        else:
            print(matrix[i][j],end="" "")
    print()"
2962,Check if a string contains only digits,"str=input(""Enter Your String:"")count=0for inn in range(0,len(str)):Â  Â  if str[inn] >= '0' andÂ  str[inn] <= '9':Â  Â  Â  Â  count+=1if count==len(str):Â  Â  print(""String contains only digits."")else:Â  Â  print(""String does not contain only digits."")"
2963,Program to Calculate the surface area and volume of a Cone,"

import math
PI=3.14
r=int(input(""Enter the radius of the cone:""))
h=int(input(""Enter the height of the cone:""))
surface_area=(PI*r)*(r+math.sqrt(math.pow(h,2)+math.pow(r,2)))
volume=PI*math.pow(r,2)*(h/3.0)
print(""Surface Area of the cone= "",surface_area)
print(""Volume of the cone = "",volume)
"
2964,"
Define a custom exception class which takes a string message as attribute.
:","
class MyError(Exception):
    """"""My own exception class

    Attributes:
        msg  -- explanation of the error
    """"""

    def __init__(self, msg):
        self.msg = msg

error = MyError(""something wrong"")

"
2965,Python Program to Replace all Occurrences of â€˜aâ€™ with $ in a String,"string=input(""Enter string:"")
string=string.replace('a','$')
string=string.replace('A','$')
print(""Modified string:"")
print(string)"
2966,Find the LCM of two numbers using recursion,"def gcd(num1,num2):Â  Â  if num2==0:Â  Â  Â  Â  return num1Â  Â  else:Â  Â  Â  Â  return gcd(num2,num1%num2)def lcm(num1,num2):Â  Â  return (num1 * num2) // gcd(num1, num2)print(""Enter the two Number:"")num1=int(input())num2=int(input())print(""Lcm of Given Numbers Using Recursion is:"",lcm(num1,num2))"
2967,Python Program to Remove the Duplicate Items from a List,"a=[]
n= int(input(""Enter the number of elements in list:""))
for x in range(0,n):
    element=int(input(""Enter element"" + str(x+1) + "":""))
    a.append(element)
b = set()
unique = []
for x in a:
    if x not in b:
        unique.append(x)
        b.add(x)
print(""Non-duplicate items:"")
print(unique)"
2968,Check if given number is palindrome using recursion,"rev = 0def Num_reverse(num):Â  Â  global revÂ  Â  if num!=0:Â  Â  Â  Â  rem=num%10Â  Â  Â  Â  rev=(rev*10)+remÂ  Â  Â  Â  Num_reverse(num//10)Â  Â  return revnum=int(input(""Enter your Number:""))if(Num_reverse(num)==num):Â  Â  print(num,"" is a Palindrome Number."")else:Â  Â  print(num,"" is not a Palindrome Number."")"
2969,Move all zeros to the Start of an Array,"arr=[]size = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,size):Â  Â  num = int(input())Â  Â  arr.append(num)c=size-1for i in range(size-1,-1,-1):Â  Â  if arr[i]!=0:Â  Â  Â  Â  arr[c]=arr[i]Â  Â  Â  Â  c-=1for i in range(c,-1,-1):Â  Â  Â  Â  arr[c]=0Â  Â  Â  Â  c-=1print(""After Move all zerosÂ to Start, Array is:"")print(arr)"
2970,"
Please write a program to generate a list with 5 random numbers between 100 and 200 inclusive.


:","
import random
print random.sample(range(100), 5)

"
2971,Count how many consonants present in a String,"
str=input(""Enter the String:"")
count=0
for i in range(len(str)):
Â  Â  if str[i] == 'a' or str[i] == 'A' or str[i] == 'e' or str[i] == 'E' or str[i] == 'i'or str[i] == 'I' or str[i] == 'o' or str[i] == 'O' or str[i] == 'u' or str[i] == 'U' orÂ str[i]==' ':
Â  Â  Â  Â  continue
Â  Â  else:
Â  Â  Â  Â  count+=1
if count==0:
Â  Â  Â  Â  print(""No consonants are present in the string."")
else:
Â  Â  print(""Numbers of consonants present in the string are "",count)"
2972,Python Program to Print DFS Numbering of a Graph,"class Graph:
    def __init__(self):
        # dictionary containing keys that map to the corresponding vertex object
        self.vertices = {}
Â 
    def add_vertex(self, key):
        """"""Add a vertex with the given key to the graph.""""""
        vertex = Vertex(key)
        self.vertices[key] = vertex
Â 
    def get_vertex(self, key):
        """"""Return vertex object with the corresponding key.""""""
        return self.vertices[key]
Â 
    def __contains__(self, key):
        return key in self.vertices
Â 
    def add_edge(self, src_key, dest_key, weight=1):
        """"""Add edge from src_key to dest_key with given weight.""""""
        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)
Â 
    def does_edge_exist(self, src_key, dest_key):
        """"""Return True if there is an edge from src_key to dest_key.""""""
        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])
Â 
    def __iter__(self):
        return iter(self.vertices.values())
Â 
Â 
class Vertex:
    def __init__(self, key):
        self.key = key
        self.points_to = {}
Â 
    def get_key(self):
        """"""Return key corresponding to this vertex object.""""""
        return self.key
Â 
    def add_neighbour(self, dest, weight):
        """"""Make this vertex point to dest with given edge weight.""""""
        self.points_to[dest] = weight
Â 
    def get_neighbours(self):
        """"""Return all vertices pointed to by this vertex.""""""
        return self.points_to.keys()
Â 
    def get_weight(self, dest):
        """"""Get weight of edge from this vertex to dest.""""""
        return self.points_to[dest]
Â 
    def does_it_point_to(self, dest):
        """"""Return True if this vertex points to dest.""""""
        return dest in self.points_to
Â 
def dfs(v, pre, post):
    """"""Display DFS traversal starting at vertex v. Stores pre and post times in
    dictionaries pre and post.""""""
    dfs_helper(v, set(), pre, post, [0])
Â 
def dfs_helper(v, visited, pre, post, time):
    """"""Display DFS traversal starting at vertex v. Uses set visited to keep
    track of already visited nodes, dictionaries pre and post to store
    discovered and finished times and the one-element list time to keep track of
    current time.""""""
    visited.add(v)
    time[0] = time[0] + 1
    pre[v] = time[0]
    print('Visiting {}... discovered time = {}'.format(v.get_key(), time[0]))
    for dest in v.get_neighbours():
        if dest not in visited:
            dfs_helper(dest, visited, pre, post, time)
    time[0] = time[0] + 1
    post[v] = time[0]
    print('Leaving {}... finished time = {}'.format(v.get_key(), time[0]))
Â 
Â 
g = Graph()
print('Menu')
print('add vertex <key>')
print('add edge <src> <dest>')
print('dfs <vertex key>')
print('display')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0]
    if operation == 'add':
        suboperation = do[1]
        if suboperation == 'vertex':
            key = int(do[2])
            if key not in g:
                g.add_vertex(key)
            else:
                print('Vertex already exists.')
        elif suboperation == 'edge':
            src = int(do[2])
            dest = int(do[3])
            if src not in g:
                print('Vertex {} does not exist.'.format(src))
            elif dest not in g:
                print('Vertex {} does not exist.'.format(dest))
            else:
                if not g.does_edge_exist(src, dest):
                    g.add_edge(src, dest)
                else:
                    print('Edge already exists.')
Â 
    elif operation == 'dfs':
        key = int(do[1])
        print('Depth-first Traversal: ')
        vertex = g.get_vertex(key)
        pre = dict()
        post = dict()
        dfs(vertex, pre, post)
        print()
Â 
    elif operation == 'display':
        print('Vertices: ', end='')
        for v in g:
            print(v.get_key(), end=' ')
        print()
Â 
        print('Edges: ')
        for v in g:
            for dest in v.get_neighbours():
                w = v.get_weight(dest)
                print('(src={}, dest={}, weight={}) '.format(v.get_key(),
                                                             dest.get_key(), w))
        print()
Â 
    elif operation == 'quit':
        break"
2973,Linear search Program using recursion ,"temp=0def Linear_search(arr,Search_ele,n):Â  Â  global tempÂ  Â  if(n>0):Â  Â  Â  Â  i=n-1Â  Â  Â  Â  if(arr[i]==Search_ele):Â  Â  Â  Â  Â  Â  temp=1Â  Â  Â  Â  Linear_search(arr, Search_ele, i)Â  Â  return temparr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):Â  Â  num = int(input())Â  Â  arr.append(num)Search_ele=int(input(""Enter the search element:""))if(Linear_search(arr,Search_ele,n)==1):Â  Â  print(""Element found...."")else:Â  Â  print(""Element not found...."")"
2974,Python Program to Implement Dijkstraâ€™s Shortest Path Algorithm,"class Graph:
    def __init__(self):
        # dictionary containing keys that map to the corresponding vertex object
        self.vertices = {}
Â 
    def add_vertex(self, key):
        """"""Add a vertex with the given key to the graph.""""""
        vertex = Vertex(key)
        self.vertices[key] = vertex
Â 
    def get_vertex(self, key):
        """"""Return vertex object with the corresponding key.""""""
        return self.vertices[key]
Â 
    def __contains__(self, key):
        return key in self.vertices
Â 
    def add_edge(self, src_key, dest_key, weight=1):
        """"""Add edge from src_key to dest_key with given weight.""""""
        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)
Â 
    def does_edge_exist(self, src_key, dest_key):
        """"""Return True if there is an edge from src_key to dest_key.""""""
        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])
Â 
    def __iter__(self):
        return iter(self.vertices.values())
Â 
Â 
class Vertex:
    def __init__(self, key):
        self.key = key
        self.points_to = {}
Â 
    def get_key(self):
        """"""Return key corresponding to this vertex object.""""""
        return self.key
Â 
    def add_neighbour(self, dest, weight):
        """"""Make this vertex point to dest with given edge weight.""""""
        self.points_to[dest] = weight
Â 
    def get_neighbours(self):
        """"""Return all vertices pointed to by this vertex.""""""
        return self.points_to.keys()
Â 
    def get_weight(self, dest):
        """"""Get weight of edge from this vertex to dest.""""""
        return self.points_to[dest]
Â 
    def does_it_point_to(self, dest):
        """"""Return True if this vertex points to dest.""""""
        return dest in self.points_to
Â 
Â 
def dijkstra(g, source):
    """"""Return distance where distance[v] is min distance from source to v.
Â 
    This will return a dictionary distance.
Â 
    g is a Graph object.
    source is a Vertex object in g.
    """"""
    unvisited = set(g)
    distance = dict.fromkeys(g, float('inf'))
    distance[source] = 0
Â 
    while unvisited != set():
        # find vertex with minimum distance
        closest = min(unvisited, key=lambda v: distance[v])
Â 
        # mark as visited
        unvisited.remove(closest)
Â 
        # update distances
        for neighbour in closest.get_neighbours():
           if neighbour in unvisited:
               new_distance = distance[closest] + closest.get_weight(neighbour)
               if distance[neighbour] > new_distance:
                   distance[neighbour] = new_distance
Â 
    return distance
Â 
Â 
g = Graph()
print('Undirected Graph')
print('Menu')
print('add vertex <key>')
print('add edge <src> <dest> <weight>')
print('shortest <source vertex key>')
print('display')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0]
    if operation == 'add':
        suboperation = do[1]
        if suboperation == 'vertex':
            key = int(do[2])
            if key not in g:
                g.add_vertex(key)
            else:
                print('Vertex already exists.')
        elif suboperation == 'edge':
            src = int(do[2])
            dest = int(do[3])
            weight = int(do[4])
            if src not in g:
                print('Vertex {} does not exist.'.format(src))
            elif dest not in g:
                print('Vertex {} does not exist.'.format(dest))
            else:
                if not g.does_edge_exist(src, dest):
                    g.add_edge(src, dest, weight)
                    g.add_edge(dest, src, weight)
                else:
                    print('Edge already exists.')
Â 
    elif operation == 'shortest':
        key = int(do[1])
        source = g.get_vertex(key)
        distance = dijkstra(g, source)
        print('Distances from {}: '.format(key))
        for v in distance:
            print('Distance to {}: {}'.format(v.get_key(), distance[v]))
        print()
Â 
    elif operation == 'display':
        print('Vertices: ', end='')
        for v in g:
            print(v.get_key(), end=' ')
        print()
Â 
        print('Edges: ')
        for v in g:
            for dest in v.get_neighbours():
                w = v.get_weight(dest)
                print('(src={}, dest={}, weight={}) '.format(v.get_key(),
                                                             dest.get_key(), w))
        print()
Â 
    elif operation == 'quit':
        break"
2975,"Define a function that can convert a integer into a string and print it in console.
:","Solution
def printValue(n):
	print str(n)

printValue(3)

"
2976,Find the length of the string without using the inbuilt function,"
str=input(""Enter the String:"")
len=0
while str[len:]:
Â  Â  len+=1
print(""Your Enter String is:"", len)"
2977,"Write a program which can filter() to make a list whose elements are even number between 1 and 20 (both included).
:","Solution
evenNumbers = filter(lambda x: x%2==0, range(1,21))
print evenNumbers


"
2978,"Define a function that can accept two strings as input and concatenate them and then print it in console.
:","Solution
def printValue(s1,s2):
	print s1+s2

printValue(""3"",""4"") #34

"
2979,Binary to Decimal conversion using recursion,"def BinaryToDecimal(n):Â  Â  if n==0:Â  Â  Â  Â  return 0Â  Â  else:Â  Â  Â  Â  return (n% 10 + 2* BinaryToDecimal(n // 10))n=int(input(""Enter the Binary Value:""))print(""Decimal Value of Binary number is:"",BinaryToDecimal(n))"
2980,Python Program to Convert Binary to Gray Code,"def binary_to_gray(n):
    """"""Convert Binary to Gray codeword and return it.""""""
    n = int(n, 2) # convert to int
    n ^= (n >> 1)
Â 
    # bin(n) returns n's binary representation with a '0b' prefixed
    # the slice operation is to remove the prefix
    return bin(n)[2:]
Â 
Â 
g = input('Enter binary number: ')
b = binary_to_gray(g)
print('Gray codeword:', b)"
2981,Program to convert octal to binary ,"print(""Enter octal number: "")
octal=int(input())
decimal = 0
i = 0
binary = 0
while (octal != 0):
Â  Â  Â  decimal = decimal + (octal % 10) * pow (8, i)
Â  Â  Â  i+=1
Â  Â  Â  octal = octal // 10
i = 1
while (decimal != 0):
Â  Â  Â  binary = binary + (decimal % 2) * i
Â  Â  Â  decimal = decimal // 2
Â  Â  Â  i = i * 10
print (""Binary number is: "", binary)



"
2982,Program to print series 2 4 7 12 21 ...N,"n=int(input(""Enter the range of number(Limit):""))i=0pr=2print(""2 "",end="""")while i<n-1:Â  Â  pr = (pr * 2) -iÂ  Â  print(pr,end="" "")Â  Â  i+=1"
2983,Program to check two matrix are equal or not,"# Get size of 1st matrix
row_size=int(input(""Enter the row Size Of the 1st Matrix:""))
col_size=int(input(""Enter the columns Size Of the 1st Matrix:""))

# Get size of 2nd matrix
row_size1=int(input(""Enter the row Size Of the 1st Matrix:""))
col_size1=int(input(""Enter the columns Size Of the 2nd Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the 1st Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]
# Taking input of the 2nd matrix
print(""Enter the 2nd Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])

# Compare two matrices
point=0
if row_size==row_size1 and col_size==col_size1:
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j] != matrix1[i][j]:
                point=1
                break
else:
    print(""Two matrices are not equal."")
    exit(0)

if point==1:
    print(""Two matrices are not equal."")
else:
    print(""Two matrices are equal."")"
2984, Reverse a given string using recursion,"def Reverse_String(str):Â  Â  if not str:Â  Â  Â  Â  return strÂ  Â  else:Â  Â  Â  Â  return Reverse_String(str[1:]) + str[0]str=input(""Enter your String:"")print(""After Reversing String is: "",Reverse_String(str))"
2985,"Write a program which can compute the factorial of a given numbers.
The results should be printed in a comma-separated sequence on a single line.","def fact(x):
    if x == 0:
        return 1
    return x * fact(x - 1)

x=int(raw_input())
print fact(x)
"
2986,Program to print series 1 2 5 8 15 28 51 94 ...N,"n=int(input(""Enter the range of number(Limit):""))i=4if n>=1:Â  Â  print(""1 "",end="""")if n>=2:Â  Â  print(""2 "",end="""")if n>=3:Â  Â  print(""5 "",end="""")a=1b=2c=5while i<=n:Â  Â  d = a + b + cÂ  Â  a = bÂ  Â  b = cÂ  Â  c = dÂ  Â  print(d,end="" "")Â  Â  i+=1"
2987,Python Program to Find the Power of a Number Using Recursion,"def power(base,exp):
    if(exp==1):
        return(base)
    if(exp!=1):
        return(base*power(base,exp-1))
base=int(input(""Enter base: ""))
exp=int(input(""Enter exponential value: ""))
print(""Result:"",power(base,exp))"
2988,Python Program to Check if Expression is correctly Parenthesized,"class Stack:
    def __init__(self):
        self.items = []
Â 
    def is_empty(self):
        return self.items == []
Â 
    def push(self, data):
        self.items.append(data)
Â 
    def pop(self):
        return self.items.pop()
Â 
Â 
s = Stack()
exp = input('Please enter the expression: ')
Â 
for c in exp:
    if c == '(':
        s.push(1)
    elif c == ')':
        if s.is_empty():
            is_balanced = False
            break
        s.pop()
else:
    if s.is_empty():
        is_balanced = True
    else:
        is_balanced = False
Â 
if is_balanced:
    print('Expression is correctly parenthesized.')
else:
    print('Expression is not correctly parenthesized.')"
2989,Count how many vowels present in a string,"
str=input(""Enter the String:"")
count=0
for i in range(len(str)):
Â  Â  if str[i] == 'a' or str[i] == 'A' or str[i] == 'e' or str[i] == 'E' or str[i] == 'i'or str[i] == 'I' or str[i] == 'o' or str[i] == 'O' or str[i] == 'u' or str[i] == 'U':
Â  Â  Â  Â  count+=1
if count==0:
Â  Â  Â  Â  print(""No vowels are present in the string."")
else:
Â  Â  print(""Numbers of vowels present in the string are "",count)"
2990,Convert Octal to decimal using recursion,"decimal=0sem=0def OctalToDecimal(n):Â  Â  global sem,decimalÂ  Â  if(n!=0):Â  Â  Â  Â  decimal+=(n%10)*pow(8,sem)Â  Â  Â  Â  sem+=1Â  Â  Â  Â  OctalToDecimal(n // 10)Â  Â  return decimaln=int(input(""Enter the Octal Value:""))print(""Decimal Value of Octal number is:"",OctalToDecimal(n))"
2991,Python Program to Find the Largest Element in a Doubly Linked List,"class Node:
    def __init__(self, data):
       self.data = data
       self.next = None
       self.prev = None
Â 
Â 
class DoublyLinkedList:
    def __init__(self):
        self.first = None
        self.last = None
Â 
    def append(self, data):
        self.insert_at_end(Node(data))
Â 
    def insert_at_end(self, new_node):
        if self.last is None:
            self.last = new_node
            self.first = new_node
        else:
            new_node.prev = self.last
            self.last.next = new_node
            self.last = new_node
Â 
Â 
def find_largest(dllist):
    if dllist.first is None:
        return None
    largest = dllist.first.data
    current = dllist.first.next
    while current:
        if current.data > largest:
            largest = current.data
        current = current.next
    return largest
Â 
Â 
a_dllist = DoublyLinkedList()
Â 
data_list = input('Please enter the elements in the doubly linked list: ').split()
for data in data_list:
    a_dllist.append(int(data))
Â 
largest = find_largest(a_dllist)
if largest:
    print('The largest element is {}.'.format(largest))
else:
    print('The list is empty.')"
2992,Python Program to Find if Undirected Graph contains Cycle using DFS,"class Graph:
    def __init__(self):
        # dictionary containing keys that map to the corresponding vertex object
        self.vertices = {}
Â 
    def add_vertex(self, key):
        """"""Add a vertex with the given key to the graph.""""""
        vertex = Vertex(key)
        self.vertices[key] = vertex
Â 
    def get_vertex(self, key):
        """"""Return vertex object with the corresponding key.""""""
        return self.vertices[key]
Â 
    def __contains__(self, key):
        return key in self.vertices
Â 
    def add_edge(self, src_key, dest_key, weight=1):
        """"""Add edge from src_key to dest_key with given weight.""""""
        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)
Â 
    def add_undirected_edge(self, v1_key, v2_key, weight=1):
        """"""Add undirected edge (2 directed edges) between v1_key and v2_key with
        given weight.""""""
        self.add_edge(v1_key, v2_key, weight)
        self.add_edge(v2_key, v1_key, weight)
Â 
    def does_undirected_edge_exist(self, v1_key, v2_key):
        """"""Return True if there is an undirected edge between v1_key and v2_key.""""""
        return (self.does_edge_exist(v1_key, v2_key)
                and self.does_edge_exist(v1_key, v2_key))
Â 
    def does_edge_exist(self, src_key, dest_key):
        """"""Return True if there is an edge from src_key to dest_key.""""""
        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])
Â 
    def __iter__(self):
        return iter(self.vertices.values())
Â 
Â 
class Vertex:
    def __init__(self, key):
        self.key = key
        self.points_to = {}
Â 
    def get_key(self):
        """"""Return key corresponding to this vertex object.""""""
        return self.key
Â 
    def add_neighbour(self, dest, weight):
        """"""Make this vertex point to dest with given edge weight.""""""
        self.points_to[dest] = weight
Â 
    def get_neighbours(self):
        """"""Return all vertices pointed to by this vertex.""""""
        return self.points_to.keys()
Â 
    def get_weight(self, dest):
        """"""Get weight of edge from this vertex to dest.""""""
        return self.points_to[dest]
Â 
    def does_it_point_to(self, dest):
        """"""Return True if this vertex points to dest.""""""
        return dest in self.points_to
Â 
Â 
def is_cycle_present(v, visited):
    """"""Return True if cycle is present in component containing vertex and put
    all vertices in component in set visited.""""""
    parent = {v: None}
    return is_cycle_present_helper(v, visited, parent)
Â 
Â 
def is_cycle_present_helper(v, visited, parent):
    """"""Return True if cycle is present in component containing vertex and put
    all vertices in component in set visited. Uses dictionary parent to keep
    track of parents of nodes in the DFS tree.""""""
    visited.add(v)
    for dest in v.get_neighbours():
        if dest not in visited:
            parent[dest] = v
            if is_cycle_present_helper(dest, visited, parent):
                return True
        else:
            if parent[v] is not dest:
                return True
    return False
Â 
Â 
g = Graph()
print('Undirected Graph')
print('Menu')
print('add vertex <key>')
print('add edge <vertex1> <vertex2>')
print('cycle')
print('display')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0]
    if operation == 'add':
        suboperation = do[1]
        if suboperation == 'vertex':
            key = int(do[2])
            if key not in g:
                g.add_vertex(key)
            else:
                print('Vertex already exists.')
        elif suboperation == 'edge':
            v1 = int(do[2])
            v2 = int(do[3])
            if v1 not in g:
                print('Vertex {} does not exist.'.format(v1))
            elif v2 not in g:
                print('Vertex {} does not exist.'.format(v2))
            else:
                if not g.does_undirected_edge_exist(v1, v2):
                    g.add_undirected_edge(v1, v2)
                else:
                    print('Edge already exists.')
Â 
    elif operation == 'cycle':
        present = False
        visited = set()
        for v in g:
            if v not in visited:
                if is_cycle_present(v, visited):
                    present = True
                    break
Â 
        if present:
            print('Cycle present.')
        else:
            print('Cycle not present.')
Â 
    elif operation == 'display':
        print('Vertices: ', end='')
        for v in g:
            print(v.get_key(), end=' ')
        print()
Â 
        print('Edges: ')
        for v in g:
            for dest in v.get_neighbours():
                w = v.get_weight(dest)
                print('(src={}, dest={}, weight={}) '.format(v.get_key(),
                                                             dest.get_key(), w))
        print()
Â 
    elif operation == 'quit':
        break"
2993,Program to Find nth Spy Number ,"
rangenumber=int(input(""Enter a Nth Number:""))
c = 0
letest = 0
num = 1
while c != rangenumber:
Â  Â  sum = 0
Â  Â  mult = 1
Â  Â  num1=num
Â  Â  while num1 != 0:
Â  Â  Â  Â  rem = num1 % 10
Â  Â  Â  Â  sum += rem
Â  Â  Â  Â  mult *= rem
Â  Â  Â  Â  num1 //= 10

Â  Â  if sum == mult:
Â  Â  Â  Â  Â  Â  c+=1
Â  Â  Â  Â  Â  Â  letest = num

Â  Â  num = num + 1
print(rangenumber,""th Spy number is "",letest)"
2994,Find out how many 1 and 0 in a given number.,"

'''Write a Python
programÂ toÂ find out all How many 1 and 0 in a given number.
orÂ Write a programÂ toÂ find out all How many 1 and 0 in a given the number using Python '''

print(""Enter a number:"")
num=int(input())
c1=0
c0=0
while int(num):
Â  Â  r=num%10
Â  Â  num=int(num/10)
Â  Â  if r==1:
Â  Â  Â  Â  c1=c1+1
Â  Â  if r==0:
Â  Â  Â  Â  c0=c0+1
print(""The total number of zero's are "",c0)
print(""The total number of one's are "",c1)


"
2995,Program to check two matrix are equal or not,"# Get size of 1st matrix
row_size=int(input(""Enter the row Size Of the 1st Matrix:""))
col_size=int(input(""Enter the columns Size Of the 1st Matrix:""))

# Get size of 2nd matrix
row_size1=int(input(""Enter the row Size Of the 1st Matrix:""))
col_size1=int(input(""Enter the columns Size Of the 2nd Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the 1st Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]
# Taking input of the 2nd matrix
print(""Enter the 2nd Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])

# Compare two matrices
point=0
if row_size==row_size1 and col_size==col_size1:
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j] != matrix1[i][j]:
                point=1
                break
else:
    print(""Two matrices are not equal."")
    exit(0)

if point==1:
    print(""Two matrices are not equal."")
else:
    print(""Two matrices are equal."")"
2996,Find the Longest word in a string,"str=input(""Enter Your String:"")sub_str=str.split("" "")maxInd=0max=0max = len(sub_str[0])for inn in range(0,len(sub_str)):Â  Â  len1 = len(sub_str[inn])Â  Â  if len1 > max:Â  Â  Â  Â  max=len1Â  Â  Â  Â  maxInd=innprint(""Longest Substring(Word) is "",sub_str[maxInd])"
2997,Python Program to Convert Gray Code to Binary,"def gray_to_binary(n):
    """"""Convert Gray codeword to binary and return it.""""""
    n = int(n, 2) # convert to int
Â 
    mask = n
    while mask != 0:
        mask >>= 1
        n ^= mask
Â 
    # bin(n) returns n's binary representation with a '0b' prefixed
    # the slice operation is to remove the prefix
    return bin(n)[2:]
Â 
Â 
g = input('Enter Gray codeword: ')
b = gray_to_binary(g)
print('In binary:', b)"
2998,Python Program to Implement a Stack,"class Stack:
    def __init__(self):
        self.items = []
Â 
    def is_empty(self):
        return self.items == []
Â 
    def push(self, data):
        self.items.append(data)
Â 
    def pop(self):
        return self.items.pop()
Â 
Â 
s = Stack()
while True:
    print('push <value>')
    print('pop')
    print('quit')
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
    if operation == 'push':
        s.push(int(do[1]))
    elif operation == 'pop':
        if s.is_empty():
            print('Stack is empty.')
        else:
            print('Popped value: ', s.pop())
    elif operation == 'quit':
        break"
2999,Python Program to solve Maximum Subarray Problem using Divide and Conquer,"def find_max_subarray(alist, start, end):
    """"""Returns (l, r, m) such that alist[l:r] is the maximum subarray in
    A[start:end] with sum m. Here A[start:end] means all A[x] for start <= x <
    end.""""""
    # base case
    if start == end - 1:
        return start, end, alist[start]
    else:
        mid = (start + end)//2
        left_start, left_end, left_max = find_max_subarray(alist, start, mid)
        right_start, right_end, right_max = find_max_subarray(alist, mid, end)
        cross_start, cross_end, cross_max = find_max_crossing_subarray(alist, start, mid, end)
        if (left_max > right_max and left_max > cross_max):
            return left_start, left_end, left_max
        elif (right_max > left_max and right_max > cross_max):
            return right_start, right_end, right_max
        else:
            return cross_start, cross_end, cross_max
Â 
def find_max_crossing_subarray(alist, start, mid, end):
    """"""Returns (l, r, m) such that alist[l:r] is the maximum subarray within
    alist with start <= l < mid <= r < end with sum m. The arguments start, mid,
    end must satisfy start <= mid <= end.""""""
    sum_left = float('-inf')
    sum_temp = 0
    cross_start = mid
    for i in range(mid - 1, start - 1, -1):
        sum_temp = sum_temp + alist[i]
        if sum_temp > sum_left:
            sum_left = sum_temp
            cross_start = i
Â 
    sum_right = float('-inf')
    sum_temp = 0
    cross_end = mid + 1
    for i in range(mid, end):
        sum_temp = sum_temp + alist[i]
        if sum_temp > sum_right:
            sum_right = sum_temp
            cross_end = i + 1
    return cross_start, cross_end, sum_left + sum_right
Â 
alist = input('Enter the list of numbers: ')
alist = alist.split()
alist = [int(x) for x in alist]
start, end, maximum = find_max_subarray(alist, 0, len(alist))
print('The maximum subarray starts at index {}, ends at index {}'
      ' and has sum {}.'.format(start, end - 1, maximum))"
3000,Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.,"items=[x for x in raw_input().split(',')]
items.sort()
print ','.join(items)
"
3001,Program to calculate the LCM of two numbers,"


'''Write
a Python programÂ to calculate the LCM of two numbers. orÂ 



Â Â  Write a programÂ toÂ calculate the
LCM of two numbers using Python '''

print(""Enter two number to find L.C.M:"")
num1=int(input())
num2=int(input())
n1=num1
n2=num2
while(num1!=num2):
Â  Â if (num1 > num2):
Â  Â  Â  num1 = num1 - num2
Â  Â else:
Â  Â  Â  num2= num2 - num1
lcm=int((n1*n2)/num1)
print(""L.C.M is"",lcm)
"
3002,Count inversions in an array,"arr=[]size = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,size):Â  Â  num = int(input())Â  Â  arr.append(num)count=0print(""All the inversions are:"")for i in range(0,size-1):Â  Â  for j in range(i+1, size):Â  Â  Â  Â  if arr[i]>arr[j]:Â  Â  Â  Â  Â  Â  print(""("",arr[i],"","",arr[j],"")"")Â  Â  Â  Â  Â  Â  count+=1if count==0:Â  Â  Â print(""(0)"")elif count==0:Â  Â  Â print(""\nNumber of Inversions is "",count)else:Â  Â  print(""\nNumber of Inversions are "",count)"
3003,"Python Program to Generate a Dictionary that Contains Numbers (between 1 and n) in the Form (x,x*x).","n=int(input(""Enter a number:""))
d={x:x*x for x in range(1,n+1)}
print(d)"
3004,Python Program to Reverse a String without using Recursion,"a=str(input(""Enter a string: ""))
print(""Reverse of the string is: "")
print(a[::-1])"
3005,Python Program to Count all Paths in a Grid with Holes using Dynamic Programming with Bottom-Up Approach,"def count_paths(m, n, holes):
    """"""Return number of paths from (0, 0) to (m, n) in an m x n grid.
Â 
    holes is a list of tuples (x, y) where each tuple is a coordinate which is
    blocked for a path.
    """"""
    paths = [[-1]*(m + 1) for _ in range(n + 1)]
Â 
    if (0, 0) in holes:
        paths[0][0] = 0
    else:
        paths[0][0] = 1
Â 
    for x in range(1, n + 1):
        if (x, 0) in holes:
            paths[x][0] = 0
        else:
            paths[x][0] = paths[x - 1][0]
Â 
    for y in range(1, m + 1):
        if (0, y) in holes:
            paths[0][y] = 0
        else:
            paths[0][y] = paths[0][y - 1]
Â 
    for x in range(1, n + 1):
        for y in range(1, m + 1):
            if (x, y) in holes:
                paths[x][y] = 0
            else:
                paths[x][y] = paths[x - 1][y] + paths[x][y - 1]
Â 
    return paths[n][m]
Â 
Â 
m, n = input('Enter m, n for the size of the m x n grid (m rows and n columns): ').split(',')
m = int(m)
n = int(n)
print('Enter the coordinates of holes on each line (empty line to stop): ')
holes = []
while True:
    hole = input('')
    if not hole.strip():
        break
    hole = hole.split(',')
    hole = (int(hole[0]), int(hole[1]))
    holes.append(hole)
Â 
count = count_paths(m, n, holes)
print('Number of paths from (0, 0) to ({}, {}): {}.'.format(n, m, count))"
3006,Python Program to Read Height in Centimeters and then Convert the Height to Feet and Inches,"Â 
cm=int(input(""Enter the height in centimeters:""))
inches=0.394*cm
feet=0.0328*cm
print(""The length in inches"",round(inches,2))
print(""The length in feet"",round(feet,2))"
3007,"
Please write a program to output a random number, which is divisible by 5 and 7, between 0 and 10 inclusive using random module and list comprehension.


:","
import random
print random.choice([i for i in range(201) if i%5==0 and i%7==0])



"
3008,Python Program to Read the Contents of a File,"a=str(input(""Enter the name of the file with .txt extension:""))
file2=open(a,'r')
line=file2.readline()
while(line!=""""):
    print(line)
    line=file2.readline()
file2.close()"
3009,"
Please write a program using generator to print the even numbers between 0 and n in comma separated form while n is input by console.
","
def EvenGenerator(n):
    i=0
    while i<=n:
        if i%2==0:
            yield i
        i+=1


n=int(raw_input())
values = []
for i in EvenGenerator(n):
    values.append(str(i))

print "","".join(values)


"
3010,"Define a function that can receive two integral numbers in string form and compute their sum and then print it in console.
:","Solution
def printValue(s1,s2):
	print int(s1)+int(s2)

printValue(""3"",""4"") #7


"
3011,"
By using list comprehension, please write a program to print the list after removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].
:","
li = [12,24,35,70,88,120,155]
li = [x for (i,x) in enumerate(li) if i not in (0,4,5)]
print li



"
3012,Print the Full Inverted Pyramid Alphabet Pattern,"row_size=int(input(""Enter the row size:""))np=row_size*2-1for out in range(row_size-1,-1,-1):Â  Â  for inn in range(row_size,out,-1):Â  Â  Â  Â  print("" "",end="""")Â  Â  for p in range(0,np):Â  Â  Â  Â  print((chr)(out+65),end="""")Â  Â  np-=2Â  Â  print(""\r"")"
3013,"
Please write a program which accepts basic mathematic expression from console and print the evaluation result.
","
expression = raw_input()
print eval(expression)


"
3014,Print vowels in a string,"
str=input(""Enter the String:"")
for i in range(len(str)):
Â  Â  if str[i] == 'a' or str[i] == 'A' or str[i] == 'e' or str[i] == 'E' or str[i] == 'i'or str[i] == 'I' or str[i] == 'o' or str[i] == 'O' or str[i] == 'u' or str[i] == 'U':
Â  Â  Â  Â  print(str[i],end="" "")"
3015,Python Program to Merge Two Lists and Sort it,"a=[]
c=[]
n1=int(input(""Enter number of elements:""))
for i in range(1,n1+1):
    b=int(input(""Enter element:""))
    a.append(b)
n2=int(input(""Enter number of elements:""))
for i in range(1,n2+1):
    d=int(input(""Enter element:""))
    c.append(d)
new=a+c
new.sort()
print(""Sorted list is:"",new)"
3016,Max sum contiguous subarray,"arr=[]size = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,size):Â  Â  num = int(input())Â  Â  arr.append(num)Maximum_Sum=0for i in range(0,size):Â  Â  for j in range(i, size):Â  Â  Â  Â  sum=0Â  Â  Â  Â  for p in range(i, j):Â  Â  Â  Â  Â  Â  sum+=arr[p]Â  Â  Â  Â  if sum>=Maximum_Sum:Â  Â  Â  Â  Â  Â  Â Maximum_Sum=sumprint(""Maximum sum of Contiguous Subarray is "",Maximum_Sum)"
3017,Python Program to Find All Numbers which are Odd and Palindromes Between a Range of Numbers without using Recursion,"a=[]
l=int(input(""Enter lower limit: ""))
u=int(input(""Enter upper limit: ""))
a=[x for x in range(l,u+1) if x%2!=0 and str(x)==str(x)[::-1]]
print(""The numbers are: "",a)"
3018,Program to Print Cube Number series 1 8 27 64...N,"
print(""Enter the range of number(Limit):"")
n=int(input())
i=1
while(i<=n):
Â  Â  print(i*i*i,end="" "")
Â  Â  i+=1"
3019,Python Program to Implement Merge Sort,"def merge_sort(alist, start, end):
    '''Sorts the list from indexes start to end - 1 inclusive.'''
    if end - start > 1:
        mid = (start + end)//2
        merge_sort(alist, start, mid)
        merge_sort(alist, mid, end)
        merge_list(alist, start, mid, end)
Â 
def merge_list(alist, start, mid, end):
    left = alist[start:mid]
    right = alist[mid:end]
    k = start
    i = 0
    j = 0
    while (start + i < mid and mid + j < end):
        if (left[i] <= right[j]):
            alist[k] = left[i]
            i = i + 1
        else:
            alist[k] = right[j]
            j = j + 1
        k = k + 1
    if start + i < mid:
        while k < end:
            alist[k] = left[i]
            i = i + 1
            k = k + 1
    else:
        while k < end:
            alist[k] = right[j]
            j = j + 1
            k = k + 1
Â 
Â 
alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
merge_sort(alist, 0, len(alist))
print('Sorted list: ', end='')
print(alist)"
3020,Program to reverse a string without using the reverse function,"
str=input(""Enter the String:"")
print(""After Reversing String is :"")
for i in range(len(str)-1,-1,-1):
Â  Â  print(str[i],end="""")"
3021,"Write a program which can map() to make a list whose elements are square of numbers between 1 and 20 (both included).
:","Solution
squaredNumbers = map(lambda x: x**2, range(1,21))
print squaredNumbers




"
3022,Program to find the sum of series 1^2+2^2+3^2...+N^2,"

print(""Enter the range of number:"")
n=int(input())
sum=0
for i in range(1,n+1):
Â  Â  sum+=i*i
print(""The sum of the series = "",sum)"
3023,Program to find the transpose of a matrix,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

# Compute transpose of two matrices
tran_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(0,row_size):
    for j in range(0,col_size):
        tran_matrix[i][j]=matrix[j][i]

# display transpose of the matrix
print(""Transpose of the Given Matrix is:"")
for m in tran_matrix:
    print(m)"
3024,Program to Find the Biggest of three numbers,"
print(""Enter 3 numbers:"")
num1=int(input())
num2=int(input())
num3=int(input())

print(""The biggest number is "",max(num1,num2,num3))

"
3025,Python Program to Form an Integer that has the Number of Digits at Ten's Place and the Least Significant Digit of the Entered Integer at One's Place,"Â 
n=int(input(""Enter the number:""))
tmp=n
k=0
while(n>0):
    k=k+1
    n=n//10
b=str(tmp)
c=str(k)
d=c+b[k-1]
print(""The new number formed:"",int(d))"
3026,"Define a function which can generate and print a list where the values are square of numbers between 1 and 20 (both included).
:","Solution
def printList():
	li=list()
	for i in range(1,21):
		li.append(i**2)
	print li
		

printList()

"
3027,Multiply two numbers using recursion,"def Multiplication(num1,num2):Â  Â  if num1<num2:Â  Â  Â  Â  return Multiplication(num2, num1)Â  Â  elif num2!=0:Â  Â  Â  Â  return num1 + Multiplication(num1, num2 - 1)Â  Â  else:Â  Â  Â  Â  return 0print(""Enter the two Number:"")num1=int(input())num2=int(input())print(""Multiplication of Two Number Using Recursion is: "",Multiplication(num1,num2))"
3028,Write C|Java|C++|Python Program to compute 1/N!,"
n=int(input(""Enter the n value:""))
fact=1
for i in range(1,n+1):
Â  Â  fact*=i
result=1.0/fact
print(""1/n!= "",result)
"
3029, Program to print the Solid Half Diamond Star Pattern,"
row_size=int(input(""Enter the row size:""))
for out in range(row_size,-(row_size-1),-1):
Â  Â  for i in range((row_size),abs(out-1),-1):
Â  Â  Â  Â  print(""*"",end="""")
Â  Â  print(""\r"")

"
3030,"Define a class which has at least two methods:
getString: to get a string from console input
printString: to print the string in upper case.
Also please include simple test function to test the class methods.
:","class InputOutString(object):
    def __init__(self):
        self.s = """"

    def getString(self):
        self.s = raw_input()

    def printString(self):
        print self.s.upper()

strObj = InputOutString()
strObj.getString()
strObj.printString()
"
3031,Count number of digits in a number using recursion,"count=0def count_digit(num):Â  Â  global countÂ  Â  if (num != 0):Â  Â  Â  Â  count +=1Â  Â  Â  Â  count_digit(num // 10)Â  Â  return countn=int(input(""Enter a number:""))print(""The number of digits in the Given Number is "",count_digit(n))"
3032,Program to Print the Hollow Rectangle Star Pattern,"row_size=int(input(""Enter the row size:""))print_control_x=row_size//2+1for out in range(1,row_size+1):Â  Â  for inn in range(1,row_size+1):Â  Â  Â  Â  if (inn==1 or inn==row_size) or (out==1 or out==row_size):Â  Â  Â  Â  Â  Â  print(""*"",end="""")Â  Â  Â  Â  else:Â  Â  Â  Â  Â  Â  print("" "", end="""")Â  Â  print(""\r"")"
3033,Program to check two strings are anagrams or not,"
str=input(""Enter the 1st String:"")
str2=input(""Enter the 2nd String:"")
if len(str) != len(str2):
Â  Â  print(""Strings are not an Anagrams."")
else:
Â  Â  count = 0
Â  Â  str3=''.join(sorted(str))
Â  Â  str4=''.join(sorted(str2))
Â  Â  for i in range(len(str)):
Â  Â  Â  Â  if str3[i] != str4[i]:
Â  Â  Â  Â  Â  Â  count=1
Â  Â  if count == 1:
Â  Â  Â  Â  print(""Input strings are not an anagram"")
Â  Â  else:
Â  Â  Â  Â  print(""Input strings are an anagram"")"
3034,Python Program to Implement Introsort,"def introsort(alist):
    maxdepth = (len(alist).bit_length() - 1)*2
    introsort_helper(alist, 0, len(alist), maxdepth)
Â 
def introsort_helper(alist, start, end, maxdepth):
    if end - start <= 1:
        return
    elif maxdepth == 0:
        heapsort(alist, start, end)
    else:
        p = partition(alist, start, end)
        introsort_helper(alist, start, p + 1, maxdepth - 1)
        introsort_helper(alist, p + 1, end, maxdepth - 1)
Â 
def partition(alist, start, end):
    pivot = alist[start]
    i = start - 1
    j = end
Â 
    while True:
        i = i + 1
        while alist[i] < pivot:
            i = i + 1
        j = j - 1
        while alist[j] > pivot:
            j = j - 1
Â 
        if i >= j:
            return j
Â 
        swap(alist, i, j)
Â 
def swap(alist, i, j):
    alist[i], alist[j] = alist[j], alist[i]
Â 
def heapsort(alist, start, end):
    build_max_heap(alist, start, end)
    for i in range(end - 1, start, -1):
        swap(alist, start, i)
        max_heapify(alist, index=0, start=start, end=i)
Â 
def build_max_heap(alist, start, end):
    def parent(i):
        return (i - 1)//2
    length = end - start
    index = parent(length - 1)
    while index >= 0:
        max_heapify(alist, index, start, end)
        index = index - 1
Â 
def max_heapify(alist, index, start, end):
    def left(i):
        return 2*i + 1
    def right(i):
        return 2*i + 2
Â 
    size = end - start
    l = left(index)
    r = right(index)
    if (l < size and alist[start + l] > alist[start + index]):
        largest = l
    else:
        largest = index
    if (r < size and alist[start + r] > alist[start + largest]):
        largest = r
    if largest != index:
        swap(alist, start + largest, start + index)
        max_heapify(alist, largest, start, end)
Â 
Â 
alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
introsort(alist)
print('Sorted list: ', end='')
print(alist)"
3035,Python Program to Search the Number of Times a Particular Number Occurs in a List,"a=[]
n=int(input(""Enter number of elements:""))
for i in range(1,n+1):
    b=int(input(""Enter element:""))
    a.append(b)
k=0
num=int(input(""Enter the number to be counted:""))
for j in a:
    if(j==num):
        k=k+1
print(""Number of times"",num,""appears is"",k)"
3036,Print perfect square numbers in a given range,"
import math
print(""Enter range:"")
range1=int(input())
range2=int(input())
print(""Perfect squares between "",range1,"" and "",range2,"" are: "")
for i in range(range1,range2+1):
Â  Â  sqr=math.sqrt(i)
Â  Â  if sqr-math.floor(sqr)==0:
Â  Â  Â  Â  print(i,end="" "")Â 
"
3037,Find maximum and minimum elements in array using recursion,"import sysdef FindMax(arr,n):Â  Â  if n == 1:Â  Â  Â  Â  return arr[0]Â  Â  return max(arr[n - 1], FindMax(arr, n - 1))def FindMin(arr,n):Â  Â  if n==1:Â  Â  Â  Â  return arr[0]Â  Â  return min(arr[n-1], FindMin(arr, n-1))arr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):Â  Â  num = int(input())Â  Â  arr.append(num)print(""Maximum Element of the array is: "",FindMax(arr,len(arr)))print(""Minimum Element of the array is: "",FindMin(arr,len(arr)))"
3038,Write a program to print the alphabet pattern,"

print(""Enter the row and column size:"");
row_size=input()
for out in range(ord(row_size),ord('A')-1,-1):
Â  Â  for i in range(ord(row_size),ord('A')-1,-1):
Â  Â  Â  Â  print(chr(i),end="" "")
Â  Â  print(""\r"")
"
3039,Capitalize First letter of each word in String,"
str=input(""Enter the String:"")
j=0
newStr=""""
for i in range(len(str)):
Â  Â  if i==0 or str[i-1]==' ':
Â  Â  Â  Â  ch=str[i].upper()
Â  Â  Â  Â  newStr+=ch
Â  Â  else:
Â  Â  Â  Â  newStr = newStr + str[i]
print(""Your String is:"", newStr)"
3040,Python Program to Compute a Polynomial Equation given that the Coefficients of the Polynomial are stored in a List,"import math
print(""Enter the coefficients of the form ax^3 + bx^2 + cx + d"")
lst=[]
for i in range(0,4):
    a=int(input(""Enter coefficient:""))
    lst.append(a)
x=int(input(""Enter the value of x:""))
sum1=0
j=3
for i in range(0,3):
    while(j>0):
        sum1=sum1+(lst[i]*math.pow(x,j))
        break
    j=j-1
sum1=sum1+lst[3]
print(""The value of the polynomial is:"",sum1)"
3041,"Write a program which accepts a string as input to print ""Yes"" if the string is ""yes"" or ""YES"" or ""Yes"", otherwise print ""No"". 
:","Solution
s= raw_input()
if s==""yes"" or s==""YES"" or s==""Yes"":
    print ""Yes""
else:
    print ""No""



"
3042,Convert Uppercase to Lowercase using string function,"
str=input(""Enter the String(Upper case):"")
print(""Lower case String is:"", str.lower())"
3043,Program to print inverted pyramid star pattern,"
print(""Enter the row size:"")
row_size=int(input())
for out in range(row_size+1):
Â  Â  for j in range(out):
Â  Â  Â  Â  print("" "",end="""")
Â  Â  for p in range(row_size,out,-1):
Â  Â  Â  Â  print(""* "",end="""")
Â  Â  print(""\r"")"
3044,Python Program to Find the Sum of All Nodes in a Binary Tree,"class BinaryTree:
    def __init__(self, key=None):
        self.key = key
        self.left = None
        self.right = None
Â 
    def set_root(self, key):
        self.key = key
Â 
    def inorder(self):
        if self.left is not None:
            self.left.inorder()
        print(self.key, end=' ')
        if self.right is not None:
            self.right.inorder()
Â 
    def insert_left(self, new_node):
        self.left = new_node
Â 
    def insert_right(self, new_node):
        self.right = new_node
Â 
    def search(self, key):
        if self.key == key:
            return self
        if self.left is not None:
            temp =  self.left.search(key)
            if temp is not None:
                return temp
        if self.right is not None:
            temp =  self.right.search(key)
            return temp
        return None
Â 
Â 
def sum_nodes(node):
    if node is None:
        return 0
    return node.key + sum_nodes(node.left) + sum_nodes(node.right)
Â 
Â 
btree = None
Â 
print('Menu (this assumes no duplicate keys)')
print('insert <data> at root')
print('insert <data> left of <data>')
print('insert <data> right of <data>')
print('sum')
print('quit')
Â 
while True:
    print('inorder traversal of binary tree: ', end='')
    if btree is not None:
        btree.inorder()
    print()
Â 
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
    if operation == 'insert':
        data = int(do[1])
        new_node = BinaryTree(data)
        suboperation = do[2].strip().lower() 
        if suboperation == 'at':
                btree = new_node
        else:
            position = do[4].strip().lower()
            key = int(position)
            ref_node = None
            if btree is not None:
                ref_node = btree.search(key)
            if ref_node is None:
                print('No such key.')
                continue
            if suboperation == 'left':
                ref_node.insert_left(new_node)
            elif suboperation == 'right':
                ref_node.insert_right(new_node)
Â 
    elif operation == 'sum':
        print('Sum of nodes in tree: {}'.format(sum_nodes(btree)))
Â 
    elif operation == 'quit':
        break"
3045,Find sum of even numbers using recursion in an array,"sum=0def SumOfEvenElement(arr,n):Â  Â  global sumÂ  Â  if(n>0):Â  Â  Â  Â  i=n-1Â  Â  Â  Â  if(arr[i]%2==0):Â  Â  Â  Â  Â  Â  sum=sum+arr[i]Â  Â  Â  Â  SumOfEvenElement(arr,i)Â  Â  return sumarr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):Â  Â  num = int(input())Â  Â  arr.append(num)print(""Sum of even Element is:"",SumOfEvenElement(arr,n))"
3046,"
Write a program to read an ASCII string and to convert it to a unicode string encoded by utf-8.
:","
s = raw_input()
u = unicode( s ,""utf-8"")
print u

"
3047,Program to Find the sum of a lower triangular matrix,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

#Calculate sum of lower triangular matrix element
sum=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i<j:
            sum += matrix[i][j]

# display the sum of a lower triangular matrix element
print(""Sum of Lower Triangular Matrix Elements is: "",sum)"
3048, Program to print the Inverted Half Pyramid Number Pattern,"
row_size=int(input(""Enter the row size:""))
for out in range(row_size,0,-1):
Â  Â  for in1 in range(row_size,out,-1):
Â  Â  Â  Â  print("" "",end="""")
Â  Â  for in2 in range(1, out+1):
Â  Â  Â  Â  print(in2,end="""")
Â  Â  print(""\r"")
"
3049,Find the median of two unsorted arrays,"def Find_median(arr,arr2,size,size2):Â  Â  m_size = size + size2Â  Â  merge_arr = [0]*m_sizeÂ  Â  i=0Â  Â  k=0Â  Â  j=0Â  Â  while k<m_size:Â  Â  Â  Â if i<size:Â  Â  Â  Â  Â  Â merge_arr[k] = arr[i]Â  Â  Â  Â  Â  Â i+=1Â  Â  Â  Â  Â  Â k+=1Â  Â  Â  Â if j<size2:Â  Â  Â  Â  Â  Â merge_arr[k] = arr2[j]Â  Â  Â  Â  Â  Â j+=1Â  Â  Â  Â  Â  Â k+=1Â  Â  merge_arr.sort()Â  Â  if size % 2 == 1:Â  Â  Â  Â  median = merge_arr[size // 2]Â  Â  Â  Â  print(""\nMedian= "", median)Â  Â  else:Â  Â  Â  Â  median = (merge_arr[m_size // 2] + (merge_arr[(m_size // 2) - 1])) / 2.0Â  Â  Â  Â  print(""\nMedian= "", median)arr=[]arr2=[]size = int(input(""Enter the size of the 1st array: ""))size2 = int(input(""Enter the size of the 2nd array: ""))print(""Enter the Element of the 1st array:"")for i in range(0,size):Â  Â  num = int(input())Â  Â  arr.append(num)print(""Enter the Element of the 2nd array:"")for i in range(0,size2):Â  Â  num2 = int(input())Â  Â  arr2.append(num2)Find_median(arr,arr2,size,size2)"
3050,Program to Find the multiplication of two matrices,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]
# Taking input of the 2nd matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])

sum=0
# Compute Multiplication of two matrices
mul_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        for k in range(row_size):
            sum+=matrix[i][j]*matrix1[i][j]
        mul_matrix[i][j]=sum

# display the Multiplication of two matrices
print(""Multiplication of the two Matrices is:"")
for m in mul_matrix:
    print(m)"
3051,Python Program to Print all Integers that Aren't Divisible by Either 2 or 3 and Lie between 1 and 50.,"Â 
for i in range(0,51):
    if(i%2!=0&i%3!=0):
        print(i)"
3052,Program to Find Surface area and volume of a sphere,"radius=int(input(""Enter radius of a sphere :""))

surfaceArea=4*3.14*radius*radius
volume=(4/3)*3.14*radius*radius*radius

print(""Surface Area of the sphere ="",surfaceArea)
print(""Volume of the sphere ="",volume)"
3053,Find out all Neon numbers present within a given range,"
print(""Enter a range:"")
range1=int(input())
range2=int(input())
print(""Neon numbers between "",range1,"" and "",range2,"" are: "")
for i in range(range1,range2+1):
Â  Â  sqr =i*i
Â  Â  # Sum of digit
Â  Â  sum = 0
Â  Â  while sqr != 0:
Â  Â  Â  Â  rem = sqr % 10
Â  Â  Â  Â  sum += rem
Â  Â  Â  Â  sqr //= 10

Â  Â  if sum == i:
Â  Â  Â  Â  print(i,end="" "")"
3054,Find the First Capital Letter in a given String,"
str=input(""Enter the String:"")
ch=' '
for i in range(len(str)):
Â  Â  if str[i] >= 'A' and str[i] <= 'Z':
Â  Â  Â  Â  ch = str[i]
Â  Â  Â  Â  break
Â  Â  else:
Â  Â  Â  Â  continue
print(""First capital letter in a given String is: "", ch)"
3055,Convert Lowercase to Uppercase without using the inbuilt function,"
str=input(""Enter the String(Lower case):"")
i=0
ch=''
#convert capital letter string to small letter string
while len(str)>i:
Â  Â  if str[i]>='a' and str[i]<='z' :
Â  Â  Â  Â  ch+=chr(ord(str[i])-32)
Â  Â  else:
Â  Â  Â  Â  ch += chr(ord(str[i]))
Â  Â  i+=1
print(""Lower case String is:"", ch)"
3056,Find out all Pronic numbers present within a given range,"
import math
print(""Enter a range:"")
range1=int(input())
range2=int(input())
print(""Pronic numbers between "",range1,"" and "",range2,"" are: "")
for i in range(range1,range2+1):
Â  Â  flag = 0
Â  Â  for j in range(0, i + 1):
Â  Â  Â  Â  if j * (j + 1) == i:
Â  Â  Â  Â  Â  Â  flag = 1
Â  Â  Â  Â  Â  Â  break
Â  Â  if flag == 1:
Â  Â  Â  Â  print(i,end="" "")"
3057,Python Program to Display the Nodes of a Linked List in Reverse using Recursion,"class Node:
    def __init__(self, data):
       self.data = data
       self.next = None
Â 
class LinkedList:
    def __init__(self):
        self.head = None
        self.last_node = None
Â 
    def append(self, data):
        if self.last_node is None:
            self.head = Node(data)
            self.last_node = self.head
        else:
            self.last_node.next = Node(data)
            self.last_node = self.last_node.next
Â 
    def display_reversed(self):
        self.display_reversed_helper(self.head)
Â 
    def display_reversed_helper(self, current):
        if current is None:
            return
Â 
        self.display_reversed_helper(current.next)
        print(current.data, end = ' ')
Â 
a_llist = LinkedList()
n = int(input('How many elements would you like to add? '))
for i in range(n):
    data = int(input('Enter data item: '))
    a_llist.append(data)
Â 
print('The reversed linked list: ', end = '')
a_llist.display_reversed()"
3058,Python Program to Check if a String is a Palindrome or Not,"string=raw_input(""Enter string:"")
if(string==string[::-1]):
      print(""The string is a palindrome"")
else:
      print(""The string isn't a palindrome"")"
3059,Find out all Evil numbers present within a given range,"
print(""Enter a range:"")
range1=int(input())
range2=int(input())
print(""Evil numbers between "",range1,"" and "",range2,"" are: "")
for i in range(range1,range2+1):
Â  Â  one_c = 0
Â  Â  num=i
Â  Â  while num != 0:
Â  Â  Â  Â  if num % 2 == 1:
Â  Â  Â  Â  Â  Â  one_c += 1
Â  Â  Â  Â  num //= 2
Â  Â  if one_c % 2 == 0:
Â  Â  Â  Â  print(i,end="" "")"
3060,Program to Find Nth Abundant Number,"
rangenumber=int(input(""Enter a Nth Number:""))
c = 0
letest = 0
num = 1
while c != rangenumber:
Â  Â  num1 = num
Â  Â  sum = 0
Â  Â  for i in range(1, num1):
Â  Â  Â  Â  if num1 % i == 0:
Â  Â  Â  Â  Â  Â  sum = sum + i
Â  Â  if sum>num:
Â  Â  Â  Â  c+=1
Â  Â  Â  Â  letest = num

Â  Â  num = num + 1
print(rangenumber,""th Abundant number is "",letest)"
3061,Python Program to Implement Dequeue,"class Dequeue:
    def __init__(self):
        self.items = []
Â 
    def is_empty(self):
        return self.items == []
Â 
    def append(self, data):
        self.items.append(data)
Â 
    def append_left(self, data):
        self.items.insert(0, data)
Â 
    def pop(self):
        return self.items.pop()
Â 
    def pop_left(self):
        return self.items.pop(0)
Â 
Â 
q = Dequeue()
print('Menu')
print('append <value>')
print('appendleft <value>')
print('pop')
print('popleft')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
    if operation == 'append':
        q.append(int(do[1]))
    elif operation == 'appendleft':
        q.append_left(int(do[1]))
    elif operation == 'pop':
        if q.is_empty():
            print('Dequeue is empty.')
        else:
            print('Popped value from right: ', q.pop())
    elif operation == 'popleft':
        if q.is_empty():
            print('Dequeue is empty.')
        else:
            print('Popped value from left: ', q.pop_left())
    elif operation == 'quit':
        break"
3062,Check a given number is an Automorphic number or not,"


'''Write
a Python programÂ to check whether a given number is An Automorphic
number or not. orÂ Write a programÂ toÂ check whether
a given number is An Automorphic number or not using Python '''

num=int(input(""Enter a number:""))
sqr=num*num
flag=0
while num!=0:
Â  Â  if(num%10 != sqr%10):
Â  Â  Â  Â flag=-1
Â  Â  Â  Â break
Â  Â  num=int(num/10)
Â  Â  sqr=int(sqr/10)
if(flag==0):
Â  Â print(""It is an Automorphic Number"")
else:
Â  Â print(""It is not an Automorphic Number"")

"
3063,Merging two unsorted arrays of different lengths,"def Merge_Array(arr,arr2,size,size2):Â  Â  m_size = size + size2Â  Â  merge_arr = [0]*m_sizeÂ  Â  i=0Â  Â  k=0Â  Â  j=0Â  Â  while k<m_size:Â  Â  Â  Â if i<size:Â  Â  Â  Â  Â  Â merge_arr[k] = arr[i]Â  Â  Â  Â  Â  Â i+=1Â  Â  Â  Â  Â  Â k+=1Â  Â  Â  Â if j<size2:Â  Â  Â  Â  Â  Â merge_arr[k] = arr2[j]Â  Â  Â  Â  Â  Â j+=1Â  Â  Â  Â  Â  Â k+=1Â  Â  print(""After Merge two Array element are:"")Â  Â  for p in range(0, m_size):Â  Â  Â  Â  print(merge_arr[p],end="" "")arr=[]arr2=[]size = int(input(""Enter the size of the 1st array: ""))size2 = int(input(""Enter the size of the 2nd array: ""))print(""Enter the Element of the 1st array:"")for i in range(0,size):Â  Â  num = int(input())Â  Â  arr.append(num)print(""Enter the Element of the 2nd array:"")for i in range(0,size2):Â  Â  num2 = int(input())Â  Â  arr2.append(num2)Merge_Array(arr,arr2,size,size2)"
3064,Python Program to Print the Pascal's triangle for n number of rows given by the user,"n=int(input(""Enter number of rows: ""))
a=[]
for i in range(n):
    a.append([])
    a[i].append(1)
    for j in range(1,i):
        a[i].append(a[i-1][j-1]+a[i-1][j])
    if(n!=0):
        a[i].append(1)
for i in range(n):
    print(""   ""*(n-i),end="" "",sep="" "")
    for j in range(0,i+1):
        print('{0:6}'.format(a[i][j]),end="" "",sep="" "")
    print()"
3065,Python Program to Find the Sum of the Digits of the Number Recursively,"l=[]
def sum_digits(b):
    if(b==0):
        return l
    dig=b%10
    l.append(dig)
    sum_digits(b//10)
n=int(input(""Enter a number: ""))
sum_digits(n)
print(sum(l))"
3066,Check a given number is an Armstrong Number,"


'num=int(input(""Enter a number:""))
num2=num
sum=0
while(num!=0):
Â  Â rem=num%10
Â  Â num=int(num/10)
Â  Â sum=sum+rem*rem*rem
if sum==num2:
Â  Â print(""It is an Armstrong Number"")
else:
Â  Â print(""It is not an Armstrong Number"")



"
3067,Python Program to Implement Circular Doubly Linked List,"class Node:
    def __init__(self, data):
       self.data = data
       self.next = None
       self.prev = None
Â 
Â 
class CircularDoublyLinkedList:
    def __init__(self):
        self.first = None
Â 
    def get_node(self, index):
        current = self.first
        for i in range(index):
            current = current.next
            if current == self.first:
                return None
        return current
Â 
    def insert_after(self, ref_node, new_node):
        new_node.prev = ref_node
        new_node.next = ref_node.next
        new_node.next.prev = new_node
        ref_node.next = new_node
Â 
    def insert_before(self, ref_node, new_node):
        self.insert_after(ref_node.prev, new_node)
Â 
    def insert_at_end(self, new_node):
        if self.first is None:
            self.first = new_node
            new_node.next = new_node
            new_node.prev = new_node
        else:
            self.insert_after(self.first.prev, new_node)
Â 
    def insert_at_beg(self, new_node):
        self.insert_at_end(new_node)
        self.first = new_node
Â 
    def remove(self, node):
        if self.first.next == self.first:
            self.first = None
        else:
            node.prev.next = node.next
            node.next.prev = node.prev
            if self.first == node:
                self.first = node.next
Â 
    def display(self):
        if self.first is None:
            return
        current = self.first
        while True:
            print(current.data, end = ' ')
            current = current.next
            if current == self.first:
                break
Â 
Â 
a_cdllist = CircularDoublyLinkedList()
Â 
print('Menu')
print('insert <data> after <index>')
print('insert <data> before <index>')
print('insert <data> at beg')
print('insert <data> at end')
print('remove <index>') 
print('quit')
Â 
while True:
    print('The list: ', end = '')
    a_cdllist.display()
    print()
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
Â 
    if operation == 'insert':
        data = int(do[1])
        position = do[3].strip().lower()
        new_node = Node(data)
        suboperation = do[2].strip().lower() 
        if suboperation == 'at':
            if position == 'beg':
                a_cdllist.insert_at_beg(new_node)
            elif position == 'end':
                a_cdllist.insert_at_end(new_node)
        else:
            index = int(position)
            ref_node = a_cdllist.get_node(index)
            if ref_node is None:
                print('No such index.')
                continue
            if suboperation == 'after':
                a_cdllist.insert_after(ref_node, new_node)
            elif suboperation == 'before':
                a_cdllist.insert_before(ref_node, new_node)
Â 
    elif operation == 'remove':
        index = int(do[1])
        node = a_cdllist.get_node(index)
        if node is None:
            print('No such index.')
            continue
        a_cdllist.remove(node)
Â 
    elif operation == 'quit':
        break"
3068,Python Program to Copy the Contents of One File into Another,"with open(""test.txt"") as f:
    with open(""out.txt"", ""w"") as f1:
        for line in f:
            f1.write(line)"
3069,Add between 2 numbers without using arithmetic operators,"

'''Write a Python
programÂ toÂ add between 2 numbers without using arithmetic operators.
orÂ Write a programÂ toÂ add between 2 numbers without using
arithmetic operators using Python '''

print(""Enter first number:"")
num1=int(input())
print(""EnterÂ  second number:"")
num2=int(input())
while num2 != 0:
Â  Â  Â  Â carry= num1 & num2
Â  Â  Â  Â num1= num1 ^ num2
Â  Â  Â  Â num2=carry << 1
print(""Addition of two number is "",num1)Â 
"
3070,Write a program to sum of all digits of a number.,"

'''Write
a Python programÂ to theÂ sum of all digits of a number. orÂ 

Â Â  Write a programÂ to theÂ sum of all
digits of a number using Python '''

n=int(input(""Enter a number:""))
sum=0
while n>0:
Â  Â rem=n%10
Â  Â sum=sum+rem
Â  Â n=int(n/10)

print(""The sum of digits of number is:"", sum)Â 
"
3071,Python Program to Find the Sum of the Series: 1 + x^2/2 + x^3/3 + â€¦ x^n/n,"n=int(input(""Enter the number of terms:""))
x=int(input(""Enter the value of x:""))
sum1=1
for i in range(2,n+1):
    sum1=sum1+((x**i)/i)
print(""The sum of series is"",round(sum1,2))"
3072,Program to Calculate the surface area and volume of a Cuboid ,"

l=int(input(""Enter the length of the cuboid:""))
h=int(input(""Enter the height of the cuboid:""))
w=int(input(""Enter the weight of the cuboid:""))
surface_area=2*((l*w)+(l*h)+(h*w))
volume=l*w*h
print(""Surface Area of the cuboid = "",surface_area)
print(""Volume of the cuboid = "",volume)
"
3073,Find frequency of characters in a string,"
str=input(""Enter the String:"")
arr=[0]*256
for i in range(len(str)):
Â  Â  if str[i]==' ':
Â  Â  Â  Â  continue
Â  Â  num=ord(str[i])
Â  Â  arr[num]+=1
print(""Frequency of character in a string are:"")
for i in range(256):
Â  Â  if arr[i]!=0:
Â  Â  Â  Â  print((chr)(i),"" occurs "",arr[i],"" times"")"
3074,Program to Find the sum of series 1/1!+1/2!+1/3!.....+1/N!,"n=int(input(""Enter the range of number:""))sum=0.0fact=1for i in range(1,n+1):Â  Â  fact *= iÂ  Â  sum+=1.0/factprint(""The sum of the series = "",sum)"
3075,Find reverse of a number using recursion,"
def reverse(num):
Â  Â  if num<10:
Â  Â  Â  print(num)
Â  Â  Â  return
Â  Â  else:
Â  Â  Â  Â  print(num % 10,end="""")
Â  Â  Â  Â  reverse(int(num / 10))
print(""Enter your number:"")
num=int(input())
print(""Reverse of the input number is:"")
reverse(num)Â 
"
3076,Python Program that Displays which Letters are in the Two Strings but not in Both,"s1=raw_input(""Enter first string:"")
s2=raw_input(""Enter second string:"")
a=list(set(s1)^set(s2))
print(""The letters are:"")
for i in a:
    print(i)"
3077,Program to Find the sum of series 1/2+2/3+3/4.....+(N-1)/N,"n=int(input(""Enter the range of number:""))sum=0.0for i in range(1,n+1):Â  Â  sum += i / (i + 1)print(""The sum of the series = "",sum)"
3078,Python Program to Find the Sum of Sine Series,"import math
def sin(x,n):
    sine = 0
    for i in range(n):
        sign = (-1)**i
        pi=22/7
        y=x*(pi/180)
        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign
    return sine
x=int(input(""Enter the value of x in degrees:""))
n=int(input(""Enter the number of terms:""))
print(round(sin(x,n),2))"
3079,Python Program to Create a List of Tuples with the First Element as the Number and Second Element as the Square of the Number,"l_range=int(input(""Enter the lower range:""))
u_range=int(input(""Enter the upper range:""))
a=[(x,x**2) for x in range(l_range,u_range+1)]
print(a)"
3080,Python Program to Clear the Rightmost Set Bit of a Number,"def clear_rightmost_set_bit(n):
    """"""Clear rightmost set bit of n and return it.""""""
    return n & (n - 1)
Â 
Â 
n = int(input('Enter a number: '))
ans = clear_rightmost_set_bit(n)
print('n with its rightmost set bit cleared equals:', ans)"
3081,Print a string using an array,"
import array
arr=array.array('u', ['c','s','i','n','f','o','3','6','0','.','c','o','m'])
len=len(arr)
for i in range(0,len):
Â  Â  print(arr[i],end="""")"
3082,Check whether a given number is a Harshad number or not,"


'''Write
a Python programÂ to check whether a given number is a Harshad number or
not. orÂ Write a programÂ toÂ check whether
a given number is a Harshad number or not
using Python '''



num=int(input(""Enter a number:""))
num2=num
sum=0
while num!=0:
Â  rem=num%10
Â  num=int(num/10)
Â  sum=sum+rem
if(num2%sum==0):
Â  Â print(""It is a Harshad Number"")
else:
print(""It is not a Harshad Number"")Â 
"
3083,delete an element from an array,"
arr=[]
temp=0
pos=0
size = int(input(""Enter the size of the array: ""))
print(""Enter the Element of the array:"")
for i in range(0,size):
Â  Â  num = int(input())
Â  Â  arr.append(num)
print(""Enter the element to be deleted:"")
ele=int(input())
print(""Before deleting array elements are:"")
for i in range(0,size):
Â  Â  print(arr[i],end="" "")
for i in range(0,size):
Â  Â  if arr[i] == ele:
Â  Â  Â  Â  Â  Â  pos = i
Â  Â  Â  Â  Â  Â  temp = 1

if temp==1:
Â  Â  arr.pop(pos)
print(""\nAfter deleting array elements are:"")
print(arr)"
3084,"    Python has many built-in functions, and if you do not know how to use it, you can read document online or find some books. But Python has a built-in document function for every built-in functions.
    Please write a program to print some Python built-in functions documents, such as abs(), int(), raw_input()
    And add document for your own function
    :","print abs.__doc__
print int.__doc__
print raw_input.__doc__

def square(num):
    '''Return the square value of the input number.
    
    The input number must be integer.
    '''
    return num ** 2

print square(2)
print square.__doc__
"
3085,Python Program to Implement Binary Heap,"class BinaryHeap:
    def __init__(self):
        self.items = []
Â 
    def size(self):
        return len(self.items)
Â 
    def parent(self, i):
        return (i - 1)//2
Â 
    def left(self, i):
        return 2*i + 1
Â 
    def right(self, i):
        return 2*i + 2
Â 
    def get(self, i):
        return self.items[i]
Â 
    def get_max(self):
        if self.size() == 0:
            return None
        return self.items[0]
Â 
    def extract_max(self):
        if self.size() == 0:
            return None
        largest = self.get_max()
        self.items[0] = self.items[-1]
        del self.items[-1]
        self.max_heapify(0)
        return largest
Â 
    def max_heapify(self, i):
        l = self.left(i)
        r = self.right(i)
        if (l <= self.size() - 1 and self.get(l) > self.get(i)):
            largest = l
        else:
            largest = i
        if (r <= self.size() - 1 and self.get(r) > self.get(largest)):
            largest = r
        if (largest != i):
            self.swap(largest, i)
            self.max_heapify(largest)
Â 
    def swap(self, i, j):
        self.items[i], self.items[j] = self.items[j], self.items[i]
Â 
    def insert(self, key):
        index = self.size()
        self.items.append(key)
Â 
        while (index != 0):
            p = self.parent(index)
            if self.get(p) < self.get(index):
                self.swap(p, index)
            index = p
Â 
Â 
bheap = BinaryHeap()
Â 
print('Menu')
print('insert <data>')
print('max get')
print('max extract')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
    if operation == 'insert':
        data = int(do[1])
        bheap.insert(data)
    elif operation == 'max':
        suboperation = do[1].strip().lower()
        if suboperation == 'get':
            print('Maximum value: {}'.format(bheap.get_max()))
        elif suboperation == 'extract':
            print('Maximum value removed: {}'.format(bheap.extract_max()))
Â 
    elif operation == 'quit':
        break"
3086,Program to Find the sum of series 2+4+6+8.....+N,"n=int(input(""Enter the range of number:""))sum=0i=0while i<=n:Â  Â  sum+=iÂ  Â  i+=2print(""The sum of the series = "",sum)"
3087,Python Program to Find the LCM of Two Numbers Using Recursion,"def lcm(a,b):
    lcm.multiple=lcm.multiple+b
    if((lcm.multiple % a == 0) and (lcm.multiple % b == 0)):
        return lcm.multiple;
    else:
        lcm(a, b)
    return lcm.multiple
lcm.multiple=0
a=int(input(""Enter first number:""))
b=int(input(""Enter second number:""))
if(a>b):
    LCM=lcm(b,a)
else:
    LCM=lcm(a,b)
print(LCM)"
3088,Program to read and display a Matrix,"# Get size of matrixrow_size=int(input(""Enter the row Size Of the Matrix:""))col_size=int(input(""Enter the columns Size Of the Matrix:""))matrix=[]# Taking input of the matrixprint(""Enter the Matrix Element:"")for i in range(row_size):Â Â Â Â matrix.append([int(j) for j in input().split()])# display the Matrixprint(""Given Matrix is:"")for m in matrix:Â Â Â Â print(m)"
3089,Find the type of the array,"
arr=[]
odd_type=0
even_type=0
size = int(input(""Enter the size of the array: ""))
print(""Enter the Element of the array:"")
for i in range(0,size):
Â  Â  num = int(input())
Â  Â  arr.append(num)
print(""Array elements are:"")
for i in range(0,size):
Â  Â  print(arr[i],end="" "")
for i in range(0,size):
Â  Â  if arr[i] % 2 == 0:
Â  Â  Â  Â  even_type +=1
Â  Â  else:
Â  Â  Â  Â  odd_type +=1
if even_type==size:
Â  Â  Â  Â  print(""\nEven type array"")
elif odd_type==size:
Â  Â  Â  Â  print(""\nodd type array"")
else:
Â  Â  Â  Â  print(""\nMixed array"")"
3090,Find out all Harshad numbers present within a given range,"

'''Write a Python
programÂ toÂ find out all Harshad numbers present within a given range.
orÂ Write a programÂ toÂ find out all Harshad numbers present
within a given range using Python '''


print(""Enter a range:"")
range1=int(input())
range2=int(input())
print(""Harshad numbers between "",range1,"" and "",range2,"" are: "")
for i in range(range1,range2+1):
Â  Â  num2=i
Â  Â  num=i
Â  Â  sum=0
Â  Â  while num!=0:
Â  Â  Â  Â  rem=num%10
Â  Â  Â  Â  num=int(num/10)
Â  Â  Â  Â  sum=sum+rem
Â  Â  if(num2%sum==0):
Â  Â  Â  Â  print(i,end="" "")
"
3091,Find length of string using recursion,"def StringLength(str, i):Â  Â  if (str[i] == '\0'):Â  Â  Â  Â  return 0Â  Â  else:Â  Â  Â  Â  return (1 + StringLength(str, i + 1))str=input(""Enter your String:"")str+='\0'print(""Length of the String is: "",StringLength(str,0))"
3092,"Program to print series 1,-2,6,-15,31...N","n=int(input(""Enter the range of number(Limit):""))i=1pr=1while i<=n:Â  Â  if(i%2==0):Â  Â  Â  Â  print(-1*pr,end="" "")Â  Â  else:Â  Â  Â  Â  print(pr, end="" "")Â  Â  pr+=pow(i,2)Â  Â  i+=1"
3093,Program to compute the area and perimeter of Pentagon,"

import math
print(""Enter the length of the side:"")
a=int(input())
area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0
perimeter=(5*a)
print(""Area of the Pentagon = "",area)

print(""Perimeter of the Pentagon = "",perimeter)
"
3094,Python Program to Find the Sum of Cosine Series,"import math
def cosine(x,n):
    cosx = 1
    sign = -1
    for i in range(2, n, 2):
        pi=22/7
        y=x*(pi/180)
        cosx = cosx + (sign*(y**i))/math.factorial(i)
        sign = -sign
    return cosx
x=int(input(""Enter the value of x in degrees:""))
n=int(input(""Enter the number of terms:""))
print(round(cosine(x,n),2))"
3095,Find the smallest element in the array,"
import sys
arr=[]
size = int(input(""Enter the size of the array: ""))
print(""Enter the Element of the array:"")
for i in range(0,size):
Â  Â  num = int(input())
Â  Â  arr.append(num)
min=sys.maxsize
for j in range(0,size):
Â  Â  if (arr[j] <= min):
Â  Â  Â  Â  min = arr[j]

print(""The smallest element of array: "",min)"
3096,Find the sum of all elements in a 2D Array,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

# Calculate sum of given matrix Elements
sum=0
for i in range(0,row_size):
    for j in range(0,col_size):
        sum+=matrix[i][j]

# Display The Sum Of Given Matrix Elements
print(""Sum of the Given Matrix Elements is: "",sum)"
3097,"
Write a program to solve a classic ancient Chinese puzzle: 
We count 35 heads and 94 legs among the chickens and rabbits in a farm. How many rabbits and how many chickens do we have?

Hint:","
def solve(numheads,numlegs):
    ns='No solutions!'
    for i in range(numheads+1):
        j=numheads-i
        if 2*i+4*j==numlegs:
            return i,j
    return ns,ns

numheads=35
numlegs=94
solutions=solve(numheads,numlegs)
print solutions

"
3098,Write a program to print the alphabet pattern,"

print(""Enter the row and column size:"");
row_size=input()
for out in range(ord(row_size),ord('A')-1,-1):
Â  Â  for i in range(ord(row_size),ord('A')-1,-1):
Â  Â  Â  Â  print(chr(i),end="" "")
Â  Â  print(""\r"")
"
3099,Check whether a given number is an Abundant number or not,"


'''Write
a Python programÂ to check whether a given number is an Abundant number
or not. orÂ Write a programÂ toÂ check whether
a given number is an Abundant number or not
using Python '''



num=int(input(""Enter a number:""))
sum=0
for i in range(1,num):
Â  Â if(num%i==0):
Â  Â  Â  sum=sum+i
if sum>num:
Â  Â print(""It is an Abundant Number"")
else:

Â  Â print(""It is not an Abundant Number"")


"
3100,Program to Find sum of series 1-2+3-4+5...+N,"n=int(input(""Enter the range of number:""))sum=0for i in range(1,n+1):Â  Â  if i % 2 == 0:Â  Â  Â  Â  sum -= iÂ  Â  else:Â  Â  Â  Â  sum += iprint(""The sum of the series = "",sum)"
3101,Python Program to Read a List of Words and Return the Length of the Longest One,"a=[]
n= int(input(""Enter the number of elements in list:""))
for x in range(0,n):
    element=input(""Enter element"" + str(x+1) + "":"")
    a.append(element)
max1=len(a[0])
temp=a[0]
for i in a:
    if(len(i)>max1):
       max1=len(i)
       temp=i
print(""The word with the longest length is:"")
print(temp)"
3102,Print Average of Numbers in array at even position  ,"
arr=[]
cout=0
sum=0
size = int(input(""Enter the size of the array: ""))
print(""Enter the Element of the array:"")
for i in range(0,size):
Â  Â  num = int(input())
Â  Â  arr.append(num)
for j in range(1, size+1):
Â  Â  if (j % 2 == 0):
Â  Â  Â  Â  sum += arr[j]
Â  Â  Â  Â  cout+=1
avg = (sum / cout)
print(""Average of Numbers in array at even position is "", avg)"
3103,Print First 50 natural numbers using recursion,"def PrintNaturalNumber(n):Â  Â  if(n<=50):Â  Â  Â  Â  print(n,end="" "")Â  Â  Â  Â  PrintNaturalNumber(n + 1)n=1print(""First 50 Natural Numbers are:"")PrintNaturalNumber(n)"
3104,Check whether number is Disarium Number or Not,"
import math
num=int(input(""Enter a number:""))
num1 = num
c=0
while num1!=0:
Â  Â  num1 //= 10
Â  Â  c+=1
num1=num
sum=0
while num1!=0:
Â  Â  rem = num1 % 10
Â  Â  sum += math.pow(rem, c)
Â  Â  num1 //= 10
Â  Â  c-=1
if sum==num:
Â  Â  print(""It is a Disarium Number."")
else:
Â  Â print(""It is Not a Disarium Number."")"
3105,"Define a class with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.
:","def putNumbers(n):
    i = 0
    while i<n:
        j=i
        i=i+1
        if j%7==0:
            yield j

for i in reverse(100):
    print i
"
3106,Python Program to Map Two Lists into a Dictionary,"keys=[]
values=[]
n=int(input(""Enter number of elements for dictionary:""))
print(""For keys:"")
for x in range(0,n):
    element=int(input(""Enter element"" + str(x+1) + "":""))
    keys.append(element)
print(""For values:"")
for x in range(0,n):
    element=int(input(""Enter element"" + str(x+1) + "":""))
    values.append(element)
d=dict(zip(keys,values))
print(""The dictionary is:"")
print(d)"
3107,Print the Hollow Diamond Number Pattern,"row_size=int(input(""Enter the row size:""))print_control_x=row_size//2+1x=1for out in range(1,row_size+1):Â  Â  for inn in range(1,row_size+1):Â  Â  Â  Â  if inn==print_control_x or inn==row_size-print_control_x+1:Â  Â  Â  Â  Â  Â  print(x,end="""")Â  Â  Â  Â  else:Â  Â  Â  Â  Â  Â  print("" "", end="""")Â  Â  if out <= row_size // 2:Â  Â  Â  Â  print_control_x-=1Â  Â  Â  Â  x+=1Â  Â  else:Â  Â  Â  Â  print_control_x+=1Â  Â  Â  Â  x-=1Â  Â  print(""\r"")"
3108,Program to find the sum of an upper triangular matrix,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

#Calculate sum of Upper triangular matrix element
sum=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i>j:
            sum += matrix[i][j]

# display the sum of the Upper triangular matrix element
print(""Sum of Upper Triangular Matrix Elements is: "",sum)"
3109,Python Program to Check if a Number is an Armstrong Number,"Â 
n=int(input(""Enter any number: ""))
a=list(map(int,str(n)))
b=list(map(lambda x:x**3,a))
if(sum(b)==n):
    print(""The number is an armstrong number. "")
else:
    print(""The number isn't an arsmtrong number. "")"
3110,Python Program to Find the Fibonacci Series without Using Recursion,"a=int(input(""Enter the first number of the series ""))
b=int(input(""Enter the second number of the series ""))
n=int(input(""Enter the number of terms needed ""))
print(a,b,end="" "")
while(n-2):
    c=a+b
    a=b
    b=c
    print(c,end="" "")
    n=n-1"
3111,Python Program to Read a String from the User and Append it into a File,"fname = input(""Enter file name: "")
file3=open(fname,""a"")
c=input(""Enter string to append: \n"");
file3.write(""\n"")
file3.write(c)
file3.close()
print(""Contents of appended file:"");
file4=open(fname,'r')
line1=file4.readline()
while(line1!=""""):
    print(line1)
    line1=file4.readline()    
file4.close()"
3112,Remove all lowercase characters in the string,"
str=input(""Enter the String:"")
str2 = []
i = 0
while i < len(str):
Â  Â  ch = str[i]
Â  Â  if not ch.islower():
Â  Â  Â  Â  str2.append(ch)
Â  Â  i += 1
Final_String = ''.join(str2)
print(""After removing lowercase letter string is:"",Final_String)"
3113,Print prime numbers in a given range(1 to n),"
import math
print(""Enter a range to find all prime numbers within that range:"")
range1=int(input())
range2=int(input())
print(""Prime numbers between "",range1,"" and "",range2,"" are: "")
for j in range(range1,range2+1):Â 
Â  Â  Â count=0 for i in range(2,int(math.sqrt(j))+1):Â 
Â  Â  Â if j%i==0:Â 
Â  Â  Â  Â count+=1
if count==0:Â 
print(j,end="" "")
"
3114,Python Program to Check Common Letters in Two Input Strings,"s1=raw_input(""Enter first string:"")
s2=raw_input(""Enter second string:"")
a=list(set(s1)&set(s2))
print(""The common letters are:"")
for i in a:
    print(i)"
3115,Python Program to Print Nth Node from the last of a Linked List,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
Â 
Â 
class LinkedList:
    def __init__(self):
        self.head = None
        self.last_node = None
Â 
    def append(self, data):
        if self.last_node is None:
            self.head = Node(data)
            self.last_node = self.head
        else:
            self.last_node.next = Node(data)
            self.last_node = self.last_node.next
Â 
Â 
def length_llist(llist):
    length = 0
    current = llist.head
    while current:
        current = current.next
        length = length + 1
    return length
Â 
Â 
def return_n_from_last(llist, n):
    l = length_llist(llist)
    current = llist.head
    for i in range(l - n):
        current = current.next
    return current.data
Â 
Â 
a_llist = LinkedList()
Â 
data_list = input('Please enter the elements in the linked list: ').split()
for data in data_list:
    a_llist.append(int(data))
Â 
n = int(input('The nth element from the end will be printed. Please enter n: '))
value = return_n_from_last(a_llist, n)
Â 
print('The nth element from the end: {}'.format(value))"
3116,"Program to convert seconds to hour, minute and seconds","
t_sec=int(input(""Enter the total Second:""))
hour=(int)(t_sec/3600)
t_sec=(int)(t_sec%3600)
mint=(int)(t_sec/60)
sec=(int)(t_sec%60)
print(""Hours="",hour,""\nMinutes="",mint,""\nSecond="",sec)"
3117,Python Program to Display the Nodes of a Tree using BFS Traversal,"class Tree:
    def __init__(self, data=None):
        self.key = data
        self.children = []
Â 
    def set_root(self, data):
        self.key = data
Â 
    def add(self, node):
        self.children.append(node)
Â 
    def search(self, key):
        if self.key == key:
            return self
        for child in self.children:
            temp = child.search(key)
            if temp is not None:
                return temp
        return None
Â 
    def bfs(self):
        queue = [self]
        while queue != []:
            popped = queue.pop(0)
            for child in popped.children:
                queue.append(child)
            print(popped.key, end=' ')
Â 
Â 
tree = None
Â 
print('Menu (this assumes no duplicate keys)')
print('add <data> at root')
print('add <data> below <data>')
print('bfs')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
    if operation == 'add':
        data = int(do[1])
        new_node = Tree(data)
        suboperation = do[2].strip().lower() 
        if suboperation == 'at':
            tree = new_node
        elif suboperation == 'below':
            position = do[3].strip().lower()
            key = int(position)
            ref_node = None
            if tree is not None:
                ref_node = tree.search(key)
            if ref_node is None:
                print('No such key.')
                continue
            ref_node.add(new_node)
Â 
    elif operation == 'bfs':
        if tree is None:
            print('Tree is empty.')
        else:
            print('BFS traversal: ', end='')
            tree.bfs()
            print()
Â 
    elif operation == 'quit':
        break"
3118,Check given string is palindrome or not,"
str=input(""Enter the String:"")
count = 0
j=len(str)-1
for i in range(len(str)):
Â  Â  if str[i]==str[j]:
Â  Â  Â  Â  count+=1
Â  Â  j-=1
if count==len(str):
Â  Â  print(""Input string is palindrome"")
else:
Â  Â  print(""Input string is not palindrome"")"
3119,Python Program to Implement Stack using One Queue,"class Stack:
    def __init__(self):
        self.q = Queue()
Â 
    def is_empty(self):
        return self.q.is_empty()
Â 
    def push(self, data):
        self.q.enqueue(data)
Â 
    def pop(self):
        for _ in range(self.q.get_size() - 1):
            dequeued = self.q.dequeue()
            self.q.enqueue(dequeued)
        return self.q.dequeue()
Â 
Â 
class Queue:
    def __init__(self):
        self.items = []
        self.size = 0
Â 
    def is_empty(self):
        return self.items == []
Â 
    def enqueue(self, data):
        self.size += 1
        self.items.append(data)
Â 
    def dequeue(self):
        self.size -= 1
        return self.items.pop(0)
Â 
    def get_size(self):
        return self.size
Â 
Â 
s = Stack()
Â 
print('Menu')
print('push <value>')
print('pop')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
    if operation == 'push':
        s.push(int(do[1]))
    elif operation == 'pop':
        if s.is_empty():
            print('Stack is empty.')
        else:
            print('Popped value: ', s.pop())
    elif operation == 'quit':
        break"
3120, Program to print the Full Pyramid Number Pattern,"
row_size=int(input(""Enter the row size:""))
np=1
for out in range(0,row_size):
Â  Â  for in1 in range(row_size-1,out,-1):
Â  Â  Â  Â  print("" "",end="""")
Â  Â  for in2 in range(0, np):
Â  Â  Â  Â  print(np-out,end="""")
Â  Â  np+=2
Â  Â  print(""\r"")
"
3121,Python Program to Print an Inverted Star Pattern,"n=int(input(""Enter number of rows: ""))
for i in range (n,0,-1):
    print((n-i) * ' ' + i * '*')"
3122,Write a program to print the alphabet pattern,"

print(""Enter the row and column size:"");

row_size=input()
for out in range(ord(row_size),ord('A')-1,-1):
Â  Â  for i in range(ord(row_size),ord('A')-1,-1):
Â  Â  Â  Â  print(chr(out),end="" "")
Â  Â  print(""\r"")

"
3123,Print lists occurring elements in an array,"
import sys
arr=[]
freq=[]
max=-sys.maxsize-1
size = int(input(""Enter the size of the array: ""))
print(""Enter the Element of the array:"")
for i in range(0,size):
Â  Â  num = int(input())
Â  Â  arr.append(num)
for i in range(0, size):
Â  Â  if arr[i]>=max:
Â  Â  Â  Â  max=arr[i]
for i in range(0,max+1):
Â  Â  freq.append(0)
for i in range(0, size):
Â  Â  freq[arr[i]]+=1
list_oc=9999
list_v=9999
for i in range(0, size):
Â  Â  if freq[arr[i]] < list_oc:
Â  Â  Â  Â  list_oc = freq[arr[i]]
Â  Â  Â  Â  list_v = arr[i]
print(""The List occurring Number "",list_v,"" occurs "",list_oc,"" times."")"
3124,Python Program to Find the Sum of Digits in a Number without Recursion,"l=[]
b=int(input(""Enter a number: ""))
while(b>0):
    dig=b%10
    l.append(dig)
    b=b//10
print(""Sum is:"")
print(sum(l))"
3125,"Python Program to Print Sum of Negative Numbers, Positive Even Numbers and Positive Odd numbers in a List","Â 
n=int(input(""Enter the number of elements to be in the list:""))
b=[]
for i in range(0,n):
    a=int(input(""Element: ""))
    b.append(a)
sum1=0
sum2=0
sum3=0
for j in b:
    if(j>0):
        if(j%2==0):
            sum1=sum1+j
        else:
            sum2=sum2+j
    else:
        sum3=sum3+j
print(""Sum of all positive even numbers:"",sum1)
print(""Sum of all positive odd numbers:"",sum2)
print(""Sum of all negative numbers:"",sum3)"
3126,Python Program to Implement D-ary-Heap,"class D_aryHeap:
    def __init__(self, d):
        self.items = []
        self.d = d
Â 
    def size(self):
        return len(self.items)
Â 
    def parent(self, i):
        return (i - 1)//self.d
Â 
    def child(self, index, position):
        return index*self.d + (position + 1)
Â 
    def get(self, i):
        return self.items[i]
Â 
    def get_max(self):
        if self.size() == 0:
            return None
        return self.items[0]
Â 
    def extract_max(self):
        if self.size() == 0:
            return None
        largest = self.get_max()
        self.items[0] = self.items[-1]
        del self.items[-1]
        self.max_heapify(0)
        return largest
Â 
    def max_heapify(self, i):
        largest = i
        for j in range(self.d):
            c = self.child(i, j)
            if (c < self.size() and self.get(c) > self.get(largest)):
                largest = c
        if (largest != i):
            self.swap(largest, i)
            self.max_heapify(largest)
Â 
    def swap(self, i, j):
        self.items[i], self.items[j] = self.items[j], self.items[i]
Â 
    def insert(self, key):
        index = self.size()
        self.items.append(key)
        while (index != 0):
            p = self.parent(index)
            if self.get(p) < self.get(index):
                self.swap(p, index)
            index = p
Â 
Â 
d = int(input('Enter the value of D: '));
dheap = D_aryHeap(d)
Â 
print('Menu (this assumes no duplicate keys)')
print('insert <data>')
print('max get')
print('max extract')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
    if operation == 'insert':
        data = int(do[1])
        dheap.insert(data)
    elif operation == 'max':
        suboperation = do[1].strip().lower()
        if suboperation == 'get':
            print('Maximum value: {}'.format(dheap.get_max()))
        elif suboperation == 'extract':
            print('Maximum value removed: {}'.format(dheap.extract_max()))
Â 
    elif operation == 'quit':
        break"
3127,Python Program to Read the Contents of a File in Reverse Order,"filename=input(""Enter file name: "")
for line in reversed(list(open(filename))):
    print(line.rstrip())"
3128,"Define a function which can print a dictionary where the keys are numbers between 1 and 3 (both included) and the values are square of keys.
:","Solution
def printDict():
	d=dict()
	d[1]=1
	d[2]=2**2
	d[3]=3**2
	print d
		

printDict()





"
3129,Program to check whether a matrix is a scalar or not,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

# check except Diagonal all elements are 0 or not
# and check all diagonal elements are same or not
point=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i!=j and matrix[i][j]!=0:
            point=1
            break
        if i==j and matrix[i][j]!=matrix[i][j]:
            point = 1
            break

if point==1:
    print(""Given Matrix is not a Scaler Matrix."")
else:
    print(""Given Matrix is a Scaler Matrix."")"
3130,Python Program to Find the Union of two Lists,"l1 = []
num1 = int(input('Enter size of list 1: '))
for n in range(num1):
    numbers1 = int(input('Enter any number:'))
    l1.append(numbers1)
Â 
l2 = []
num2 = int(input('Enter size of list 2:'))
for n in range(num2):
    numbers2 = int(input('Enter any number:'))
    l2.append(numbers2)
Â 
union = list(set().union(l1,l2))
Â 
print('The Union of two lists is:',union)"
3131,Python Program to Implement Queue Data Structure using Linked List,"class Node:
    def __init__(self, data):
       self.data = data
       self.next = None
Â 
class Queue:
    def __init__(self):
        self.head = None
        self.last = None
Â 
    def enqueue(self, data):
        if self.last is None:
            self.head = Node(data)
            self.last = self.head
        else:
            self.last.next = Node(data)
            self.last = self.last.next
Â 
    def dequeue(self):
        if self.head is None:
            return None
        else:
            to_return = self.head.data
            self.head = self.head.next
            return to_return
Â 
a_queue = Queue()
while True:
    print('enqueue <value>')
    print('dequeue')
    print('quit')
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
    if operation == 'enqueue':
        a_queue.enqueue(int(do[1]))
    elif operation == 'dequeue':
        dequeued = a_queue.dequeue()
        if dequeued is None:
            print('Queue is empty.')
        else:
            print('Dequeued element: ', int(dequeued))
    elif operation == 'quit':
        break"
3132,"

Print a unicode string ""hello world"".
:","
unicodeString = u""hello world!""
print unicodeString

"
3133,"
Please write a program to generate all sentences where subject is in [""I"", ""You""] and verb is in [""Play"", ""Love""] and the object is in [""Hockey"",""Football""].
:","
subjects=[""I"", ""You""]
verbs=[""Play"", ""Love""]
objects=[""Hockey"",""Football""]
for i in range(len(subjects)):
    for j in range(len(verbs)):
        for k in range(len(objects)):
            sentence = ""%s %s %s."" % (subjects[i], verbs[j], objects[k])
            print sentence


"
3134,Check whether a given number is a perfect square number or not. ,"


'''Write
a Python programÂ to check whether a given number is a perfect square
number or not. orÂ Â Write a programÂ toÂ check whether
a given number is a perfect square number or not using Python '''



import math
num=int(input(""Enter a number:""))
sqr=math.sqrt(num)
if sqr-math.floor(sqr)==0:
Â  Â print(""It is a Perfect Square"")
else:
Â  Â print(""It is not a Perfect Square"")


"
3135,Python Program to Calculate the Average of Numbers in a Given List,"Â 
n=int(input(""Enter the number of elements to be inserted: ""))
a=[]
for i in range(0,n):
    elem=int(input(""Enter element: ""))
    a.append(elem)
avg=sum(a)/n
print(""Average of elements in the list"",round(avg,2))"
3136,Check whether number is Pronic Number or Not,"
import math
num=int(input(""Enter a number:""))
flag=0
for i in range(0,num+1):
Â  Â  if i*(i+1)==num:
Â  Â  Â  Â  flag=1
Â  Â  Â  Â  break
if flag==1:
Â  Â  print(""It is a Pronic Number."")
else:
Â  Â print(""It is Not a Pronic Number."")"
3137,Check if given String is palindrome using recursion,"c=0def Check_Palindrome(str,i,length):Â  Â  global cÂ  Â  if (i < len(str)):Â  Â  Â  Â  if (str[i] == str[length]):Â  Â  Â  Â  Â  Â  c +=1Â  Â  Â  Â  Â  Â  Check_Palindrome(str, i + 1, length-1)Â  Â  return cstr=input(""Enter your String:"")if(Check_Palindrome(str,0,len(str)-1)==len(str)):Â  Â  print(""It is a Palindrome String."")else: print(""It is not a Palindrome String."")"
3138,Find maximum product of 3 numbers in an array,"arr=[]size = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,size):Â  Â  num = int(input())Â  Â  arr.append(num)First_element=arr[0]Second_element=arr[1]third_element=arr[2]Max_Product=First_element*Second_element*third_elementfor i in range(0,size-2):Â  Â  for j in range(i+1, size-1):Â  Â  Â  Â  for k in range(j + 1, size):Â  Â  Â  Â  Â  Â  product=arr[i]*arr[j]*arr[k]Â  Â  Â  Â  Â  Â  if abs(product) >= abs(Max_Product):Â  Â  Â  Â  Â  Â  Â  Â  Max_Product =productÂ  Â  Â  Â  Â  Â  Â  Â  First_element = arr[i]Â  Â  Â  Â  Â  Â  Â  Â  Second_element = arr[j]Â  Â  Â  Â  Â  Â  Â  Â  third_element=arr[k]print(""Maximum Product of 3 numbers pair is ("",First_element,"","",Second_element,"","",third_element,"")"")print(""Maximum Product of 3 numbers is "",Max_Product)"
3139,Print all the odd numbers from 1 to n,"
n=int(input(""Enter the n value:""))
print(""Printing Odd numbers between 1 to "",n)
for i in range(1,n+1):
Â  Â  if i%2!=0:
Â  Â  Â print(i,end="" "")"
3140,"Program to print series 10,5,60,15,110...N","
print(""Enter the range of number(Limit):"")
n=int(input())
a=10
b=5
i=1
while(i<=n):
Â  Â  if(i%2==0):
Â  Â  Â  Â  print(b,end="" "")
Â  Â  Â  Â  b += 10
Â  Â  else:
Â  Â  Â  Â  print(a, end="" "")
Â  Â  Â  Â  a += 50
Â  Â  i+=1"
3141,Program to find sum of series (1+(1+2)+(1+2+3)+...till N),"
print(""Enter the range of number:"")
n=int(input())
print(""Enter the value of x:"")
x=int(input())
sum=0
i=1
while(i<=n):
Â  Â  for j in range(1,i+1):
Â  Â  Â  Â  sum+=j
Â  Â  i+=1
print(""The sum of the series = "",sum)"
3142,Program to Find the sum of series 3+33+333.....+N,"n=int(input(""Enter the range of number:""))sum=0p=3for i in range(1,n+1):Â  Â  sum += pÂ  Â  p=(p*10)+3print(""The sum of the series = "",sum)"
3143,Python Program to Remove the ith Occurrence of the Given Word in a List where Words can Repeat,"a=[]
n= int(input(""Enter the number of elements in list:""))
for x in range(0,n):
    element=input(""Enter element"" + str(x+1) + "":"")
    a.append(element)
print(a)
c=[]
count=0
b=input(""Enter word to remove: "")
n=int(input(""Enter the occurrence to remove: ""))
for i in a:
    if(i==b):
        count=count+1
        if(count!=n):
            c.append(i)
    else:
        c.append(i)
if(count==0):
    print(""Item not found "")
else: 
    print(""The number of repetitions is: "",count)
    print(""Updated list is: "",c)
    print(""The distinct elements are: "",set(a))"
3144,Program to convert Hexadecimal to Decimal ,"
import math
hex=input(""Enter Hexadecimal Number:"")
value=0
decimal=0
j=len(hex)
j-=1
for i in range(0,len(hex)):
Â  Â  if hex[i]>='0' and hex[i]<='9' :
Â  Â  Â  Â  value=(int)(hex[i])
Â  Â  if hex[i]=='A' or hex[i]=='a':
Â  Â  Â  Â  value=10
Â  Â  if hex[i] == 'B' or hex[i] == 'b':
Â  Â  Â  Â  value=11
Â  Â  if hex[i] == 'C' or hex[i] == 'c':
Â  Â  Â  Â  value=12
Â  Â  if hex[i] == 'D' or hex[i] == 'd':
Â  Â  Â  Â  value=13
Â  Â  if hex[i] == 'E' or hex[i] == 'e':
Â  Â  Â  Â  value=14
Â  Â  if hex[i] == 'F' or hex[i] == 'f':
Â  Â  Â  Â  value=15
Â  Â  decimal=decimal+(int)(value*math.pow(16,j))
Â  Â  j-=1
print(""Decimal Number is:"",decimal)"
3145,Program to Find square of a matrix ,"# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

# compute square of the matrix
for i in range(0,row_size):
    for j in range(0,col_size):
        matrix[i][j]=pow(matrix[i][j],2)

# display square of the matrix
print(""Square of the Matrix elements are:"")
for m in matrix:
    print(m)"
3146,Find factorial of a number using recursion,"def Factorial(num):Â  Â  if num<=0:Â  Â  Â  Â  return 1Â  Â  else:Â  Â  Â  Â  return num*Factorial(num-1)num=int(input(""Enter the Number:""))print(""Factorial of Given Number Using Recursion is:"",Factorial(num))"
3147,Find the sum of Even numbers using recursion,"def SumEven(num1,num2):Â  Â  if num1>num2:Â  Â  Â  Â  return 0Â  Â  return num1+SumEven(num1+2,num2)num1=2print(""Enter your Limit:"")num2=int(input())print(""Sum of all Even numbers in the given range is:"",SumEven(num1,num2))"
3148,Write a program to find the nth strong number,"

'''Write a Python
programÂ toÂ find the nth strong number. orÂ Write a
programÂ toÂ find the nth strong number using Python '''

print(""Enter the Nth value:"")
rangenumber=int(input())
num = 1
c = 0
letest = 0

while (c != rangenumber):
Â  Â  num2 = num
Â  Â  num1 = num
Â  Â  sum = 0
Â  Â  fact = 1
Â  Â  while (num1 != 0):
Â  Â  Â  Â  fact = 1
Â  Â  Â  Â  rem = num1 % 10
Â  Â  Â  Â  num1 = num1 // 10
Â  Â  Â  Â  for j in range(1,rem+1):
Â  Â  Â  Â  Â  Â  fact = fact * j
Â  Â  Â  Â  sum = sum + fact
Â  Â  if (sum == num2):
Â  Â  Â  Â  c+=1
Â  Â  Â  Â  letest = num
Â  Â  num = num + 1
print(rangenumber,""th strong number is "",letest)Â 

"
3149,Python Program to Implement Graph,"class Graph:
    def __init__(self):
        # dictionary containing keys that map to the corresponding vertex object
        self.vertices = {}
Â 
    def add_vertex(self, key):
        """"""Add a vertex with the given key to the graph.""""""
        vertex = Vertex(key)
        self.vertices[key] = vertex
Â 
    def get_vertex(self, key):
        """"""Return vertex object with the corresponding key.""""""
        return self.vertices[key]
Â 
    def __contains__(self, key):
        return key in self.vertices
Â 
    def add_edge(self, src_key, dest_key, weight=1):
        """"""Add edge from src_key to dest_key with given weight.""""""
        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)
Â 
    def does_edge_exist(self, src_key, dest_key):
        """"""Return True if there is an edge from src_key to dest_key.""""""
        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])
Â 
    def __iter__(self):
        return iter(self.vertices.values())
Â 
Â 
class Vertex:
    def __init__(self, key):
        self.key = key
        self.points_to = {}
Â 
    def get_key(self):
        """"""Return key corresponding to this vertex object.""""""
        return self.key
Â 
    def add_neighbour(self, dest, weight):
        """"""Make this vertex point to dest with given edge weight.""""""
        self.points_to[dest] = weight
Â 
    def get_neighbours(self):
        """"""Return all vertices pointed to by this vertex.""""""
        return self.points_to.keys()
Â 
    def get_weight(self, dest):
        """"""Get weight of edge from this vertex to dest.""""""
        return self.points_to[dest]
Â 
    def does_it_point_to(self, dest):
        """"""Return True if this vertex points to dest.""""""
        return dest in self.points_to
Â 
Â 
g = Graph()
print('Menu')
print('add vertex <key>')
print('add edge <src> <dest> [weight]')
print('display')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0]
    if operation == 'add':
        suboperation = do[1]
        if suboperation == 'vertex':
            key = int(do[2])
            if key not in g:
                g.add_vertex(key)
            else:
                print('Vertex already exists.')
        elif suboperation == 'edge':
            src = int(do[2])
            dest = int(do[3])
            if src not in g:
                print('Vertex {} does not exist.'.format(src))
            elif dest not in g:
                print('Vertex {} does not exist.'.format(dest))
            else:
                if not g.does_edge_exist(src, dest):
                    if len(do) == 5:
                        weight = int(do[4])
                        g.add_edge(src, dest, weight)
                    else:
                        g.add_edge(src, dest)
                else:
                    print('Edge already exists.')
Â 
    elif operation == 'display':
        print('Vertices: ', end='')
        for v in g:
            print(v.get_key(), end=' ')
        print()
Â 
        print('Edges: ')
        for v in g:
            for dest in v.get_neighbours():
                w = v.get_weight(dest)
                print('(src={}, dest={}, weight={}) '.format(v.get_key(),
                                                             dest.get_key(), w))
        print()
Â 
    elif operation == 'quit':
        break"
3150,program to find the prime factors of a number,"

import math
num=int(input(""Enter a number:""))
print(""Prime Factors of "",num,end="" are \n"")
while num%2==0:
Â  Â  print(2,)
Â  Â  num=num/2
for i in range(3,int(math.sqrt(num))+1,2):
Â  Â while num%i==0:
Â  Â  Â  print(i,)
Â  Â  Â  num = num/i
if num>2:
Â  print(num)
"
3151,"
Please write a program to shuffle and print the list [3,6,7,8].


:","
from random import shuffle
li = [3,6,7,8]
shuffle(li)
print li



"
3152,"
Please write a program to randomly generate a list with 5 numbers, which are divisible by 5 and 7 , between 1 and 1000 inclusive.


:","
import random
print random.sample([i for i in range(1,1001) if i%5==0 and i%7==0], 5)

"
3153,Python Program to Take in Two Strings and Display the Larger String without Using Built-in Functions,"string1=raw_input(""Enter first string:"")
string2=raw_input(""Enter second string:"")
count1=0
count2=0
for i in string1:
      count1=count1+1
for j in string2:
      count2=count2+1
if(count1<count2):
      print(""Larger string is:"")
      print(string2)
elif(count1==count2):
      print(""Both strings are equal."")
else:
      print(""Larger string is:"")
      print(string1)"
3154,Write a program to print the alphabet pattern,"

print(""Enter the row and column size:"");

row_size=input()
for out in range(ord(row_size),ord('A')-1,-1):
Â  Â  for i in range(ord(row_size),ord('A')-1,-1):
Â  Â  Â  Â  print(chr(out),end="" "")
Â  Â  print(""\r"")

"
3155,Program to Find the sum of series 1+11+111.....+N,"n=int(input(""Enter the range of number:""))sum=0p=1for i in range(1,n+1):Â  Â  sum += pÂ  Â  p = (p * 10) + 1print(""The sum of the series = "",sum)"
3156,Program to swap two numbers without third variable,"num1=int(input(""Enter 1st number:""))
num2=int(input(""Enter 2nd number:""))

num1=num1+num2
num2=num1-num2
num1=num1-num2

print(""***After swapping***"")
print(""Number 1: "",num1)
print(""Number 2: "",num2)"
3157,Python Program to Implement Bellman-Ford Algorithm,"class Graph:
    def __init__(self):
        # dictionary containing keys that map to the corresponding vertex object
        self.vertices = {}
Â 
    def add_vertex(self, key):
        """"""Add a vertex with the given key to the graph.""""""
        vertex = Vertex(key)
        self.vertices[key] = vertex
Â 
    def get_vertex(self, key):
        """"""Return vertex object with the corresponding key.""""""
        return self.vertices[key]
Â 
    def __contains__(self, key):
        return key in self.vertices
Â 
    def add_edge(self, src_key, dest_key, weight=1):
        """"""Add edge from src_key to dest_key with given weight.""""""
        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)
Â 
    def does_edge_exist(self, src_key, dest_key):
        """"""Return True if there is an edge from src_key to dest_key.""""""
        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])
Â 
    def __len__(self):
        return len(self.vertices)
Â 
    def __iter__(self):
        return iter(self.vertices.values())
Â 
Â 
class Vertex:
    def __init__(self, key):
        self.key = key
        self.points_to = {}
Â 
    def get_key(self):
        """"""Return key corresponding to this vertex object.""""""
        return self.key
Â 
    def add_neighbour(self, dest, weight):
        """"""Make this vertex point to dest with given edge weight.""""""
        self.points_to[dest] = weight
Â 
    def get_neighbours(self):
        """"""Return all vertices pointed to by this vertex.""""""
        return self.points_to.keys()
Â 
    def get_weight(self, dest):
        """"""Get weight of edge from this vertex to dest.""""""
        return self.points_to[dest]
Â 
    def does_it_point_to(self, dest):
        """"""Return True if this vertex points to dest.""""""
        return dest in self.points_to
Â 
Â 
def bellman_ford(g, source):
    """"""Return distance where distance[v] is min distance from source to v.
Â 
    This will return a dictionary distance.
Â 
    g is a Graph object which can have negative edge weights.
    source is a Vertex object in g.
    """"""
    distance = dict.fromkeys(g, float('inf'))
    distance[source] = 0
Â 
    for _ in range(len(g) - 1):
        for v in g:
            for n in v.get_neighbours():
                distance[n] = min(distance[n], distance[v] + v.get_weight(n))
Â 
    return distance
Â 
Â 
g = Graph()
print('Menu')
print('add vertex <key>')
print('add edge <src> <dest> <weight>')
print('bellman-ford <source vertex key>')
print('display')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0]
    if operation == 'add':
        suboperation = do[1]
        if suboperation == 'vertex':
            key = int(do[2])
            if key not in g:
                g.add_vertex(key)
            else:
                print('Vertex already exists.')
        elif suboperation == 'edge':
            src = int(do[2])
            dest = int(do[3])
            weight = int(do[4])
            if src not in g:
                print('Vertex {} does not exist.'.format(src))
            elif dest not in g:
                print('Vertex {} does not exist.'.format(dest))
            else:
                if not g.does_edge_exist(src, dest):
                    g.add_edge(src, dest, weight)
                else:
                    print('Edge already exists.')
Â 
    elif operation == 'bellman-ford':
        key = int(do[1])
        source = g.get_vertex(key)
        distance = bellman_ford(g, source)
        print('Distances from {}: '.format(key))
        for v in distance:
            print('Distance to {}: {}'.format(v.get_key(), distance[v]))
        print()
Â 
    elif operation == 'display':
        print('Vertices: ', end='')
        for v in g:
            print(v.get_key(), end=' ')
        print()
Â 
        print('Edges: ')
        for v in g:
            for dest in v.get_neighbours():
                w = v.get_weight(dest)
                print('(src={}, dest={}, weight={}) '.format(v.get_key(),
                                                             dest.get_key(), w))
        print()
Â 
    elif operation == 'quit':
        break"
3158,Python Program to Count the Number of Blank Spaces in a Text File,"fname = input(""Enter file name: "")
k = 0
Â 
with open(fname, 'r') as f:
    for line in f:
        words = line.split()
        for i in words:
            for letter in i:
                if(letter.isspace):
                    k=k+1
print(""Occurrences of blank spaces:"")
print(k)"
3159,Print the Solid Diamond Number Pattern,"row_size=int(input(""Enter the row size:""))x=1for out in range(row_size,-(row_size+1),-1):Â  Â  for inn in range(1,abs(out)+1):Â  Â  Â  Â  print("" "",end="""")Â  Â  for p in range(row_size,abs(out)-1,-1):Â  Â  Â  Â  print(x,end="" "")Â  Â  if out > 0:Â  Â  Â  Â  x +=1Â  Â  else:Â  Â  Â  Â  x -=1Â  Â  print(""\r"")"
3160,"With a given tuple (1,2,3,4,5,6,7,8,9,10), write a program to print the first half values in one line and the last half values in one line. 
:","Solution
tp=(1,2,3,4,5,6,7,8,9,10)
tp1=tp[:5]
tp2=tp[5:]
print tp1
print tp2


"
3161,Find sum of Odd numbers using recursion in an array,"sum=0def SumOfOddElement(arr,n):Â  Â  global sumÂ  Â  if(n>0):Â  Â  Â  Â  i=n-1Â  Â  Â  Â  if(arr[i]%2==1):Â  Â  Â  Â  Â  Â  sum=sum+arr[i]Â  Â  Â  Â  SumOfOddElement(arr,i)Â  Â  return sumarr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):Â  Â  num = int(input())Â  Â  arr.append(num)print(""Sum of Odd Element is:"",SumOfOddElement(arr,n))"
3162,Write a program to compute the frequency of the words from the input. The output should output after sorting the key alphanumerically. ,"freq = {}   # frequency of words in text
line = raw_input()
for word in line.split():
    freq[word] = freq.get(word,0)+1

words = freq.keys()
words.sort()

for w in words:
    print ""%s:%d"" % (w,freq[w])
"
3163,"
Please write a program to print the list after removing delete even numbers in [5,6,77,45,22,12,24].
:","
li = [5,6,77,45,22,12,24]
li = [x for x in li if x%2!=0]
print li

"
3164,Python Program to Exchange the Values of Two Numbers Without Using a Temporary Variable,"Â 
a=int(input(""Enter value of first variable: ""))
b=int(input(""Enter value of second variable: ""))
a=a+b
b=a-b
a=a-b
print(""a is:"",a,"" b is:"",b)"
3165,Python Program to Check if a Date is Valid and Print the Incremented Date if it is,"Â 
date=input(""Enter the date: "")
dd,mm,yy=date.split('/')
dd=int(dd)
mm=int(mm)
yy=int(yy)
if(mm==1 or mm==3 or mm==5 or mm==7 or mm==8 or mm==10 or mm==12):
    max1=31
elif(mm==4 or mm==6 or mm==9 or mm==11):
    max1=30
elif(yy%4==0 and yy%100!=0 or yy%400==0):
    max1=29
else:
    max1=28
if(mm<1 or mm>12):
    print(""Date is invalid."")
elif(dd<1 or dd>max1):
    print(""Date is invalid."")
elif(dd==max1 and mm!=12):
    dd=1
    mm=mm+1
    print(""The incremented date is: "",dd,mm,yy)
elif(dd==31 and mm==12):
    dd=1
    mm=1
    yy=yy+1
    print(""The incremented date is: "",dd,mm,yy)
else:
    dd=dd+1
    print(""The incremented date is: "",dd,mm,yy)"
3166,Find the sum of all diagonal elements of a matrix,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

sum=0
#Calculate sum of the diagonals element
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i==j:
            sum+=matrix[i][j]
# Display the sum of diagonals Element
print(""Sum of diagonals Element is: "",sum)"
3167,Python Program to Compute Simple Interest Given all the Required Values,"Â 
principle=float(input(""Enter the principle amount:""))
time=int(input(""Enter the time(years):""))
rate=float(input(""Enter the rate:""))
simple_interest=(principle*time*rate)/100
print(""The simple interest is:"",simple_interest)"
3168,Program to Find nth Happy Number ,"
rangenumber=int(input(""Enter a Nth Number:""))
c = 0
letest = 0
num = 1
while c != rangenumber:
Â  Â  sum = 0
Â  Â  num1=num
Â  Â  while sum != 1 and sum != 4:
Â  Â  Â  Â  sum = 0
Â  Â  Â  Â  while num1 != 0:
Â  Â  Â  Â  Â  Â  rem = num1 % 10
Â  Â  Â  Â  Â  Â  sum += (rem * rem)
Â  Â  Â  Â  Â  Â  num1 //= 10
Â  Â  Â  Â  num1 = sum

Â  Â  if sum == 1:
Â  Â  Â  Â  Â  Â  c+=1
Â  Â  Â  Â  Â  Â  letest = num

Â  Â  num = num + 1
print(rangenumber,""th Happy number is "",letest)"
3169,Write a program to print the pattern,"
import java.util.Scanner;
public class p10 {

 public static void main(String[] args) {
 Scanner cs=new Scanner(System.in);
  System.out.println(""Enter the row and column size:"");
 int row_size,out,in;
 Â  row_size=cs.nextInt();
 Â  for(out=row_size;out>=1;out--)
 Â  {
 Â  Â for(in=1;in<=row_size;in++)
 Â  Â  System.out.print(out);

 Â  Â  Â  Â  System.out.println();
 Â  }
 cs.close();
 }
}"
3170,Find out all Magic numbers present within a given range,"
print(""Enter a range:"")
range1=int(input())
range2=int(input())
print(""Magic numbers between "",range1,"" and "",range2,"" are: "")
for i in range(range1,range2+1):
Â  Â  num3 = i
Â  Â  num1 = i
Â  Â  sum=0
# Sum of digit
Â  Â  while num1 != 0:
Â  Â  Â  Â  rem = num1 % 10
Â  Â  Â  Â  sum += rem
Â  Â  Â  Â  num1 //= 10
# Reverse of sum
Â  Â  rev = 0
Â  Â  num2 = sum
Â  Â  while num2 != 0:
Â  Â  Â  Â  rem2 = num2 % 10
Â  Â  Â  Â  rev = rev * 10 + rem2
Â  Â  Â  Â  num2 //= 10
Â  Â  if sum*rev==num3:
Â  Â  Â  Â  print(i,end="" "")"
3171,Program to find the sum of an upper triangular matrix,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

#Calculate sum of Upper triangular matrix element
sum=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i>j:
            sum += matrix[i][j]

# display the sum of the Upper triangular matrix element
print(""Sum of Upper Triangular Matrix Elements is: "",sum)"
3172,"

Please write assert statements to verify that every number in the list [2,4,6,8] is even.


:","
li = [2,4,6,8]
for i in li:
    assert i%2==0


"
3173,"
Please write a program which count and print the numbers of each character in a string input by console.
","
dic = {}
s=raw_input()
for s in s:
    dic[s] = dic.get(s,0)+1
print '\n'.join(['%s,%s' % (k, v) for k, v in dic.items()])

"
3174, Find out all Armstrong numbers present within a given range,"
print(""Enter a range:"")
range1=int(input())
range2=int(input())
print(""Armstrong numbers between "",range1,"" and "",range2,"" are: "")
for i in range(range1,range2+1):
Â  Â  num2=i
Â  Â  num1=i
Â  Â  sum=0
Â  Â  while(num1!=0):
Â  Â  Â  Â  rem=num1%10
Â  Â  Â  Â  num1=int(num1/10)
Â  Â  Â  Â  sum=sum+rem*rem*rem
Â  Â  if sum==num2:
print(i,end="" "")Â 
"
3175,Python Program to Implement Gnome Sort,"def gnome_sort(alist):
    for pos in range(1, len(alist)):
        while (pos != 0 and alist[pos] < alist[pos - 1]):
            alist[pos], alist[pos - 1] = alist[pos - 1], alist[pos]
            pos = pos - 1
Â 
Â 
alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
gnome_sort(alist)
print('Sorted list: ', end='')
print(alist)"
3176,Program to print Triangular Number series 1 3 6 10 15 ...N,"
print(""Enter the range of number(Limit):"")
n=int(input())
i=1
while(i<=n):
Â  Â  print((int)((i*(i+1))/2),end="" "")
Â  Â  i+=1"
3177,Python Program to Find Shortest Path From a Vertex using BFS in an Unweighted Graph,"class Graph:
    def __init__(self):
        # dictionary containing keys that map to the corresponding vertex object
        self.vertices = {}
Â 
    def add_vertex(self, key):
        """"""Add a vertex with the given key to the graph.""""""
        vertex = Vertex(key)
        self.vertices[key] = vertex
Â 
    def get_vertex(self, key):
        """"""Return vertex object with the corresponding key.""""""
        return self.vertices[key]
Â 
    def __contains__(self, key):
        return key in self.vertices
Â 
    def add_edge(self, src_key, dest_key, weight=1):
        """"""Add edge from src_key to dest_key with given weight.""""""
        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)
Â 
    def does_edge_exist(self, src_key, dest_key):
        """"""Return True if there is an edge from src_key to dest_key.""""""
        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])
Â 
    def __iter__(self):
        return iter(self.vertices.values())
Â 
Â 
class Vertex:
    def __init__(self, key):
        self.key = key
        # dictionary containing destination vertices mapped to the weight of the
        # edge with which they are joined to this vertex
        self.points_to = {}
Â 
    def get_key(self):
        """"""Return key corresponding to this vertex object.""""""
        return self.key
Â 
    def add_neighbour(self, dest, weight):
        """"""Make this vertex point to dest with given edge weight.""""""
        self.points_to[dest] = weight
Â 
    def get_neighbours(self):
        """"""Return all vertices pointed to by this vertex.""""""
        return self.points_to.keys()
Â 
    def get_weight(self, dest):
        """"""Get weight of edge from this vertex to dest.""""""
        return self.points_to[dest]
Â 
    def does_it_point_to(self, dest):
        """"""Return True if this vertex points to dest.""""""
        return dest in self.points_to
Â 
Â 
class Queue:
    def __init__(self):
        self.items = []
Â 
    def is_empty(self):
        return self.items == []
Â 
    def enqueue(self, data):
        self.items.append(data)
Â 
    def dequeue(self):
        return self.items.pop(0)
Â 
Â 
def find_shortest_paths(src):
    """"""Returns tuple of two dictionaries: (parent, distance)
Â 
    parent contains vertices mapped to their parent vertex in the shortest
    path from src to that vertex.
    distance contains vertices mapped to their shortest distance from src.
    """"""
    parent = {src: None}
    distance = {src: 0}
Â 
    visited = set()
    q = Queue()
    q.enqueue(src)
    visited.add(src)
    while not q.is_empty():
        current = q.dequeue()
        for dest in current.get_neighbours():
            if dest not in visited:
                visited.add(dest)
                parent[dest] = current
                distance[dest] = distance[current] + 1
                q.enqueue(dest)
    return (parent, distance)
Â 
g = Graph()
print('Menu')
print('add vertex <key>')
print('add edge <src> <dest>')
print('shortest <vertex key>')
print('display')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0]
    if operation == 'add':
        suboperation = do[1]
        if suboperation == 'vertex':
            key = int(do[2])
            if key not in g:
                g.add_vertex(key)
            else:
                print('Vertex already exists.')
        elif suboperation == 'edge':
            src = int(do[2])
            dest = int(do[3])
            if src not in g:
                print('Vertex {} does not exist.'.format(src))
            elif dest not in g:
                print('Vertex {} does not exist.'.format(dest))
            else:
                if not g.does_edge_exist(src, dest):
                    g.add_edge(src, dest)
                else:
                    print('Edge already exists.')
Â 
    elif operation == 'shortest':
        key = int(do[1])
        src = g.get_vertex(key)
        parent, distance = find_shortest_paths(src)
Â 
        print('Path from destination vertices to source vertex {}:'.format(key))
        for v in parent:
            print('Vertex {} (distance {}): '.format(v.get_key(), distance[v]),
                  end='')
            while parent[v] is not None:
                print(v.get_key(), end = ' ')
                v = parent[v]
            print(src.get_key()) # print source vertex
Â 
    elif operation == 'display':
        print('Vertices: ', end='')
        for v in g:
            print(v.get_key(), end=' ')
        print()
Â 
        print('Edges: ')
        for v in g:
            for dest in v.get_neighbours():
                w = v.get_weight(dest)
                print('(src={}, dest={}, weight={}) '.format(v.get_key(),
                                                             dest.get_key(), w))
        print()
Â 
    elif operation == 'quit':
        break"
3178,Python Program to Find if Undirected Graph is Bipartite using DFS,"class Graph:
    def __init__(self):
        # dictionary containing keys that map to the corresponding vertex object
        self.vertices = {}
Â 
    def add_vertex(self, key):
        """"""Add a vertex with the given key to the graph.""""""
        vertex = Vertex(key)
        self.vertices[key] = vertex
Â 
    def get_vertex(self, key):
        """"""Return vertex object with the corresponding key.""""""
        return self.vertices[key]
Â 
    def __contains__(self, key):
        return key in self.vertices
Â 
    def add_edge(self, src_key, dest_key, weight=1):
        """"""Add edge from src_key to dest_key with given weight.""""""
        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)
Â 
    def add_undirected_edge(self, v1_key, v2_key, weight=1):
        """"""Add undirected edge (2 directed edges) between v1_key and v2_key with
        given weight.""""""
        self.add_edge(v1_key, v2_key, weight)
        self.add_edge(v2_key, v1_key, weight)
Â 
    def does_undirected_edge_exist(self, v1_key, v2_key):
        """"""Return True if there is an undirected edge between v1_key and v2_key.""""""
        return (self.does_edge_exist(v1_key, v2_key)
                and self.does_edge_exist(v1_key, v2_key))
Â 
    def does_edge_exist(self, src_key, dest_key):
        """"""Return True if there is an edge from src_key to dest_key.""""""
        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])
Â 
    def __iter__(self):
        return iter(self.vertices.values())
Â 
Â 
class Vertex:
    def __init__(self, key):
        self.key = key
        self.points_to = {}
Â 
    def get_key(self):
        """"""Return key corresponding to this vertex object.""""""
        return self.key
Â 
    def add_neighbour(self, dest, weight):
        """"""Make this vertex point to dest with given edge weight.""""""
        self.points_to[dest] = weight
Â 
    def get_neighbours(self):
        """"""Return all vertices pointed to by this vertex.""""""
        return self.points_to.keys()
Â 
    def get_weight(self, dest):
        """"""Get weight of edge from this vertex to dest.""""""
        return self.points_to[dest]
Â 
    def does_it_point_to(self, dest):
        """"""Return True if this vertex points to dest.""""""
        return dest in self.points_to
Â 
Â 
def is_bipartite(vertex, visited):
    """"""Return True if component containing vertex is bipartite and put all
    vertices in its component in set visited.""""""
    colour = {vertex: 0}
    return is_bipartite_helper(vertex, visited, colour)
Â 
Â 
def is_bipartite_helper(v, visited, colour):
    """"""Return True if component containing vertex is bipartite and put all
    vertices in its component in set visited. Uses dictionary colour to keep
    track of colour of each vertex.""""""
    visited.add(v)
    next_colour = 1 - colour[v] # switch colour
    for dest in v.get_neighbours():
        if dest not in visited:
            colour[dest] = next_colour
            if not is_bipartite_helper(dest, visited, colour):
                return False
        else:
            if colour[dest] != next_colour:
                return False
    return True
Â 
Â 
g = Graph()
print('Undirected Graph')
print('Menu')
print('add vertex <key>')
print('add edge <vertex1> <vertex2>')
print('bipartite')
print('display')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0]
    if operation == 'add':
        suboperation = do[1]
        if suboperation == 'vertex':
            key = int(do[2])
            if key not in g:
                g.add_vertex(key)
            else:
                print('Vertex already exists.')
        elif suboperation == 'edge':
            v1 = int(do[2])
            v2 = int(do[3])
            if v1 not in g:
                print('Vertex {} does not exist.'.format(v1))
            elif v2 not in g:
                print('Vertex {} does not exist.'.format(v2))
            else:
                if not g.does_undirected_edge_exist(v1, v2):
                    g.add_undirected_edge(v1, v2)
                else:
                    print('Edge already exists.')
Â 
    elif operation == 'bipartite':
        bipartite = True
        visited = set()
        for v in g:
            if v not in visited:
                if not is_bipartite(v, visited):
                    bipartite = False
                    break
Â 
        if bipartite:
            print('Graph is bipartite.')
        else:
            print('Graph is not bipartite.')
Â 
    elif operation == 'display':
        print('Vertices: ', end='')
        for v in g:
            print(v.get_key(), end=' ')
        print()
Â 
        print('Edges: ')
        for v in g:
            for dest in v.get_neighbours():
                w = v.get_weight(dest)
                print('(src={}, dest={}, weight={}) '.format(v.get_key(),
                                                             dest.get_key(), w))
        print()
Â 
    elif operation == 'quit':
        break"
3179,Subtract Two Numbers Operator without using Minus(-) operator,"
num1=int(input(""Enter first number:""))
num2=int(input(""EnterÂ  second number:""))
sub=num1+(~num2+1)#number + 2's complement of number
print(""Subtraction of two number is "",sub)
"
3180,Python Program to Find Longest Common Subsequence using Dynamic Programming with Memoization,"def lcs(u, v):
    """"""Return c where c[i][j] contains length of LCS of u[i:] and v[j:].""""""
    c = [[-1]*(len(v) + 1) for _ in range(len(u) + 1)]
    lcs_helper(u, v, c, 0, 0)
    return c
Â 
Â 
def lcs_helper(u, v, c, i, j):
    """"""Return length of LCS of u[i:] and v[j:] and fill in table c.
Â 
    c[i][j] contains the length of LCS of u[i:] and v[j:].
    This function fills in c as smaller subproblems for solving c[i][j] are
    solved.""""""
    if c[i][j] >= 0:
        return c[i][j]
Â 
    if i == len(u) or j == len(v):
        q = 0
    else:
        if u[i] == v[j]:
            q = 1 + lcs_helper(u, v, c, i + 1, j + 1)
        else:
            q = max(lcs_helper(u, v, c, i + 1, j),
                    lcs_helper(u, v, c, i, j + 1))
    c[i][j] = q
    return q
Â 
Â 
def print_lcs(u, v, c):
    """"""Print one LCS of u and v using table c.""""""
    i = j = 0
    while not (i == len(u) or j == len(v)):
        if u[i] == v[j]:
            print(u[i], end='')
            i += 1
            j += 1
        elif c[i][j + 1] > c[i + 1][j]:
            j += 1
        else:
            i += 1
Â 
Â 
u = input('Enter first string: ')
v = input('Enter second string: ')
c = lcs(u, v)
print('Longest Common Subsequence: ', end='')
print_lcs(u, v, c)"
3181,Python Program to Print the Alternate Nodes in a Linked List using Recursion,"class Node:
    def __init__(self, data):
       self.data = data
       self.next = None
Â 
class LinkedList:
    def __init__(self):
        self.head = None
        self.last_node = None
Â 
    def append(self, data):
        if self.last_node is None:
            self.head = Node(data)
            self.last_node = self.head
        else:
            self.last_node.next = Node(data)
            self.last_node = self.last_node.next
Â 
    def alternate(self):
        self.alternate_helper(self.head)
Â 
    def alternate_helper(self, current):
        if current is None:
            return
        print(current.data, end = ' ')
        if current.next:
            self.alternate_helper(current.next.next)
Â 
a_llist = LinkedList()
data_list = input('Please enter the elements in the linked list: ').split()
for data in data_list:
    a_llist.append(int(data))
Â 
print('The alternate nodes of the linked list: ', end = '')
a_llist.alternate()"
3182,Program to Find the factorial of a number,"

num=int(input(""Enter a number:""))
fact=1
for i in range(1,num+1):
Â  Â fact=fact*i
print(""The Factorial is"",fact)


"
3183,Quick Sort Program in Python | Java | C | C++,"
def partition(arr,first,last):
Â  Â  i=first-1
Â  Â  x=arr[last]
Â  Â  for j in range(first,last):
Â  Â  Â  Â  if(arr[j]<x):
Â  Â  Â  Â  Â  Â  i+=1
Â  Â  Â  Â  Â  Â  temp=arr[i]
Â  Â  Â  Â  Â  Â  arr[i]=arr[j]
Â  Â  Â  Â  Â  Â  arr[j]=temp
Â  Â  i+=1
Â  Â  temp=arr[i]
Â  Â  arr[i]=arr[last]
Â  Â  arr[last]=temp
Â  Â  return i

def qsort(arr,first,last):
Â  Â  if(first<last):
Â  Â  Â  Â  mid=partition(arr,first,last)
Â  Â  Â  Â  qsort(arr,first,mid-1)
Â  Â  Â  Â  qsort(arr,mid+1,last)

size=int(input(""Enter the size of the array:""))
arr=[]
print(""Enter the element of the array:"")
for i in range(0,size):
Â  Â  num = int(input())
Â  Â  arr.append(num)

print(""Before Sorting Array Element are: "",arr)

qsort(arr,0,size-1)

print(""\nAfter Sorting Array Element are: "",arr)"
3184,Move all zeros to the end of an Array,"arr=[]size = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,size):Â  Â  num = int(input())Â  Â  arr.append(num)c=0for i in range(0,size):Â  Â  if arr[i]!=0:Â  Â  Â  Â  arr[c]=arr[i]Â  Â  Â  Â  c+=1for i in range(c,size):Â  Â  Â  Â  arr[c]=0Â  Â  Â  Â  c+=1print(""After Move all zeros to end, Array is:"")print(arr)"
3185,Write C|Java|C++|Python Program to compute x^n/n!,"
n=int(input(""Enter the n Value:""))
x=int(input(""Enter the x value:""))
fact=1
for i in range(1,n+1):
Â  Â  fact*=i
result=pow(x,n)/fact
print(""Result(x^n/n!)= "",result)
"
3186,Python Program to Find the Binary Equivalent of a Number Recursively,"l=[]
def convert(b):
    if(b==0):
        return l
    dig=b%2
    l.append(dig)
    convert(b//2)
a=int(input(""Enter a number: ""))
convert(a)
l.reverse()
print(""Binary equivalent:"")
for i in l:
    print i,"
3187,Python Program to Read a Number n and Print the Natural Numbers Summation Pattern,"n=int(input(""Enter a number: ""))
for j in range(1,n+1):
    a=[]
    for i in range(1,j+1):
        print(i,sep="" "",end="" "")
        if(i<j):
            print(""+"",sep="" "",end="" "")
        a.append(i)
    print(""="",sum(a))
Â 
print()"
3188,Python Program to Print an Identity Matrix,"n=int(input(""Enter a number: ""))
for i in range(0,n):
    for j in range(0,n):
        if(i==j):
            print(""1"",sep="" "",end="" "")
        else:
            print(""0"",sep="" "",end="" "")
    print()"
3189,"

The Fibonacci Sequence is computed based on the following formula:


f(n)=0 if n=0
f(n)=1 if n=1
f(n)=f(n-1)+f(n-2) if n>1

Please write a program to compute the value of f(n) with a given n input by console.
","
def f(n):
    if n == 0: return 0
    elif n == 1: return 1
    else: return f(n-1)+f(n-2)

n=int(raw_input())
print f(n)


"
3190,"
Please write a program which accepts a string from console and print it in reverse order.
","
s=raw_input()
s = s[::-1]
print s

"
3191,Sort array in ascending order using recursion,"def swap_Element(arr,i,j):Â  Â  temp = arr[i]Â  Â  arr[i] = arr[j]Â  Â  arr[j] = tempdef sort_element(arr,n):Â  Â  if(n>0):Â  Â  Â  Â  for i in range(0,n):Â  Â  Â  Â  Â  Â  if (arr[i] >= arr[n - 1]):Â  Â  Â  Â  Â  Â  Â  Â  swap_Element(arr, i, n - 1)Â  Â  Â  Â  sort_element(arr, n - 1)def printArr(arr,n):Â  Â  for i in range(0, n):Â  Â  Â  Â  print(arr[i],end="" "")arr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):Â  Â  num = int(input())Â  Â  arr.append(num)sort_element(arr,n)print(""After ascendingÂ  order sort Array Elements are:"")printArr(arr, n)"
3192,Check whether a given number is a perfect number or not,"

num=int(input(""Enter a number:""))
sum=0
for i in range(1,num):
Â  Â if(num%i==0):
Â  Â  Â  sum=sum+i
if sum==num:
Â  Â print(""It is a Perfect Number"")
else:
Â  Â  print(""It is not a Perfect Number"")Â 
"
3193,Program to find sum of series 1!+2!+3!...+n!,"
print(""Enter the range of number:"")
n=int(input())
sum=0
fact=1
for i in range(1,n+1):
Â  Â  fact*=i
Â  Â  sum+=fact

print(""The sum of the series = "",sum)"
3194,Python Program to Check if a String is a Pangram or Not,"from string import ascii_lowercase as asc_lower
def check(s):
    return set(asc_lower) - set(s.lower()) == set([])
strng=raw_input(""Enter string:"")
if(check(strng)==True):
      print(""The string is a pangram"")
else:
      print(""The string isn't a pangram"")"
3195,Program to Find area and perimeter of a square,"
side=int(input(""Enter side of a square :""))
area=side*side
perimeter=4*side

print(""Area of the Square="",area)
print(""Perimeter of the square="",perimeter)"
3196,"Write a program that calculates and prints the value according to the given formula:
Q = Square root of [(2 * C * D)/H]
Following are the fixed values of C and H:
C is 50. H is 30.
D is the variable whose values should be input to your program in a comma-separated sequence.","#!/usr/bin/env python
import math
c=50
h=30
value = []
items=[x for x in raw_input().split(',')]
for d in items:
    value.append(str(int(round(math.sqrt(2*c*float(d)/h)))))

print ','.join(value)
"
3197,Python Program to Find the Gravitational Force Acting Between Two Objects,"m1=float(input(""Enter the first mass: ""))
m2=float(input(""Enter the second mass: ""))
r=float(input(""Enter the distance between the centres of the masses: ""))
G=6.673*(10**-11)
f=(G*m1*m2)/(r**2)
print(""Hence, the gravitational force is: "",round(f,2),""N"")"
3198,Print the ASCII value of character in a String,"
str=input(""Enter the String:"")
print(""ASCII values of letters in string are:"")
for i in range(len(str)):
Â  Â  print(str[i],"" ==> "",(ord)(str[i]))"
3199,Check prime number using Recursion,"def CheckPrime(i,num):Â  Â  if num==i:Â  Â  Â  Â  return 0Â  Â  else:Â  Â  Â  Â  if(num%i==0):Â  Â  Â  Â  Â  Â  return 1Â  Â  Â  Â  else:Â  Â  Â  Â  Â  Â  return CheckPrime(i+1,num)num=int(input(""Enter your Number:""))if(CheckPrime(2,num)==0):Â  Â  print(""It is a Prime Number."")else:Â  Â  print(""It is not a Prime Number."")"
3200,Find lexicographic rank of a given string,"def Find_Factorial(len1):Â  Â  fact = 1Â  Â  for i in range(1, len1+1):Â  Â  Â  Â  fact = fact * iÂ  Â  return factdef Find_Lexicographic_Rank(str,len1):Â  Â  rank = 1Â  Â  for inn in range(0, len1):Â  Â  Â  Â  count=0Â  Â  Â  Â  for out in range(inn+1, len1+1):Â  Â  Â  Â  Â  Â  if str[inn] > str[out]:Â  Â  Â  Â  Â  Â  Â  Â  count+=1Â  Â  Â  Â  rank+=count*Find_Factorial(len1-inn)Â  Â  return rankstr=input(""Enter Your String:"")print(""Lexicographic Rank of given String is: "",Find_Lexicographic_Rank(str,len(str)-1))"
3201, Find the largest element in the array,"
import sys
arr=[]
size = int(input(""Enter the size of the array: ""))
print(""Enter the Element of the array:"")
for i in range(0,size):
Â  Â  num = int(input())
Â  Â  arr.append(num)
max=-sys.maxsize-1
for j in range(0,size):
Â  Â  if (arr[j] >= max):
Â  Â  Â  Â  max = arr[j]
print(""The largest element of array: "",max)"
3202, Program to print the Solid Half Diamond Alphabet Pattern,"row_size=int(input(""Enter the row size:""))for out in range(row_size,-(row_size+1),-1):Â  Â  for inn in range(row_size,abs(out)-1,-1):Â  Â  Â  Â  print((chr)(inn+65),end="""")Â  Â  print(""\r"")"
3203,Write a program to find the nth strong number,"

'''Write a Python
programÂ toÂ find the nth strong number. orÂ Write a
programÂ toÂ find the nth strong number using Python '''

print(""Enter the Nth value:"")
rangenumber=int(input())
num = 1
c = 0
letest = 0

while (c != rangenumber):
Â  Â  num2 = num
Â  Â  num1 = num
Â  Â  sum = 0
Â  Â  fact = 1
Â  Â  while (num1 != 0):
Â  Â  Â  Â  fact = 1
Â  Â  Â  Â  rem = num1 % 10
Â  Â  Â  Â  num1 = num1 // 10
Â  Â  Â  Â  for j in range(1,rem+1):
Â  Â  Â  Â  Â  Â  fact = fact * j
Â  Â  Â  Â  sum = sum + fact
Â  Â  if (sum == num2):
Â  Â  Â  Â  c+=1
Â  Â  Â  Â  letest = num
Â  Â  num = num + 1
print(rangenumber,""th strong number is "",letest)Â 

"
3204,Program to Find the sum of a lower triangular matrix,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

#Calculate sum of lower triangular matrix element
sum=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i<j:
            sum += matrix[i][j]

# display the sum of a lower triangular matrix element
print(""Sum of Lower Triangular Matrix Elements is: "",sum)"
3205,Python Program to Implement Insertion Sort,"def insertion_sort(alist):
    for i in range(1, len(alist)):
        temp = alist[i]
        j = i - 1
        while (j >= 0 and temp < alist[j]):
            alist[j + 1] = alist[j]
            j = j - 1
        alist[j + 1] = temp
Â 
Â 
alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
insertion_sort(alist)
print('Sorted list: ', end='')
print(alist)"
3206,Add between 2 numbers without using arithmetic operators,"

'''Write a Python
programÂ toÂ add between 2 numbers without using arithmetic operators.
orÂ Write a programÂ toÂ add between 2 numbers without using
arithmetic operators using Python '''

print(""Enter first number:"")
num1=int(input())
print(""EnterÂ  second number:"")
num2=int(input())
while num2 != 0:
Â  Â  Â  Â carry= num1 & num2
Â  Â  Â  Â num1= num1 ^ num2
Â  Â  Â  Â num2=carry << 1
print(""Addition of two number is "",num1)Â 
"
3207,Program to calculate speed in km/hr,"
d=float(input(""Enter the Distance in Kms:""))
t=float(input(""Enter the Time in Hrs:""))
speed=d/t
print(""Speed is "",speed,"" (Km/Hr)"")"
3208,Program to convert binary to decimal using while loop,"
print(""Enter Binary number:"")
binary=int(input())
decimal= 0
temp = 0
while (binary!=0):

Â  Â  Â  Â  reminder = binary % 10
Â  Â  Â  Â  binary = binary // 10
Â  Â  Â  Â  decimal = decimal + reminder*pow(2,temp)
Â  Â  Â  Â  temp=temp+1
print(""Decimal number is: "",decimal)Â 
"
3209,Program to find the normal and trace of a matrix,"import math
# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

# Calculate sum of the diagonals element
# and Calculate sum of all the element
trace=0
sum=0
for i in range(0, row_size):
    for j in range(0, col_size):
        if i==j:
            trace += matrix[i][j]
        sum+=matrix[i][j]
normal=math.sqrt(sum)

# Display the normal and trace of the matrix
print(""Normal Of the Matrix is: "",normal)
print(""Trace Of the Matrix is: "",trace)"
3210,Program to find sum of series 1!/1+2!/2+3!/3+4!/4+5!/5 ...+n!/n,"
print(""Enter the range of number:"")
n=int(input())
sum=0.0
fact=1
for i in range(1,n+1):
Â  Â  fact*=i
Â  Â  sum+=fact/i
print(""The sum of the series = "",sum)"
3211,Python Program to Find Minimum Spanning Tree using Primâ€™s Algorithm,"class Graph:
    def __init__(self):
        # dictionary containing keys that map to the corresponding vertex object
        self.vertices = {}
Â 
    def add_vertex(self, key):
        """"""Add a vertex with the given key to the graph.""""""
        vertex = Vertex(key)
        self.vertices[key] = vertex
Â 
    def get_vertex(self, key):
        """"""Return vertex object with the corresponding key.""""""
        return self.vertices[key]
Â 
    def __contains__(self, key):
        return key in self.vertices
Â 
    def add_edge(self, src_key, dest_key, weight=1):
        """"""Add edge from src_key to dest_key with given weight.""""""
        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)
Â 
    def does_edge_exist(self, src_key, dest_key):
        """"""Return True if there is an edge from src_key to dest_key.""""""
        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])
Â 
    def display(self):
        print('Vertices: ', end='')
        for v in self:
            print(v.get_key(), end=' ')
        print()
Â 
        print('Edges: ')
        for v in self:
            for dest in v.get_neighbours():
                w = v.get_weight(dest)
                print('(src={}, dest={}, weight={}) '.format(v.get_key(),
                                                             dest.get_key(), w))
Â 
    def __len__(self):
        return len(self.vertices)
Â 
    def __iter__(self):
        return iter(self.vertices.values())
Â 
Â 
class Vertex:
    def __init__(self, key):
        self.key = key
        self.points_to = {}
Â 
    def get_key(self):
        """"""Return key corresponding to this vertex object.""""""
        return self.key
Â 
    def add_neighbour(self, dest, weight):
        """"""Make this vertex point to dest with given edge weight.""""""
        self.points_to[dest] = weight
Â 
    def get_neighbours(self):
        """"""Return all vertices pointed to by this vertex.""""""
        return self.points_to.keys()
Â 
    def get_weight(self, dest):
        """"""Get weight of edge from this vertex to dest.""""""
        return self.points_to[dest]
Â 
    def does_it_point_to(self, dest):
        """"""Return True if this vertex points to dest.""""""
        return dest in self.points_to
Â 
Â 
def mst_prim(g):
    """"""Return a minimum cost spanning tree of the connected graph g.""""""
    mst = Graph() # create new Graph object to hold the MST
Â 
    # if graph is empty
    if not g:
        return mst
Â 
    # nearest_neighbour[v] is the nearest neighbour of v that is in the MST
    # (v is a vertex outside the MST and has at least one neighbour in the MST)
    nearest_neighbour = {}
    # smallest_distance[v] is the distance of v to its nearest neighbour in the MST
    # (v is a vertex outside the MST and has at least one neighbour in the MST)
    smallest_distance = {}
    # v is in unvisited iff v has not been added to the MST
    unvisited = set(g)
Â 
    u = next(iter(g)) # select any one vertex from g
    mst.add_vertex(u.get_key()) # add a copy of it to the MST
    unvisited.remove(u)
Â 
    # for each neighbour of vertex u
    for n in u.get_neighbours():
        if n is u:
            # avoid self-loops
            continue
        # update dictionaries
        nearest_neighbour[n] = mst.get_vertex(u.get_key())
        smallest_distance[n] = u.get_weight(n)
Â 
    # loop until smallest_distance becomes empty
    while (smallest_distance):
        # get nearest vertex outside the MST
        outside_mst = min(smallest_distance, key=smallest_distance.get)
        # get the nearest neighbour inside the MST
        inside_mst = nearest_neighbour[outside_mst]
Â 
        # add a copy of the outside vertex to the MST
        mst.add_vertex(outside_mst.get_key())
        # add the edge to the MST
        mst.add_edge(outside_mst.get_key(), inside_mst.get_key(),
                     smallest_distance[outside_mst])
        mst.add_edge(inside_mst.get_key(), outside_mst.get_key(),
                     smallest_distance[outside_mst])
Â 
        # now that outside_mst has been added to the MST, remove it from our
        # dictionaries and the set unvisited
        unvisited.remove(outside_mst)
        del smallest_distance[outside_mst]
        del nearest_neighbour[outside_mst]
Â 
        # update dictionaries
        for n in outside_mst.get_neighbours():
            if n in unvisited:
                if n not in smallest_distance:
                    smallest_distance[n] = outside_mst.get_weight(n)
                    nearest_neighbour[n] = mst.get_vertex(outside_mst.get_key())
                else:
                    if smallest_distance[n] > outside_mst.get_weight(n):
                        smallest_distance[n] = outside_mst.get_weight(n)
                        nearest_neighbour[n] = mst.get_vertex(outside_mst.get_key())
Â 
    return mst
Â 
Â 
g = Graph()
print('Undirected Graph')
print('Menu')
print('add vertex <key>')
print('add edge <src> <dest> <weight>')
print('mst')
print('display')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0]
    if operation == 'add':
        suboperation = do[1]
        if suboperation == 'vertex':
            key = int(do[2])
            if key not in g:
                g.add_vertex(key)
            else:
                print('Vertex already exists.')
        elif suboperation == 'edge':
            src = int(do[2])
            dest = int(do[3])
            weight = int(do[4])
            if src not in g:
                print('Vertex {} does not exist.'.format(src))
            elif dest not in g:
                print('Vertex {} does not exist.'.format(dest))
            else:
                if not g.does_edge_exist(src, dest):
                    g.add_edge(src, dest, weight)
                    g.add_edge(dest, src, weight)
                else:
                    print('Edge already exists.')
Â 
    elif operation == 'mst':
        mst = mst_prim(g)
        print('Minimum Spanning Tree:')
        mst.display()
        print()
Â 
    elif operation == 'display':
        g.display()
        print()
Â 
    elif operation == 'quit':
        break"
3212,Print numbers from 1 to 100 using for loop,"for i in range(1,101):
Â  Â  print(i,end="" "")"
3213,Python Program to Find the Sum of all Nodes in a Tree,"class Tree:
    def __init__(self, data=None):
        self.key = data
        self.children = []
Â 
    def set_root(self, data):
        self.key = data
Â 
    def add(self, node):
        self.children.append(node)
Â 
    def search(self, key):
        if self.key == key:
            return self
        for child in self.children:
            temp = child.search(key)
            if temp is not None:
                return temp
        return None
Â 
    def sum_nodes(self):
        summation = self.key
        for child in self.children:
            summation = summation + child.sum_nodes()
        return summation
Â 
Â 
tree = None
Â 
print('Menu (this assumes no duplicate keys)')
print('add <data> at root')
print('add <data> below <data>')
print('sum')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
    if operation == 'add':
        data = int(do[1])
        new_node = Tree(data)
        suboperation = do[2].strip().lower() 
        if suboperation == 'at':
            tree = new_node
        elif suboperation == 'below':
            position = do[3].strip().lower()
            key = int(position)
            ref_node = None
            if tree is not None:
                ref_node = tree.search(key)
            if ref_node is None:
                print('No such key.')
                continue
            ref_node.add(new_node)
Â 
    elif operation == 'sum':
        if tree is None:
            print('Tree is empty.')
        else:
            summation = tree.sum_nodes()
            print('Sum of all nodes: {}'.format(summation))
Â 
    elif operation == 'quit':
        break"
3214,Print the Full Inverted Pyramid Number Pattern,"row_size=int(input(""Enter the row size:""))for out in range(row_size,0,-1):Â  Â  for inn in range(row_size,out,-1):Â  Â  Â  Â  print("" "",end="""")Â  Â  for p in range(out,0,-1):Â  Â  Â  Â  print(out,end="" "")Â  Â  print(""\r"")"
3215,Program to find sum of series 1/2-2/3+3/4-4/5+5/6...+N/N+1,"
print(""Enter the range of number(Limit):"")
n=int(input())
i=1
sum=0.0
while(i<=n):
Â  Â  if(i%2==0):
Â  Â  Â  Â  sum-=i/(i+1)
Â  Â  else:
Â  Â  Â  Â  sum+=i/(i+1)
Â  Â  i+=1
print(""The sum of the series = "",sum)"
3216,Check whether number is Happy Number or Not,"
num=int(input(""Enter a number:""))
sum=0
while sum != 1 and sum != 4:
Â  Â  sum=0
Â  Â  while num!=0:
Â  Â  Â  Â  rem = num % 10
Â  Â  Â  Â  sum += (rem*rem)
Â  Â  Â  Â  num //= 10
Â  Â  num=sum

if sum==1:
Â  Â  print(""It is a Happy Number."")
else:
Â  Â print(""It isÂ  an Unhappy Number."")"
3217,Find the length of the string using the inbuilt function,"
str=input(""Enter the String:"")
print(""Your Enter String is:"", len(str))"
3218,Python Program to Take in a String and Replace Every Blank Space with Hyphen,"string=raw_input(""Enter string:"")
string=string.replace(' ','-')
print(""Modified string:"")
print(string)"
3219,Python Program to Find the Cumulative Sum of a List where the ith Element is the Sum of the First i+1 Elements From The Original List,"a=[]
n= int(input(""Enter the number of elements in list:""))
for x in range(0,n):
    element=int(input(""Enter element"" + str(x+1) + "":""))
    a.append(element)
b=[sum(a[0:x+1]) for x in range(0,len(a))]
print(""The original list is: "",a)
print(""The new list is: "",b)"
3220,Program to enter basic salary and calculate gross salary of an employee,"
basic=float(input(""Enter the basic salary of an employee:""))
da = (float)(15 * basic) / 100.0
hr = (float)(10 * basic) / 100.0
da_on_ta = (float)(3 * basic) / 100.0
gross = basic + da + hr + da_on_ta
print(""Gross salary of an Employee= "",gross)"
3221,Python Program to Solve Rod Cutting Problem using Dynamic Programming with Bottom-Up Approach,"def cut_rod(p, n):
    """"""Take a list p of prices and the rod length n and return lists r and s.
    r[i] is the maximum revenue that you can get and s[i] is the length of the
    first piece to cut from a rod of length i.""""""
    # r[i] is the maximum revenue for rod length i
    # r[i] = -1 means that r[i] has not been calculated yet
    r = [-1]*(n + 1)
    r[0] = 0
Â 
    # s[i] is the length of the initial cut needed for rod length i
    # s[0] is not needed
    s = [-1]*(n + 1)
Â 
    for i in range(1, n + 1):
        q = -1
        for j in range(1, i + 1):
            temp = p[j] + r[i - j]
            if q < temp:
                q = temp
                s[i] = j
        r[i] = q
Â 
    return r, s
Â 
Â 
n = int(input('Enter the length of the rod in inches: '))
Â 
# p[i] is the price of a rod of length i
# p[0] is not needed, so it is set to None
p = [None]
for i in range(1, n + 1):
    price = input('Enter the price of a rod of length {} in: '.format(i))
    p.append(int(price))
Â 
r, s = cut_rod(p, n)
print('The maximum revenue that can be obtained:', r[n])
print('The rod needs to be cut into length(s) of ', end='')
while n > 0:
    print(s[n], end=' ')
    n -= s[n]"
3222,Python Program to Check Whether a String is a Palindrome or not Using Recursion,"def is_palindrome(s):
    if len(s) < 1:
        return True
    else:
        if s[0] == s[-1]:
            return is_palindrome(s[1:-1])
        else:
            return False
a=str(input(""Enter string:""))
if(is_palindrome(a)==True):
    print(""String is a palindrome!"")
else:
    print(""String isn't a palindrome!"")"
3223,Program to Find the sum of series 1Â³+2Â³+3Â³+4Â³.....+NÂ³,"n=int(input(""Enter the range of number:""))sum=0for i in range(1,n+1):Â  Â  sum+=pow(i,3)print(""The sum of the series = "",sum)"
3224,Write C|Java|C++|Python Program to compute x^n/n!,"
n=int(input(""Enter the n Value:""))
x=int(input(""Enter the x value:""))
fact=1
for i in range(1,n+1):
Â  Â  fact*=i
result=pow(x,n)/fact
print(""Result(x^n/n!)= "",result)
"
3225,Program to Convert Hexadecimal Number to Binary,"

print(""Enter a HexaDecimal number:"")
hex=input()
binary=""""
i=0
j=1
for i in range(0,len(hex)):
Â  Â  if hex[i]=='F' :
Â  Â  Â  Â  binary=binary+""1111""
Â  Â  elif hex[i]==""E"":
Â  Â  Â  Â  binary=binary+""1110""
Â  Â  elif hex[i]==""D"":
Â  Â  Â  Â  binary=binary+""1101""
Â  Â  elif hex[i]==""C"":
Â  Â  Â  Â  binary=binary+""1100""
Â  Â  elif hex[i]==""B"":
Â  Â  Â  Â  binary=binary+""1011""
Â  Â  elif hex[i]==""A"":
Â  Â  Â  Â  binary=binary+""1010""
Â  Â  else:
Â  Â  Â  Â  st=hex[i:i+1]
Â  Â  Â  Â  decimal=0
Â  Â  Â  Â  temp=1
Â  Â  Â  Â  hexnum=int(st)
Â  Â  Â  Â  while hexnum!=0:
Â  Â  Â  Â  Â  Â  remainder=hexnum%2
Â  Â  Â  Â  Â  Â  hexnum=hexnum//2
Â  Â  Â  Â  Â  Â  decimal=decimal+remainder*temp
Â  Â  Â  Â  Â  Â  temp=temp*10
Â  Â  Â  Â  str1=str(decimal)
Â  Â  Â  Â  if len(str1)==3:
Â  Â  Â  Â  Â  Â  str1=""0""+str1
Â  Â  Â  Â  if len(str1)==2:
Â  Â  Â  Â  Â  Â  str1=""00""+str1
Â  Â  Â  Â  if len(str1)==1:
Â  Â  Â  Â  Â  Â  str1=""000""+str1
Â  Â  Â  Â  binary=binary+str1
print(""HexaDecimal to Binary is"",binary)
"
3226,"    Write a method which can calculate square value of number
:","def square(num):
    return num ** 2

print square(2)
print square(3)
"
3227,Find out all Happy numbers present within a given range,"
print(""Enter a range:"")
range1=int(input())
range2=int(input())
print(""Happy numbers between "",range1,"" and "",range2,"" are: "")
for i in range(range1,range2+1):
Â  Â  num=i
Â  Â  sum=0
Â  Â  while sum != 1 and sum != 4:
Â  Â  Â  Â  sum = 0
Â  Â  Â  Â  while num != 0:
Â  Â  Â  Â  Â  Â  rem = num % 10
Â  Â  Â  Â  Â  Â  sum += (rem * rem)
Â  Â  Â  Â  Â  Â  num //= 10
Â  Â  Â  Â  num = sum

Â  Â  if sum == 1:
Â  Â  Â  Â  print(i,end="" "")"
3228,Python Program to Print only Nodes in Left SubTree,"class BinaryTree:
    def __init__(self, key=None):
        self.key = key
        self.left = None
        self.right = None
Â 
    def set_root(self, key):
        self.key = key
Â 
    def inorder(self):
        if self.left is not None:
            self.left.inorder()
        print(self.key, end=' ')
        if self.right is not None:
            self.right.inorder()
Â 
    def insert_left(self, new_node):
        self.left = new_node
Â 
    def insert_right(self, new_node):
        self.right = new_node
Â 
    def search(self, key):
        if self.key == key:
            return self
        if self.left is not None:
            temp =  self.left.search(key)
            if temp is not None:
                return temp
        if self.right is not None:
            temp =  self.right.search(key)
            return temp
        return None
Â 
    def print_left(self):
        if self.left is not None:
            self.left.inorder()
Â 
Â 
btree = None
Â 
print('Menu (this assumes no duplicate keys)')
print('insert <data> at root')
print('insert <data> left of <data>')
print('insert <data> right of <data>')
print('left')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
    if operation == 'insert':
        data = int(do[1])
        new_node = BinaryTree(data)
        suboperation = do[2].strip().lower() 
        if suboperation == 'at':
                btree = new_node
        else:
            position = do[4].strip().lower()
            key = int(position)
            ref_node = None
            if btree is not None:
                ref_node = btree.search(key)
            if ref_node is None:
                print('No such key.')
                continue
            if suboperation == 'left':
                ref_node.insert_left(new_node)
            elif suboperation == 'right':
                ref_node.insert_right(new_node)
Â 
    elif operation == 'left':
        print('Nodes of left subtree: ', end='')
        if btree is not None:
            btree.print_left()
        print()
Â 
    elif operation == 'quit':
        break"
3229,Print Average of Numbers in array at Odd position  ,"
arr=[]
cout=0
sum=0
size = int(input(""Enter the size of the array: ""))
print(""Enter the Element of the array:"")
for i in range(0,size):
Â  Â  num = int(input())
Â  Â  arr.append(num)
for j in range(0, size):
Â  Â  if ((j+1) % 2 == 1):
Â  Â  Â  Â  sum += arr[j]
Â  Â  Â  Â  cout+=1
avg = (sum / cout)
print(""Average of Numbers in array at odd position is "", avg)"
3230,"
With two given lists [1,3,6,78,35,55] and [12,24,35,24,88,120,155], write a program to make a list whose elements are intersection of the above given lists.
:","
set1=set([1,3,6,78,35,55])
set2=set([12,24,35,24,88,120,155])
set1 &= set2
li=list(set1)
print li

"
3231,Sum of elements in array using recursion,"sum=0def SumOfArray(arr,n):Â  Â  global sumÂ  Â  if(n>0):Â  Â  Â  Â  i=n-1Â  Â  Â  Â  sum=sum+arr[i]Â  Â  Â  Â  SumOfArray(arr,i)Â  Â  return sumarr=[]n = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,n):Â  Â  num = int(input())Â  Â  arr.append(num)print(""Sum of Array Element is:"",SumOfArray(arr,n))"
3232,Find the sum of negative and positive numbers in array,"
arr=[]
size = int(input(""Enter the size of the array: ""))
print(""Enter the Element of the array:"")
for i in range(0,size):
Â  Â  num = float(input())
Â  Â  arr.append(num)
sum_pos=0.0
sum_neg=0.0
for j in range(0,size):
Â  Â  Â  Â  if (arr[j] > 0):
Â  Â  Â  Â  Â  Â  sum_pos += arr[j]
Â  Â  Â  Â  else:
Â  Â  Â  Â  Â  Â  sum_neg += arr[j]
print(""sum of positive number : "",sum_pos)
print(""sum of Negative number : "",sum_neg)"
3233,Python Program to Check if a Number is a Perfect Number,"Â 
n = int(input(""Enter any number: ""))
sum1 = 0
for i in range(1, n):
    if(n % i == 0):
        sum1 = sum1 + i
if (sum1 == n):
    print(""The number is a Perfect number!"")
else:
    print(""The number is not a Perfect number!"")"
3234,Python Program to Find Whether a Number is a Power of Two,"def is_power_of_two(n):
    """"""Return True if n is a power of two.""""""
    if n <= 0:
        return False
    else:
        return n & (n - 1) == 0
Â 
Â 
n = int(input('Enter a number: '))
Â 
if is_power_of_two(n):
    print('{} is a power of two.'.format(n))
else:
    print('{} is not a power of two.'.format(n))"
3235,Python Program to Select the ith Smallest Element from a List in Expected Linear Time,"def select(alist, start, end, i):
    """"""Find ith smallest element in alist[start... end-1].""""""
    if end - start <= 1:
        return alist[start]
    pivot = partition(alist, start, end)
Â 
    # number of elements in alist[start... pivot]
    k = pivot - start + 1
Â 
    if i < k:
        return select(alist, start, pivot, i)
    elif i > k:
        return select(alist, pivot + 1, end, i - k)
Â 
    return alist[pivot]
Â 
def partition(alist, start, end):
    pivot = alist[start]
    i = start + 1
    j = end - 1
Â 
    while True:
        while (i <= j and alist[i] <= pivot):
            i = i + 1
        while (i <= j and alist[j] >= pivot):
            j = j - 1
Â 
        if i <= j:
            alist[i], alist[j] = alist[j], alist[i]
        else:
            alist[start], alist[j] = alist[j], alist[start]
            return j
Â 
Â 
alist = input('Enter the list of numbers: ')
alist = alist.split()
alist = [int(x) for x in alist]
i = int(input('The ith smallest element will be found. Enter i: '))
Â 
ith_smallest_item = select(alist, 0, len(alist), i)
print('Result: {}.'.format(ith_smallest_item))"
3236,Program to print all alphabets from A to Z using loop,"print(""Printing A-Z using ASCII"")
for i in range(65,90+1):
Â  Â  print(chr(i),end="" "")"
3237,Program to find the sum of series 1+3+5+7..+N,"

print(""Enter the range of number:"")

n=int(input())
sum=0
i=1
while(i<=n):
Â  Â  sum+=i
Â  Â  i+=2
print(""The sum of the series = "",sum)"
3238,Find the Minimum occurring character in given string,"str=input(""Enter Your String:"")min=999arr=[0]*256for i in range(len(str)):Â  Â  if str[i]==' ':Â  Â  Â  Â  continueÂ  Â  num=ord(str[i])Â  Â  arr[num]+=1ch=' 'for i in range(len(str)):Â  Â  if arr[ord(str[i])] != 0:Â  Â  Â  Â  if arr[ord(str[i])] <= min:Â  Â  Â  Â  Â  Â  min = arr[ord(str[i])]Â  Â  Â  Â  Â  Â  ch=str[i]print(""The Minimum occurring character in a string is "",ch)"
3239,Program to Find subtraction of two matrices,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]
# Taking input of the 2nd matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])

# Compute Subtraction of two matrices
sub_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        sub_matrix[i][j]=matrix[i][j]-matrix1[i][j]

# display the Subtraction of two matrices
print(""Subtraction of the two Matrices is:"")
for m in sub_matrix:
    print(m)"
3240,"Define a function which can generate and print a tuple where the value are square of numbers between 1 and 20 (both included). 
:","Solution
def printTuple():
	li=list()
	for i in range(1,21):
		li.append(i**2)
	print tuple(li)
		
printTuple()



"
3241,Python Program to Create a Class and Get All Possible Subsets from a Set of Distinct Integers,"class sub:  
    def f1(self, s1):  
        return self.f2([], sorted(s1))  
Â 
    def f2(self, curr, s1):  
        if s1:  
            return self.f2(curr, s1[1:]) + self.f2(curr + [s1[0]], s1[1:])  
        return [curr]  
a=[]
n=int(input(""Enter number of elements of list: ""))
for i in range(0,n):
    b=int(input(""Enter element: ""))
    a.append(b)
print(""Subsets: "")
print(sub().f1(a))"
3242,Python Program to Print All Permutations of a String in Lexicographic Order using Recursion,"from math import factorial
Â 
def print_permutations_lexicographic_order(s):
    """"""Print all permutations of string s in lexicographic order.""""""
    seq = list(s)
    for _ in range(factorial(len(seq))):
        print(''.join(seq))
        nxt = get_next_permutation(seq)
        # if seq is the highest permutation
        if nxt is None:
            # then reverse it
            seq.reverse()
        else:
            seq = nxt
Â 
def get_next_permutation(seq):
    """"""Return next greater lexicographic permutation. Return None if cannot.
Â 
    This will return the next greater permutation of seq in lexicographic
    order. If seq is the highest permutation then this will return None.
Â 
    seq is a list.
    """"""
    if len(seq) == 0:
        return None
Â 
    nxt = get_next_permutation(seq[1:])
Â 
    # if seq[1:] is the highest permutation
    if nxt is None:
        # reverse seq[1:], so that seq[1:] now is in ascending order
        seq[1:] = reversed(seq[1:])
Â 
        # find q such that seq[q] is the smallest element in seq[1:] such that
        # seq[q] > seq[0]
        q = 1
        while q < len(seq) and seq[0] > seq[q]:
            q += 1
Â 
        # if cannot find q, then seq is the highest permutation
        if q == len(seq):
            return None
Â 
        # swap seq[0] and seq[q]
        seq[0], seq[q] = seq[q], seq[0]
Â 
        return seq
    else:
        return [seq[0]] + nxt
Â 
Â 
s = input('Enter the string: ')
print_permutations_lexicographic_order(s)"
3243,Python Program to Remove the nth Index Character from a Non-Empty String,"def remove(string, n):  
      first = string[:n]   
      last = string[n+1:]  
      return first + last
string=raw_input(""Enter the sring:"")
n=int(input(""Enter the index of the character to remove:""))
print(""Modified string:"")
print(remove(string, n))"
3244,Write a Program to Find the nth Prime Number,"

'''Write a Python
programÂ toÂ find the nth prime number. orÂ Write a
programÂ toÂ find the nth prime number using Python '''


print(""Enter Nth Number:"")
rangenumber=int(input())
c = 0
num = 2
letest = 0

while (c != rangenumber):
Â  Â count = 0
Â  Â for i in range(2,num):
Â  Â  Â  if (num % i == 0):
Â  Â  Â  Â  Â count+=1
Â  Â  Â  Â  Â break
Â  Â if (count == 0):
Â  Â  Â  c+=1
Â  Â  Â  letest = num
Â  Â num = num + 1
print (rangenumber,""th prime number is "",letest)
"
3245,Find words ending with given characters(suffix),"str=input(""Enter Your String:"")ch=input(""Enter the Character:"")sub_str=str.split("" "")print(""All the words ending with "",ch,"" are:"")for inn in range(0,len(sub_str)):Â  Â  if sub_str[inn].endswith(ch):Â  Â  Â  Â  print(sub_str[inn],end="" "")"
3246,Python Program to Implement Linear Search,"def linear_search(alist, key):
    """"""Return index of key in alist. Return -1 if key not present.""""""
    for i in range(len(alist)):
        if alist[i] == key:
            return i
    return -1
Â 
Â 
alist = input('Enter the list of numbers: ')
alist = alist.split()
alist = [int(x) for x in alist]
key = int(input('The number to search for: '))
Â 
index = linear_search(alist, key)
if index < 0:
    print('{} was not found.'.format(key))
else:
    print('{} was found at index {}.'.format(key, index))"
3247,Python Program to Solve n-Queen Problem with Recursion,"class QueenChessBoard:
    def __init__(self, size):
        # board has dimensions size x size
        self.size = size
        # columns[r] is a number c if a queen is placed at row r and column c.
        # columns[r] is out of range if no queen is place in row r.
        # Thus after all queens are placed, they will be at positions
        # (columns[0], 0), (columns[1], 1), ... (columns[size - 1], size - 1)
        self.columns = []
Â 
    def get_size(self):
        return self.size
Â 
    def get_queens_count(self):
        return len(self.columns)
Â 
    def place_in_next_row(self, column):
        self.columns.append(column)
Â 
    def remove_in_current_row(self):
        return self.columns.pop()
Â 
    def is_this_column_safe_in_next_row(self, column):
        # index of next row
        row = len(self.columns)
Â 
        # check column
        for queen_column in self.columns:
            if column == queen_column:
                return False
Â 
        # check diagonal
        for queen_row, queen_column in enumerate(self.columns):
            if queen_column - queen_row == column - row:
                return False
Â 
        # check other diagonal
        for queen_row, queen_column in enumerate(self.columns):
            if ((self.size - queen_column) - queen_row
                == (self.size - column) - row):
                return False
Â 
        return True
Â 
    def display(self):
        for row in range(self.size):
            for column in range(self.size):
                if column == self.columns[row]:
                    print('Q', end=' ')
                else:
                    print('.', end=' ')
            print()
Â 
Â 
def print_all_solutions_to_n_queen(size):
    """"""Display a chessboard for each possible configuration of placing n queens
    on an n x n chessboard where n = size and print the number of such
    configurations.""""""
    board = QueenChessBoard(size)
    number_of_solutions = print_all_solutions_helper(board)
    print('Number of solutions:', number_of_solutions)
Â 
def print_all_solutions_helper(board):
    """"""Display a chessboard for each possible configuration of filling the given
    board with queens and return the number of such configurations.""""""
    size = board.get_size()
Â 
    # if board is full, display solution
    if size == board.get_queens_count():
        board.display()
        print()
        return 1
Â 
    number_of_solutions = 0
    # place queen in next row
    for column in range(size):
        if board.is_this_column_safe_in_next_row(column):
            board.place_in_next_row(column)
            number_of_solutions += print_all_solutions_helper(board)
            board.remove_in_current_row()
Â 
    return number_of_solutions
Â 
Â 
n = int(input('Enter n: '))
print_all_solutions_to_n_queen(n)"
3248,Python Program to Swap the First and Last Value of a List,"a=[]
n= int(input(""Enter the number of elements in list:""))
for x in range(0,n):
    element=int(input(""Enter element"" + str(x+1) + "":""))
    a.append(element)
temp=a[0]
a[0]=a[n-1]
a[n-1]=temp
print(""New list is:"")
print(a)"
3249,Write a program to print the alphabet pattern,"
print(""Enter the row and column size:"")
row_size=input()
for out in range(ord('A'),ord(row_size)+1):
Â  Â  for i in range(ord('A'),ord(row_size)+1):
Â  Â  Â  Â  print(chr(out),end="""")
Â  Â  print(""\r"")
"
3250,Program to convert a decimal number to Binary,"print(""Enter a Decimal Number: "")
decimal=int(input())
binary = 0
temp = 1
while (decimal != 0):
Â  Â  reminder = decimal % 2
Â  Â  decimal = decimal // 2
Â  Â  binary =int (binary + (reminder * temp))
Â  Â  temp =int( temp * 10)

print(""The Binary Number is: "",binary)

"
3251,Find the sum of digits of a number using recursion,"def SumOfDigits(num):Â  Â  if num==0:Â  Â  Â  Â  return 0Â  Â  else:Â  Â  Â  Â  return ((num%10) +SumOfDigits(num//10))num=int(input(""Enter the Number:""))print(""Sum of digits of given Number Using Recursion is:"",SumOfDigits(num))"
3252,Check if a string contains at least one Number,"str=input(""Enter Your String:"")count=0for inn in range(0,len(str)):Â  Â  if str[inn] >= '0' andÂ  str[inn] <= '9':Â  Â  Â  Â  count+=1if count>=1:Â  Â  print(""String contains at least one digits."")else:Â  Â  print(""String does not contains at least one digits."")"
3253,"Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the values only.
:","Solution
def printDict():
	d=dict()
	for i in range(1,21):
		d[i]=i**2
	for (k,v) in d.items():	
		print v
		

printDict()

"
3254,Program to print series -1 4 -7 10 -13 16 -19...n,"
print(""Enter the range of number(Limit):"")
n=int(input())
i=1
se=1
while(i<=n):
Â  Â  if(i%2==0):
Â  Â  Â  Â  print(se,end="" "")
Â  Â  else:
Â  Â  Â  Â  print(-1*se, end="" "")
Â  Â  se+=3
Â  Â  i+=1"
3255,Python Program to Print nth Fibonacci Number using Dynamic Programming with Bottom-Up Approach,"def fibonacci(n):
    """"""Return the nth Fibonacci number.""""""
    if n == 0:
        return 0
Â 
    # r[i] will contain the ith Fibonacci number
    r = [-1]*(n + 1)
    r[0] = 0
    r[1] = 1
Â 
    for i in range(2, n + 1):
        r[i] = r[i - 1] + r[i - 2]
Â 
    return r[n]
Â 
Â 
n = int(input('Enter n: '))
Â 
ans = fibonacci(n)
print('The nth Fibonacci number:', ans)"
3256,Find the First small Letter in a given String,"
str=input(""Enter the String:"")
ch=' '
for i in range(len(str)):
Â  Â  if str[i] >= 'a' and str[i] <= 'z':
Â  Â  Â  Â  ch = str[i]
Â  Â  Â  Â  break
Â  Â  else:
Â  Â  Â  Â  continue
print(""First small letter in a given String is: "", ch)"
3257,Program to compute the area and perimeter of Octagon,"

import math
print(""Enter the length of the side:"")
a=int(input())
area=(2*(1+math.sqrt(2))*math.pow(a,2))
perimeter=(8*a)
print(""Area of the Octagon = "",area)
print(""Perimeter of the Octagon = "",perimeter)
"
3258,Python Program to Check if a Number is a Palindrome,"Â 
n=int(input(""Enter number:""))
temp=n
rev=0
while(n>0):
    dig=n%10
    rev=rev*10+dig
    n=n//10
if(temp==rev):
    print(""The number is a palindrome!"")
else:
    print(""The number isn't a palindrome!"")"
3259,Print multiplication table using recursion,"def MultiplicationTable(num, i):Â  Â  print(num,"" X "",i,"" = "",num * i)Â  Â  if (i < 10):Â  Â  Â  Â  MultiplicationTable(num, i + 1)num=int(input(""Enter a number:""))print(""Multiplication Table of "",num,"" is:"")MultiplicationTable(num, 1)"
3260,Python Program to Form a New String Made of the First 2 and Last 2 characters From a Given String,"string=raw_input(""Enter string:"")
count=0
for i in string:
      count=count+1
new=string[0:2]+string[count-2:count]
print(""Newly formed string is:"")
print(new)"
3261,Program to find the sum of series 1+X+X^3...+X^N,"

print(""Enter the range of number:"")
n=int(input())
print(""Enter the value of x:"");
x=int(input())
sum=0
i=1
while(i<=n):
Â  Â  sum+=pow(x,i)
Â  Â  i+=2print(""The sum of the series = "",sum)"
3262,Program to print Arithmetic series 1 4 7 10...N,"
print(""Enter the First Number:"")
first_num=int(input())
print(""Enter the range of number(Limit):"")
n=int(input())
print(""Enter the Difference Between two Number:"")
diff=int(input())
while(first_num<=n):
Â  Â  Â print(first_num,end="" "")
Â  Â  Â first_num+=diff"
3263,Check whether a given matrix is an identity matrix or not,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

# check Diagonal elements are 1 and rest elements are 0
point=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        # check for diagonals element
        if i == j and matrix[i][j] != 1:
            point=1
            break
        #check for rest elements
        elif i!=j and matrix[i][j]!=0:
            point=1
            break

if point==1:
    print(""Given Matrix is not an identity matrix."")
else:
    print(""Given Matrix is an identity matrix."")"
3264,Program to print ascii value of a character,"
ch=input(""Enter a character:"")
ascii=ord(ch) #ord is used for returning the ASCII value a character, ord stands for ordinal
print(""The ASCII value is"",ascii)"
3265,Find subtraction of two numbers using recursion,"def Subtraction(num1,num2):Â  Â  if num2==0:Â  Â  Â  Â  return num1Â  Â  return Subtraction(num1-1, num2-1)print(""Enter the two Number:"")num1=int(input())num2=int(input())print(""Subtraction of Two Number Using Recursion is: "",Subtraction(num1,num2))"
3266,Program to Find subtraction of two matrices,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]
# Taking input of the 2nd matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])

# Compute Subtraction of two matrices
sub_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        sub_matrix[i][j]=matrix[i][j]-matrix1[i][j]

# display the Subtraction of two matrices
print(""Subtraction of the two Matrices is:"")
for m in sub_matrix:
    print(m)"
3267,Python Program to Find if Undirected Graph is Bipartite using BFS,"class Graph:
    def __init__(self):
        # dictionary containing keys that map to the corresponding vertex object
        self.vertices = {}
Â 
    def add_vertex(self, key):
        """"""Add a vertex with the given key to the graph.""""""
        vertex = Vertex(key)
        self.vertices[key] = vertex
Â 
    def get_vertex(self, key):
        """"""Return vertex object with the corresponding key.""""""
        return self.vertices[key]
Â 
    def __contains__(self, key):
        return key in self.vertices
Â 
    def add_edge(self, src_key, dest_key, weight=1):
        """"""Add edge from src_key to dest_key with given weight.""""""
        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)
Â 
    def add_undirected_edge(self, v1_key, v2_key, weight=1):
        """"""Add undirected edge (2 directed edges) between v1_key and v2_key with
        given weight.""""""
        self.add_edge(v1_key, v2_key, weight)
        self.add_edge(v2_key, v1_key, weight)
Â 
    def does_undirected_edge_exist(self, v1_key, v2_key):
        """"""Return True if there is an undirected edge between v1_key and v2_key.""""""
        return (self.does_edge_exist(v1_key, v2_key)
                and self.does_edge_exist(v1_key, v2_key))
Â 
    def does_edge_exist(self, src_key, dest_key):
        """"""Return True if there is an edge from src_key to dest_key.""""""
        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])
Â 
    def __iter__(self):
        return iter(self.vertices.values())
Â 
Â 
class Vertex:
    def __init__(self, key):
        self.key = key
        self.points_to = {}
Â 
    def get_key(self):
        """"""Return key corresponding to this vertex object.""""""
        return self.key
Â 
    def add_neighbour(self, dest, weight):
        """"""Make this vertex point to dest with given edge weight.""""""
        self.points_to[dest] = weight
Â 
    def get_neighbours(self):
        """"""Return all vertices pointed to by this vertex.""""""
        return self.points_to.keys()
Â 
    def get_weight(self, dest):
        """"""Get weight of edge from this vertex to dest.""""""
        return self.points_to[dest]
Â 
    def does_it_point_to(self, dest):
        """"""Return True if this vertex points to dest.""""""
        return dest in self.points_to
Â 
Â 
class Queue:
    def __init__(self):
        self.items = []
Â 
    def is_empty(self):
        return self.items == []
Â 
    def enqueue(self, data):
        self.items.append(data)
Â 
    def dequeue(self):
        return self.items.pop(0)
Â 
Â 
def is_bipartite(vertex, visited):
    """"""Return True if component containing vertex is bipartite and put all
    vertices in its component in set visited.""""""
    colour = {vertex: 0}
    visited.add(vertex)
    q = Queue()
    q.enqueue(vertex)
    while not q.is_empty():
        current = q.dequeue()
Â 
        next_colour = 1 - colour[current] # switch colour
        for dest in current.get_neighbours():
            if dest not in visited:
                visited.add(dest)
                colour[dest] = next_colour
                q.enqueue(dest)
            else:
                if colour[dest] != next_colour:
                    return False
    return True
Â 
Â 
g = Graph()
print('Undirected Graph')
print('Menu')
print('add vertex <key>')
print('add edge <vertex1> <vertex2>')
print('bipartite')
print('display')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0]
    if operation == 'add':
        suboperation = do[1]
        if suboperation == 'vertex':
            key = int(do[2])
            if key not in g:
                g.add_vertex(key)
            else:
                print('Vertex already exists.')
        elif suboperation == 'edge':
            v1 = int(do[2])
            v2 = int(do[3])
            if v1 not in g:
                print('Vertex {} does not exist.'.format(v1))
            elif v2 not in g:
                print('Vertex {} does not exist.'.format(v2))
            else:
                if not g.does_undirected_edge_exist(v1, v2):
                    g.add_undirected_edge(v1, v2)
                else:
                    print('Edge already exists.')
Â 
    elif operation == 'bipartite':
        bipartite = True
        visited = set()
        for v in g:
            if v not in visited:
                if not is_bipartite(v, visited):
                    bipartite = False
                    break
Â 
        if bipartite:
            print('Graph is bipartite.')
        else:
            print('Graph is not bipartite.')
Â 
    elif operation == 'display':
        print('Vertices: ', end='')
        for v in g:
            print(v.get_key(), end=' ')
        print()
Â 
        print('Edges: ')
        for v in g:
            for dest in v.get_neighbours():
                w = v.get_weight(dest)
                print('(src={}, dest={}, weight={}) '.format(v.get_key(),
                                                             dest.get_key(), w))
        print()
Â 
    elif operation == 'quit':
        break"
3268,Program to find sum of series 1+1/3+1/5+1/7+.....1/(N+2),"
print(""Enter the range of number(Limit):"")
n=int(input())
i=1
sum=0.0
while(i<=n):
Â  Â  sum+=1/i
Â  Â  i+=2
print(""The sum of the series = "",sum)"
3269,Use a list comprehension to square each odd number in a list. The list is input by a sequence of comma-separated numbers.,"values = raw_input()
numbers = [x for x in values.split("","") if int(x)%2!=0]
print "","".join(numbers)
"
3270,Python Program to Find the Second Largest Number in a List,"a=[]
n=int(input(""Enter number of elements:""))
for i in range(1,n+1):
    b=int(input(""Enter element:""))
    a.append(b)
a.sort()
print(""Second largest element is:"",a[n-2])"
3271,Find a pair with maximum product in array,"arr=[]size = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,size):Â  Â  num = int(input())Â  Â  arr.append(num)First_element=arr[0]Second_element=arr[1]Max_Product=First_element*Second_elementfor i in range(0,size-1):Â  Â  for j in range(i+1, size):Â  Â  Â  Â  product = arr[i] * arr[j]Â  Â  Â  Â  if abs(product) >= abs(Max_Product):Â  Â  Â  Â  Â  Â  Max_Product =productÂ  Â  Â  Â  Â  Â  First_element = arr[i]Â  Â  Â  Â  Â  Â  Second_element = arr[j]print(""Pair of Maximum Product is ("",First_element,"","",Second_element,"")"")print(""\nMaximum Product of 2 numbers is "",Max_Product)"
3272,Program to display an upper triangular matrix,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


#Display Upper triangular matrix
print(""Upper Triangular Matrix is:"")
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i>j:
            print(""0 "",end="""")
        else:
            print(matrix[i][j],end="" "")
    print()"
3273,Python Program to Find Minimum Spanning Tree using Krusalâ€™s Algorithm,"class Graph:
    def __init__(self):
        # dictionary containing keys that map to the corresponding vertex object
        self.vertices = {}
Â 
    def add_vertex(self, key):
        """"""Add a vertex with the given key to the graph.""""""
        vertex = Vertex(key)
        self.vertices[key] = vertex
Â 
    def get_vertex(self, key):
        """"""Return vertex object with the corresponding key.""""""
        return self.vertices[key]
Â 
    def __contains__(self, key):
        return key in self.vertices
Â 
    def add_edge(self, src_key, dest_key, weight=1):
        """"""Add edge from src_key to dest_key with given weight.""""""
        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)
Â 
    def does_vertex_exist(self, key):
        return key in self.vertices
Â 
    def does_edge_exist(self, src_key, dest_key):
        """"""Return True if there is an edge from src_key to dest_key.""""""
        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])
Â 
    def display(self):
        print('Vertices: ', end='')
        for v in self:
            print(v.get_key(), end=' ')
        print()
Â 
        print('Edges: ')
        for v in self:
            for dest in v.get_neighbours():
                w = v.get_weight(dest)
                print('(src={}, dest={}, weight={}) '.format(v.get_key(),
                                                             dest.get_key(), w))
Â 
    def __len__(self):
        return len(self.vertices)
Â 
    def __iter__(self):
        return iter(self.vertices.values())
Â 
Â 
class Vertex:
    def __init__(self, key):
        self.key = key
        self.points_to = {}
Â 
    def get_key(self):
        """"""Return key corresponding to this vertex object.""""""
        return self.key
Â 
    def add_neighbour(self, dest, weight):
        """"""Make this vertex point to dest with given edge weight.""""""
        self.points_to[dest] = weight
Â 
    def get_neighbours(self):
        """"""Return all vertices pointed to by this vertex.""""""
        return self.points_to.keys()
Â 
    def get_weight(self, dest):
        """"""Get weight of edge from this vertex to dest.""""""
        return self.points_to[dest]
Â 
    def does_it_point_to(self, dest):
        """"""Return True if this vertex points to dest.""""""
        return dest in self.points_to
Â 
Â 
def mst_krusal(g):
    """"""Return a minimum cost spanning tree of the connected graph g.""""""
    mst = Graph() # create new Graph object to hold the MST
Â 
    if len(g) == 1:
        u = next(iter(g)) # get the single vertex
        mst.add_vertex(u.get_key()) # add a copy of it to mst
        return mst
Â 
    # get all the edges in a list
    edges = []
    for v in g:
        for n in v.get_neighbours():
            # avoid adding two edges for each edge of the undirected graph
            if v.get_key() < n.get_key():
                edges.append((v, n))
Â 
    # sort edges
    edges.sort(key=lambda edge: edge[0].get_weight(edge[1]))
Â 
    # initially, each vertex is in its own component
    component = {}
    for i, v in enumerate(g):
        component[v] = i
Â 
    # next edge to try
    edge_index = 0
Â 
    # loop until mst has the same number of vertices as g
    while len(mst) < len(g):
        u, v = edges[edge_index]
        edge_index += 1
Â 
        # if adding edge (u, v) will not form a cycle
        if component[u] != component[v]:
Â 
            # add to mst
            if not mst.does_vertex_exist(u.get_key()):
                mst.add_vertex(u.get_key())
            if not mst.does_vertex_exist(v.get_key()):
                mst.add_vertex(v.get_key())
            mst.add_edge(u.get_key(), v.get_key(), u.get_weight(v))
            mst.add_edge(v.get_key(), u.get_key(), u.get_weight(v))
Â 
            # merge components of u and v
            for w in g:
                if component[w] == component[v]:
                    component[w] = component[u]
Â 
    return mst
Â 
Â 
g = Graph()
print('Undirected Graph')
print('Menu')
print('add vertex <key>')
print('add edge <src> <dest> <weight>')
print('mst')
print('display')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0]
    if operation == 'add':
        suboperation = do[1]
        if suboperation == 'vertex':
            key = int(do[2])
            if key not in g:
                g.add_vertex(key)
            else:
                print('Vertex already exists.')
        elif suboperation == 'edge':
            src = int(do[2])
            dest = int(do[3])
            weight = int(do[4])
            if src not in g:
                print('Vertex {} does not exist.'.format(src))
            elif dest not in g:
                print('Vertex {} does not exist.'.format(dest))
            else:
                if not g.does_edge_exist(src, dest):
                    g.add_edge(src, dest, weight)
                    g.add_edge(dest, src, weight)
                else:
                    print('Edge already exists.')
Â 
    elif operation == 'mst':
        mst = mst_krusal(g)
        print('Minimum Spanning Tree:')
        mst.display()
        print()
Â 
    elif operation == 'display':
        g.display()
        print()
Â 
    elif operation == 'quit':
        break"
3274,Check whether number is Magic Number or Not.,"
num=int(input(""Enter a number:""))
num1=num
#Sum of digit
sum=0
while num1!=0:
Â  Â  Â  Â  rem=num1%10
Â  Â  Â  Â  sum+=rem
Â  Â  Â  Â  num1//=10
#Reverse of sum
rev=0
num2=sum
while num2!=0:
Â  Â  rem2=num2%10
Â  Â  rev=rev*10+rem2
Â  Â  num2//=10

if sum*rev==num:
Â  Â print(""It is a Magic Number."")
else:
Â  Â print(""It is not a Magic Number."")"
3275,Program to Find the sum of series 3+7+13+21.....+N,"n=int(input(""Enter the range of number:""))sum=0for i in range(2,n+2):Â  Â  sum+=1+(i*(i-1))print(""The sum of the series = "",sum)"
3276,Python Program to Solve the Celebrity Problem,"def eliminate_non_celebrities(matrix):
    """"""Take an n x n matrix that has m[i][j] = True iff i knows j and return
    person who is maybe a celebrity.""""""
    possible_celeb = 0
    n = len(matrix)
    for p in range(1, n):
        if (matrix[possible_celeb][p]
            or not matrix[p][possible_celeb]):
            possible_celeb = p
    return possible_celeb
Â 
Â 
def check_if_celebrity(possible_celeb, matrix):
    """"""Take an n x n matrix that has m[i][j] = True iff i knows j and return
    True if possible_celeb is a celebrity.""""""
    for i in range(n):
        if matrix[possible_celeb][i] is True:
            return False
Â 
    for i in range(n):
        if matrix[i][possible_celeb] is False:
            if i != possible_celeb:
                return False
Â 
    return True
Â 
Â 
n = int(input('Number of people: '))
Â 
# create n x n matrix initialized to False that has m[i][j] = True iff i knows j
m = [[False]*n for _ in range(n)]
Â 
for i in range(n):
    people = input('Enter list of people known to {}: '.format(i)).split()
    for p in people:
        p = int(p)
        m[i][p] = True
Â 
possible_celeb = eliminate_non_celebrities(m)
Â 
if check_if_celebrity(possible_celeb, m):
    print('{} is the celebrity.'.format(possible_celeb))
else:
    print('There is no celebrity.')"
3277,Python Program to Find the Sum of First N Natural Numbers,"n=int(input(""Enter a number: ""))
sum1 = 0
while(n > 0):
    sum1=sum1+n
    n=n-1
print(""The sum of first n natural numbers is"",sum1)"
3278,Python Program to Implement Selection Sort,"def selection_sort(alist):
    for i in range(0, len(alist) - 1):
        smallest = i
        for j in range(i + 1, len(alist)):
            if alist[j] < alist[smallest]:
                smallest = j
        alist[i], alist[smallest] = alist[smallest], alist[i]
Â 
Â 
alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
selection_sort(alist)
print('Sorted list: ', end='')
print(alist)"
3279,Find first non repeating character in a string,"str=input(""Enter Your String:"")arr=[0]*256for i in range(len(str)):Â  Â  if str[i]!=' ':Â  Â  Â  Â  num=ord(str[i])Â  Â  Â  Â  arr[num]+=1ch=' 'print(""First Non-repeating character in a given string is: "",end="""")for i in range(len(str)):Â  Â  Â  Â  if arr[ord(str[i])] ==1:Â  Â  Â  Â  Â  Â  ch=str[i]Â  Â  Â  Â  Â  Â  breakprint(ch,end="""")"
3280,Program to Find nth Perfect Square Number,"
import math
rangenumber=int(input(""Enter a Nth Number:""))
c = 0
letest = 0
num = 1
while c != rangenumber:
Â  Â  num1 = num
Â  Â  sqr = math.sqrt(num1)
Â  Â  if sqr-math.floor(sqr)==0:
Â  Â  Â  Â  c+=1
Â  Â  Â  Â  letest = num

Â  Â  num = num + 1
print(rangenumber,""th Perfect Square number is "",latest)"
3281,Program to find the transpose of a matrix,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

# Compute transpose of two matrices
tran_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(0,row_size):
    for j in range(0,col_size):
        tran_matrix[i][j]=matrix[j][i]

# display transpose of the matrix
print(""Transpose of the Given Matrix is:"")
for m in tran_matrix:
    print(m)"
3282,Program to find the normal and trace of a matrix,"import math
# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

# Calculate sum of the diagonals element
# and Calculate sum of all the element
trace=0
sum=0
for i in range(0, row_size):
    for j in range(0, col_size):
        if i==j:
            trace += matrix[i][j]
        sum+=matrix[i][j]
normal=math.sqrt(sum)

# Display the normal and trace of the matrix
print(""Normal Of the Matrix is: "",normal)
print(""Trace Of the Matrix is: "",trace)"
3283,Python Program to Find the Factorial of a Number Using Recursion,"def factorial(n):
    if(n <= 1):
        return 1
    else:
        return(n*factorial(n-1))
n = int(input(""Enter number:""))
print(""Factorial:"")
print(factorial(n))"
3284,Find sum of series 1^1/1+2^2/2+3^3/3...+n^n/n,"
import math
print(""Enter the range of number:"")
n=int(input())
sum=0.0
fact=1
for i in range(1,n+1):
Â  Â  sum += pow(i, i) / i
print(""The sum of the series = "",sum)"
3285,Python Program that Displays which Letters are Present in Both the Strings,"s1=raw_input(""Enter first string:"")
s2=raw_input(""Enter second string:"")
a=list(set(s1)|set(s2))
print(""The letters are:"")
for i in a:
    print(i)"
3286,Program to display an upper triangular matrix,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


#Display Upper triangular matrix
print(""Upper Triangular Matrix is:"")
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i>j:
            print(""0 "",end="""")
        else:
            print(matrix[i][j],end="" "")
    print()"
3287,Python Program to Multiply All the Items in a Dictionary,"d={'A':10,'B':10,'C':239}
tot=1
for i in d:    
    tot=tot*d[i]
print(tot)"
3288,Program to Sort an array in Descending order,"arr=[]size = int(input(""Enter the size of the array: ""))print(""Enter the Element of the array:"")for i in range(0,size):Â  Â  num = int(input())Â  Â  arr.append(num)print(""Before sorting array elements are:"")for i in range(0,size):Â  Â  print(arr[i],end="" "")for i in range(0,size):Â  Â  for j in range(i+1, size):Â  Â  Â  Â  if arr[i] <= arr[j]:Â  Â  Â  Â  Â  Â  temp = arr[i]Â  Â  Â  Â  Â  Â  arr[i] = arr[j]Â  Â  Â  Â  Â  Â  arr[j] = tempprint(""\nAfter Decreasing order sort Array Elements are:"")for i in range(0, size):Â  Â  Â  Â  print(arr[i],end="" "")"
3289,Python Program to Print Border of given Tree in Anticlockwise Direction,"class BinaryTree:
    def __init__(self, key=None):
        self.key = key
        self.left = None
        self.right = None
Â 
    def set_root(self, key):
        self.key = key
Â 
    def inorder(self):
        if self.left is not None:
            self.left.inorder()
        print(self.key, end=' ')
        if self.right is not None:
            self.right.inorder()
Â 
    def insert_left(self, new_node):
        self.left = new_node
Â 
    def insert_right(self, new_node):
        self.right = new_node
Â 
    def search(self, key):
        if self.key == key:
            return self
        if self.left is not None:
            temp =  self.left.search(key)
            if temp is not None:
                return temp
        if self.right is not None:
            temp =  self.right.search(key)
            return temp
        return None
Â 
    def print_left_boundary(self):
        current = self
        while True:
            if current.left is not None:
                print(current.key, end=' ')
                current = current.left
            elif current.right is not None:
                print(current.key, end=' ')
                current = current.right
            else:
                break
Â 
    def print_right_boundary(self):
        if self.right is not None:
            self.right.print_right_boundary()
            print(self.key, end=' ')
        elif self.left is not None:
            self.left.print_right_boundary()
            print(self.key, end=' ')
Â 
Â 
    def print_leaves(self):
        if self.left is not None:
            self.left.print_leaves()
        if self.right is not None:
            self.right.print_leaves()
        if (self.left is None
            and self.right is None):
            print(self.key, end=' ')
Â 
    def print_border(self):
        print(self.key, end=' ')
        if self.left is not None:
            self.left.print_left_boundary()
            self.left.print_leaves()
        if self.right is not None:
            self.right.print_leaves()
            self.right.print_right_boundary()
Â 
Â 
btree = None
Â 
print('Menu (this assumes no duplicate keys)')
print('insert <data> at root')
print('insert <data> left of <data>')
print('insert <data> right of <data>')
print('border')
print('quit')
Â 
while True:
    do = input('What would you like to do? ').split()
Â 
    operation = do[0].strip().lower()
    if operation == 'insert':
        data = int(do[1])
        new_node = BinaryTree(data)
        suboperation = do[2].strip().lower() 
        if suboperation == 'at':
                btree = new_node
        else:
            position = do[4].strip().lower()
            key = int(position)
            ref_node = None
            if btree is not None:
                ref_node = btree.search(key)
            if ref_node is None:
                print('No such key.')
                continue
            if suboperation == 'left':
                ref_node.insert_left(new_node)
            elif suboperation == 'right':
                ref_node.insert_right(new_node)
Â 
    elif operation == 'border':
        if btree is not None:
            print('Border of tree: ')
            btree.print_border()
            print()
Â 
    elif operation == 'quit':
        break"
3290,Find out all Sunny numbers present within a given range,"
import math
print(""Enter a range:"")
range1=int(input())
range2=int(input())
print(""Sunny numbers between "",range1,"" and "",range2,"" are: "")
for i in range(range1,range2+1):
Â  Â  root = math.sqrt(i+ 1)
Â  Â  if int(root)==root:
Â  Â  Â  Â  print(i,end="" "")"
3291,"Define a class named American which has a static method called printNationality.
:","Solution
class American(object):
    @staticmethod
    def printNationality():
        print ""America""

anAmerican = American()
anAmerican.printNationality()
American.printNationality()




"
3292,Program to Print the Double Pyramid Star Pattern,"row_size=int(input(""Enter the row size:""))for out in range(row_size,-(row_size+1),-1):Â  Â  for inn in range(0,abs(out)+1):Â  Â  Â  Â  print(""*"",end="""")Â  Â  print(""\r"")"
3293,Python Program to Count the Occurrences of a Word in a Text File,"fname = input(""Enter file name: "")
word=input(""Enter word to be searched:"")
k = 0
Â 
with open(fname, 'r') as f:
    for line in f:
        words = line.split()
        for i in words:
            if(i==word):
                k=k+1
print(""Occurrences of the word:"")
print(k)"
3294,Check if two arrays are the disjoint or not,"
arr=[]
arr2=[]
size = int(input(""Enter the size of the 1st array: ""))
size2 = int(input(""Enter the size of the 2nd array: ""))

print(""Enter the Element of the 1st array:"")
for i in range(0,size):
Â  Â  num = int(input())
Â  Â  arr.append(num)

print(""Enter the Element of the 2nd array:"")
for i in range(0,size2):
Â  Â  num2 = int(input())
Â  Â  arr2.append(num2)

count=0
for i in range(0, size):
Â  Â  for j in range(0, size2):
Â  Â  Â  Â  if arr[i] == arr2[j]:
Â  Â  Â  Â  Â  Â  count+=1

if count>=1:
Â  Â  print(""Arrays are not disjoint."")
else:
Â  Â  print(""Arrays are disjoint."")"
3295,Program to read and display a Matrix,"# Get size of matrixrow_size=int(input(""Enter the row Size Of the Matrix:""))col_size=int(input(""Enter the columns Size Of the Matrix:""))matrix=[]# Taking input of the matrixprint(""Enter the Matrix Element:"")for i in range(row_size):Â Â Â Â matrix.append([int(j) for j in input().split()])# display the Matrixprint(""Given Matrix is:"")for m in matrix:Â Â Â Â print(m)"
3296,Python Program to Find if a Number is Prime or Not Prime Using Recursion,"def check(n, div = None):
    if div is None:
        div = n - 1
    while div >= 2:
        if n % div == 0:
            print(""Number not prime"")
            return False
        else:
            return check(n, div-1)
    else:
        print(""Number is prime"")
        return 'True'
n=int(input(""Enter number: ""))
check(n)"
3297,Find sum multiplication and an average of two numbers,"
num1=int(input(""Enter a number:""))
num2=int(input(""Enter a number:""))

addition=num1+num2
multiplication=num1*num2
average=(num1+num2)/2

print(""Addition ="",addition)
print(""Multiplication ="",multiplication)
print(""Average ="",average)
"
3298,Find sum of two numbers using recursion,"def sum(num1,num2):Â  Â  if num2==0:Â  Â  Â  Â  return num1Â  Â  return sum(num1, num2-1)+1print(""Enter the two Number:"")num1=int(input())num2=int(input())print(""Sum of Two Number Using Recursion is: "",sum(num1,num2))"
3299,Python Program to Count the Number of Words in a Text File,"fname = input(""Enter file name: "")
Â 
num_words = 0
Â 
with open(fname, 'r') as f:
    for line in f:
        words = line.split()
        num_words += len(words)
print(""Number of words:"")
print(num_words)"
3300,Python Program to Check if a Given Key Exists in a Dictionary or Not,"d={'A':1,'B':2,'C':3}
key=raw_input(""Enter key to check:"")
if key in d.keys():
      print(""Key is present and value of the key is:"")
      print(d[key])
else:
      print(""Key isn't present!"")"
3301, Print the Full Pyramid Number Pattern,"row_size=int(input(""Enter the row size:""))for out in range(1,row_size+1):Â  Â  for inn in range(row_size,out,-1):Â  Â  Â  Â  print("" "",end="""")Â  Â  for p in range(1,out+1):Â  Â  Â  Â  print(out,end="" "")Â  Â  print(""\r"")"
3302,Python Program to Check Whether a Number is Positive or Negative,"Â 
n=int(input(""Enter number: ""))
if(n>0):
    print(""Number is positive"")
else:
    print(""Number is negative"")"
3303,"
The Fibonacci Sequence is computed based on the following formula:


f(n)=0 if n=0
f(n)=1 if n=1
f(n)=f(n-1)+f(n-2) if n>1

Please write a program using list comprehension to print the Fibonacci Sequence in comma separated form with a given n input by console.
","
def f(n):
    if n == 0: return 0
    elif n == 1: return 1
    else: return f(n-1)+f(n-2)

n=int(raw_input())
values = [str(f(x)) for x in range(0, n+1)]
print "","".join(values)


"
3304,"


Please raise a RuntimeError exception.
:","
raise RuntimeError('something wrong')



"
3305,Program to print inverted right triangle alphabet pattern,"
print(""Enter the row and column size:"");
row_size=input()
for out in range(ord(row_size),ord('A')-1,-1):
Â  Â  for i in range(ord('A'),out+1):
Â  Â  Â  Â  print(chr(i),end="" "")
Â  Â  print(""\r"")"
3306,Program to find the sum of series 1+X+X^2/2...+X^N/N,"
print(""Enter the range of number:"")
n=int(input())
print(""Enter the value of x:"")
x=int(input())
sum=1.0
i=1
while(i<=n):
Â  Â  sum+=pow(x,i)/i
Â  Â  i+=1
print(""The sum of the series = "",sum)"
